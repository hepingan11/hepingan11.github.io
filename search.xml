<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Uniapp给我气到了,去学无敌的flutter~ 之学习笔记</title>
      <link href="/2025/08/03/Uniapp%E7%BB%99%E6%88%91%E6%B0%94%E5%88%B0%E4%BA%86-%E5%8E%BB%E5%AD%A6%E6%97%A0%E6%95%8C%E7%9A%84flutter-%E4%B9%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/08/03/Uniapp%E7%BB%99%E6%88%91%E6%B0%94%E5%88%B0%E4%BA%86-%E5%8E%BB%E5%AD%A6%E6%97%A0%E6%95%8C%E7%9A%84flutter-%E4%B9%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>前几天用uniapp写项目写出来很多功能在app,小程序,H5里面都不一样，气到我了uniapp封装性过强，于是我来看看大厂都在用的flutter是个什么东西，在ai的加持下打算5天内精通~</p><p>官方文档：<a href="https://docs.flutter.cn/get-started/install/">安装和环境配置 | Flutter 中文文档 - Flutter 中文开发者网站 - Flutter</a></p><h1 id="安装配置环境"><a href="#安装配置环境" class="headerlink" title="安装配置环境"></a>安装配置环境</h1><p>我安装配置是跟着官方文档走的，需要注意下一下几点：</p><ul><li><p>要使用 Flutter 创建 Android 应用，请确认已经安装以下 Android 组件。</p><ul><li><strong>Android SDK Platform, API 35</strong>+</li><li><strong>Android SDK Command-line Tools</strong></li><li><strong>Android SDK Build-Tools</strong></li><li><strong>Android SDK Platform-Tools</strong></li><li><strong>Android Emulator</strong></li></ul></li><li><h3 id="Windows-PATH-环境变量"><a href="#Windows-PATH-环境变量" class="headerlink" title="Windows PATH 环境变量"></a>Windows PATH 环境变量</h3><p>将flutter sdk目录下的bin文件夹添加到Path里</p></li><li><h4 id="国内环境配置"><a href="#国内环境配置" class="headerlink" title="国内环境配置"></a>国内环境配置</h4><p><a href="https://github.com/cfug">China Flutter User Group</a> (CFUG) 维护着一个 Flutter 简体中文网站 <a href="https://flutter.cn/">https://flutter.cn</a> 以及镜像。其他镜像可在 <a href="https://docs.flutter.cn/community/china/#known-trusted-community-run-mirror-sites">本文末尾</a> 找到</p><p><strong>配置你的机器使用镜像站点</strong>（以windows为例）</p><p>添加环境变量：PUB_HOSTED_URL 值： <a href="https://pub.flutter-io.cn/">https://pub.flutter-io.cn</a></p><p>FLUTTER_STORAGE_BASE_URL 值：<a href="https://storage.flutter-io.cn/">https://storage.flutter-io.cn</a></p></li><li><h4 id="flutter-doctor报错"><a href="#flutter-doctor报错" class="headerlink" title="flutter doctor报错"></a>flutter doctor报错</h4><p>我遇到的报错只有两个，一个是未安装windows桌面应用运行环境，这个需要下载visual Studio然后安装c++桌面应用环境，记得选window11或10;另一个是工具未下载完全，即报错：<strong>cmdline-tools component is missing</strong>先检查你的AS(Andriod Studio以下简称AS)是否勾选上了，然后再复制你的sdk目录，再在cmd输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter config --android-sdk  /path/to/android/sdk </span><br></pre></td></tr></table></figure><p><em>是你自己的sdk路径，如我的是 D:Android\Sdk</em></p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/37cc7014396bc6c9fcfc6469f6b83a3e.png"></p></li></ul><p><strong>新建项目</strong>可以通过AS创建flutter项目，创建后记得打开目录下的andriod目录才能构建运行在安卓机子上；或者打开根目录cmd输入<strong>flutter deviecs</strong>查看可运行的环境：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250803054051.png"></p><p>然后再flutter run -d (对于id)就可以运行了，支持<strong>热更新</strong>，按下<strong>shift+R</strong>就可以</p><p>编写页面的事就交给ai了~</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>langchain4j自用学习笔记</title>
      <link href="/2025/07/31/langchain4j%E8%87%AA%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/07/31/langchain4j%E8%87%AA%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>参考鱼皮老师教学视频</p><h2 id="基本依赖"><a href="#基本依赖" class="headerlink" title="基本依赖"></a>基本依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-community-dashscope-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0-beta7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0-beta7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-easy-rag<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0-beta7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--网页爬取--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-mcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0-beta7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Service类"><a href="#Service类" class="headerlink" title="Service类"></a>Service类</h2><p>在resources下添加system-prompt.txt文件，里面填写角色预设</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AiCodeHelperService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SystemMessage(fromResource = &quot;system-prompt.txt&quot;)</span></span><br><span class="line">    String <span class="title function_">chat</span><span class="params">(<span class="meta">@UserMessage</span> String message, <span class="meta">@MemoryId</span> String chatId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SystemMessage(fromResource = &quot;system-prompt.txt&quot;)</span></span><br><span class="line">    Report <span class="title function_">report</span><span class="params">(<span class="meta">@UserMessage</span> String message, <span class="meta">@MemoryId</span> String chatId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">record</span> <span class="title class_">Report</span><span class="params">(String name, List&lt;String&gt; suggestionList)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SystemMessage(fromResource = &quot;system-prompt.txt&quot;)</span></span><br><span class="line">    Flux&lt;String&gt; <span class="title function_">chatStream</span><span class="params">(<span class="meta">@UserMessage</span> String message, <span class="meta">@MemoryId</span> String chatId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Config类"><a href="#Config类" class="headerlink" title="Config类"></a>Config类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AiCodeHelperServiceFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ChatModel qwenChatModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ContentRetriever contentRetriever;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AiCodeHelperService <span class="title function_">aiCodeHelperService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ChatMemory</span> <span class="variable">chatMemory</span> <span class="operator">=</span> MessageWindowChatMemory.withMaxMessages(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//ai service</span></span><br><span class="line">        <span class="type">AiCodeHelperService</span> <span class="variable">aiCodeHelperService</span> <span class="operator">=</span> AiServices.builder(AiCodeHelperService.class)</span><br><span class="line">                .chatMemory(chatMemory)</span><br><span class="line">                .chatModel(qwenChatModel)</span><br><span class="line">                .tools(<span class="keyword">new</span> <span class="title class_">InterviewQuestionTool</span>())</span><br><span class="line">                .contentRetriever(contentRetriever)</span><br><span class="line">                .chatMemoryProvider(chatId -&gt; MessageWindowChatMemory.withMaxMessages(<span class="number">10</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> aiCodeHelperService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rag知识库"><a href="#Rag知识库" class="headerlink" title="Rag知识库"></a>Rag知识库</h2><p>在resources创建docs文件夹，里面放知识库文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AiConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ChatModel qwenChatModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ContentRetriever contentRetriever;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StreamingChatModel streamingChatModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AiCodeHelperService <span class="title function_">aiCodeHelperService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ChatMemory</span> <span class="variable">chatMemory</span> <span class="operator">=</span> MessageWindowChatMemory.withMaxMessages(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//ai service</span></span><br><span class="line">        <span class="type">AiCodeHelperService</span> <span class="variable">aiCodeHelperService</span> <span class="operator">=</span> AiServices.builder(AiCodeHelperService.class)</span><br><span class="line">                .chatMemory(chatMemory)</span><br><span class="line">                .chatModel(qwenChatModel)</span><br><span class="line">                .streamingChatModel(streamingChatModel)</span><br><span class="line">                .contentRetriever(contentRetriever)</span><br><span class="line">                .chatMemoryProvider(chatId -&gt; MessageWindowChatMemory.withMaxMessages(<span class="number">10</span>))</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> aiCodeHelperService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Tools-调用实例"><a href="#Tools-调用实例" class="headerlink" title="Tools 调用实例"></a>Tools 调用实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterviewQuestionTool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从面试鸭网站获取关键词相关的面试题列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyword 搜索关键词（如&quot;redis&quot;、&quot;java多线程&quot;）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 面试题列表，若失败则返回错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Tool(name = &quot;interviewQuestionSearch&quot;, value = &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">                Retrieves relevant interview questions from mianshiya.com based on a keyword.</span></span><br><span class="line"><span class="meta">                Use this tool when the user asks for interview questions about specific technologies,</span></span><br><span class="line"><span class="meta">                programming concepts, or job-related topics. The input should be a clear search term.</span></span><br><span class="line"><span class="meta">                &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">searchInterviewQuestions</span><span class="params">(<span class="meta">@P(value = &quot;the keyword to search&quot;)</span> String keyword)</span> &#123;</span><br><span class="line">        List&lt;String&gt; questions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 构建搜索URL（编码关键词以支持中文）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedKeyword</span> <span class="operator">=</span> URLEncoder.encode(keyword, StandardCharsets.UTF_8);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://www.mianshiya.com/search/all?searchText=&quot;</span> + encodedKeyword;</span><br><span class="line">        <span class="comment">// 发送请求并解析页面</span></span><br><span class="line">        Document doc;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doc = Jsoup.connect(url)</span><br><span class="line">                    .userAgent(<span class="string">&quot;Mozilla/5.0&quot;</span>)</span><br><span class="line">                    .timeout(<span class="number">5000</span>)</span><br><span class="line">                    .get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;get web error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 提取面试题</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">questionElements</span> <span class="operator">=</span> doc.select(<span class="string">&quot;.ant-table-cell &gt; a&quot;</span>);</span><br><span class="line">        questionElements.forEach(el -&gt; questions.add(el.text().trim()));</span><br><span class="line">        <span class="keyword">return</span> String.join(<span class="string">&quot;\n&quot;</span>, questions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置yml"><a href="#配置yml" class="headerlink" title="配置yml:"></a>配置yml:</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">langchain4j:</span></span><br><span class="line">  <span class="attr">community:</span></span><br><span class="line">    <span class="attr">dashscope:</span></span><br><span class="line">      <span class="attr">chat-model:</span></span><br><span class="line">        <span class="attr">model-name:</span> <span class="string">qwen-max</span></span><br><span class="line">        <span class="attr">api-key:</span> <span class="string">sk-xxxxx</span></span><br><span class="line">      <span class="attr">embedding-model:</span></span><br><span class="line">        <span class="attr">model-name:</span> <span class="string">text-embedding-v4</span></span><br><span class="line">        <span class="attr">api-key:</span> <span class="string">sk-xxxxx</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> langchain4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Ai 1.0学习笔记</title>
      <link href="/2025/07/30/Spring-Ai-1-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/07/30/Spring-Ai-1-0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>看的黑马的SpringAi教学视频，他用的是1.0.0-m6版本，很多东西都变了，但那又是个测试版，而正式版的1.0.0又有很多不同，所以自己跑官网来看看文档：<a href="https://spring-ai.spring-doc.cn/docs/1.0.0/api_chat-memory.html">聊天记忆 (Chat Memory) | Spring AI1.0.0中文文档|Spring官方文档|SpringBoot 教程|Spring中文网</a></p><h3 id="内存记忆存储"><a href="#内存记忆存储" class="headerlink" title="内存记忆存储"></a>内存记忆存储</h3><p><strong>首先第一个变化就是记忆对话</strong>，先上代码：</p><p>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AiConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatMemoryRepository <span class="title function_">chatMemoryRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InMemoryChatMemoryRepository</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatMemory <span class="title function_">chatMemory</span><span class="params">(ChatMemoryRepository chatMemoryRepository)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MessageWindowChatMemory.builder()</span><br><span class="line">                .chatMemoryRepository(chatMemoryRepository)</span><br><span class="line">                .maxMessages(<span class="number">15</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ChatClient <span class="title function_">aiService</span><span class="params">(DeepSeekChatModel model,ChatMemory chatMemory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ChatClient.builder(model)</span><br><span class="line">                .defaultSystem(<span class="string">&quot;你叫何平安，是一个高冷酷酷的IT高手&quot;</span>)</span><br><span class="line">                .defaultAdvisors(MessageChatMemoryAdvisor.builder(chatMemory).build())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/chat&quot;,produces = &quot;text/html; charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">chat</span><span class="params">(String message,String chatId)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chatClient.prompt()</span><br><span class="line">                .user(message)</span><br><span class="line">                .advisors(advisorSpec -&gt; advisorSpec.param(CONVERSATION_ID, chatId))</span><br><span class="line">                .stream()</span><br><span class="line">                .content();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这种是将对话数据存在内存的</p><p>区别下<strong>1.0.0-m6</strong>的写法：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250730040230.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250730040205.png"></p><p>反正我用了1.0.0-m6后使用advisor会报错:”Handler dispatch failed: java.lang.NoSuchMethodError: ‘reactor.core.publisher.Flux org.springframework.ai.chat.model.MessageAggregator.aggregateAdvisedResponse(reactor.core.publisher.Flux, java.util.function.Consumer)’”所以我就用1.0.0版本了</p><h3 id="数据库记忆存储"><a href="#数据库记忆存储" class="headerlink" title="数据库记忆存储"></a>数据库记忆存储</h3><p>首先引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-starter-model-chat-memory-repository-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>支持的数据库：</p><ul><li>PostgreSQL 数据库</li><li>MySQL &#x2F; MariaDB</li><li>SQL 服务器</li><li>HSQLDB 数据库</li></ul><p>修改刚刚的配置文件（把ChatMemoryRepository改成JdbcChatMemoryRepository就行）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> ChatMemory <span class="title function_">chatMemory</span><span class="params">(JdbcChatMemoryRepository chatMemoryRepository)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> MessageWindowChatMemory.builder()</span><br><span class="line">               .chatMemoryRepository(chatMemoryRepository)</span><br><span class="line">               .maxMessages(<span class="number">15</span>)</span><br><span class="line">               .build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>使用 JDBC URL 时，可以从 JDBC URL 中<strong>自动检测正确的方言</strong><code>JdbcChatMemoryRepositoryDialect.from(DataSource)</code>.您可以通过实现<code>JdbcChatMemoryRepositoryDialect</code>接口，即spring.datasource.url</p><p>使用数据库存储记忆后会自动进行初始化创建一张表，官网话说就是<strong>Schema 初始化</strong>会自动配置将自动创建<code>SPRING_AI_CHAT_MEMORY</code>表，使用特定于提供商的数据库 SQL 脚本。默认情况下，架构初始化仅针对嵌入式数据库（H2、HSQL、Derby 等）运行</p><p>您可以使用<code>spring.ai.chat.memory.repository.jdbc.initialize-schema</code>财产：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.ai.chat.memory.repository.jdbc.initialize-schema</span>=<span class="string">embedded # 仅适用于嵌入式数据库（默认）</span></span><br><span class="line"><span class="attr">spring.ai.chat.memory.repository.jdbc.initialize-schema</span>=<span class="string">always   # 总是初始化</span></span><br><span class="line"><span class="attr">spring.ai.chat.memory.repository.jdbc.initialize-schema</span>=<span class="string">never    # #不要初始化（对Flyway/ liquebase有用）</span></span><br></pre></td></tr></table></figure><p><strong>目前最佳实践是将initialize-schema设置为never，并设置platform为你的数据库语言像这样：</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/h?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">ai:</span></span><br><span class="line">    <span class="attr">chat:</span></span><br><span class="line">      <span class="attr">memory:</span></span><br><span class="line">        <span class="attr">repository:</span></span><br><span class="line">          <span class="attr">jdbc:</span></span><br><span class="line">            <span class="attr">platform:</span> <span class="string">mysql</span></span><br><span class="line">            <span class="attr">initialize-schema:</span> <span class="string">never</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再手动创建数据库表，参考mysql.sql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- schema-mysql.sql</span><br><span class="line">CREATE TABLE IF NOT EXISTS SPRING_AI_CHAT_MEMORY (</span><br><span class="line">    conversation_id VARCHAR(36) NOT NULL,</span><br><span class="line">    content TEXT NOT NULL,</span><br><span class="line">    type VARCHAR(10) NOT NULL,</span><br><span class="line">    `timestamp` TIMESTAMP NOT NULL,</span><br><span class="line">    CONSTRAINT TYPE_CHECK CHECK (type IN (&#x27;USER&#x27;, &#x27;ASSISTANT&#x27;, &#x27;SYSTEM&#x27;, &#x27;TOOL&#x27;))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE INDEX SPRING_AI_CHAT_MEMORY_CONVERSATION_ID_TIMESTAMP_IDX</span><br><span class="line">ON SPRING_AI_CHAT_MEMORY(conversation_id, `timestamp`);</span><br></pre></td></tr></table></figure><p><strong>扩展方言</strong></p><p>要添加对新数据库的支持，请实现<code>JdbcChatMemoryRepositoryDialect</code>接口，并提供用于选择、插入和删除消息的 SQL。然后，您可以将自定义 dialect 传递给存储库构建器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ChatMemoryRepository</span> <span class="variable">chatMemoryRepository</span> <span class="operator">=</span> JdbcChatMemoryRepository.builder()</span><br><span class="line">    .jdbcTemplate(jdbcTemplate)</span><br><span class="line">    .dialect(<span class="keyword">new</span> <span class="title class_">MyCustomDbDialect</span>())</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>还有两种存储方式：CassandraChatMemoryRepository和Neo4jChatMemoryRepository可以去官网看看，这里就不介绍了，新手不怎么用；</p><h3 id="检索增强生成-Rag"><a href="#检索增强生成-Rag" class="headerlink" title="检索增强生成(Rag)"></a>检索增强生成(Rag)</h3><p>首先先引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.ai<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-ai-advisors-vector-store<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一堆报错，去学langchain4j去了，我一个半小时就学完了…..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> VectorStore <span class="title function_">vectorStore</span><span class="params">(EmbeddingModel embeddingModel)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SimpleVectorStore.builder(embeddingModel).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES学习笔记</title>
      <link href="/2025/07/21/IT%E7%AC%94%E8%AE%B0/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/07/21/IT%E7%AC%94%E8%AE%B0/ES%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h2><h3 id="安装es和kibana"><a href="#安装es和kibana" class="headerlink" title="安装es和kibana"></a>安装es和kibana</h3><p>首先下载es.tar和kibana.tar包导入进去然后再加载镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker laod -i es.tar</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i kibana.tar</span><br></pre></td></tr></table></figure><p>然后创建它们的网络，将他们关联在一起：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><p>然后再分别运行es 和 kibana:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name es -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> -e <span class="string">&quot;discovery.type=single-node&quot;</span> -v es-data:/usr/share/elasticsearch/data -v es-plugins:/usr/share/elasticsearch/plugins --privileged --network es-net -p 9200:9200 -p 9300:9300 elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kibana -e ELASTICSEARCH_HOSTS=http://es:9200 --network=es-net -p 5601:5601 kibana:7.12.1</span><br></pre></td></tr></table></figure><p>然后再进入5601端口，进去后点击不添加数据，进入dev tools可以进行测试</p><h3 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h3><p>首先找到上传文件的位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><p>然后再上传ik文件夹，上传后再重启docker restart es,接着就可以去测试分词器了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;: &quot;我的名字叫何平安，我爱java&quot;,</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smark&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现<strong>500</strong>错误，不要直接用黑马的那个ik文件夹，吧压缩包解压用自己的</p><p>查看日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f es</span><br></pre></td></tr></table></figure><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725023717.png"></p><p>按照图片里的做法就是加个ext.dic文件，在里面编写你的词语，记得用UTF-8编码</p><h3 id="索引库"><a href="#索引库" class="headerlink" title="索引库"></a>索引库</h3><p>与mysql的对比：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725035901.png"></p><p><strong>type类型</strong></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725033544.png"></p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725033952.png" style="zoom:50%;" /><p>例如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /user</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;fistName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">,</span> <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>添加好后就可以 GET &#x2F;索引库名称查询出来或者Delete删除</p><p>修改是有一些区别的：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725034754.png"></p><h3 id="文档Crud"><a href="#文档Crud" class="headerlink" title="文档Crud"></a>文档Crud</h3><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725035034.png" style="zoom:80%;" /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /user/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1973016127@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浩原科技创始人何平安&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;何&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;平安&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>获取信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /user/_doc/1</span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /user/_doc/1</span><br></pre></td></tr></table></figure><p><strong>修改</strong>：</p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725040525.png" style="zoom:67%;" /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /user/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1973016127@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浩原科技创始人是何平安&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;何&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;平安&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725040735.png" style="zoom: 67%;" /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /user/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1641436566@qq.com&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250725040957.png"></p><h2 id="JavaRestClient"><a href="#JavaRestClient" class="headerlink" title="JavaRestClient"></a>JavaRestClient</h2><p>准备白雪！！其实也没白雪，就像你学mybatis-plus之前就要先学mybatis和mysql语句~</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王的故事(大三下)</title>
      <link href="/2025/07/21/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E7%8E%8B%E7%9A%84%E6%95%85%E4%BA%8B-%E5%A4%A7%E4%B8%89%E4%B8%8B/"/>
      <url>/2025/07/21/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E7%8E%8B%E7%9A%84%E6%95%85%E4%BA%8B-%E5%A4%A7%E4%B8%89%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>王又来写故事了，这次坐高铁回来了；这学期算是真正开始实战的一学期，往年都是学知识技能或者找工作兼职的路上，这学期3月份我开始和朋友在闲鱼上接单，虽然价格非常的黑奴但是一开始接的都比较低，第一个单子总共用了1周多搞完才拿到100多元，因为是第一次多人合作开发项目所以效率低是正常的，加上本来内容就多还要文档什么的；但后面来就渐渐好起来了，接了个800，2000的（虽然但是也不是很好尤其是那个2000的单贼麻烦，纯牛马）后面我把我做的每一单剪成视频分享到b站，一开始只是随便剪剪发出去结果还有蛮多人看的，我就继续发下去，现在粉丝也涨到4000多了，很多单子也是b站来的。后面我发现单子越来越多做不完了，我就打算以我个人名义开个接单群，并创建了浩原科技工作室，其实就是方便我我更好的营业和注册东西。到现在我的接单群有60余人，总接取单子数目20单，总营业额1.5w左右，虽然数字不大，但对我来说也是将就的了。后面5月份我一个人又接了个大单子，总共3w+元，也是第一次接这么大个单子对我来说也是种考验，不过还是做下来了而且效果不错。在边上学的情况下每个月平均下来6k+的米，这学期的生活费也没找家里人要了，家里人也是对我的进步非常肯定支持，还打了堆比赛拿了些奖。我这学期下来赚的有4w多吧，但是天天接单感觉还是好牛马啊，而且最近单子数也少了做不起来了，暑假打算看看能不能重新做起来或者往Agent方向发展，前景不好啊还是得继续努力，这个不能吃一辈子的饭。</p><p>（感觉还是要多学点儿技术，把自己先练起来…）</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/f594668b6f2fec5b85a349122aa73a4f.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 王的故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.20解决cursor国区使用限制</title>
      <link href="/2025/07/20/7-20%E8%A7%A3%E5%86%B3cursor%E5%9B%BD%E5%8C%BA%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6/"/>
      <url>/2025/07/20/7-20%E8%A7%A3%E5%86%B3cursor%E5%9B%BD%E5%8C%BA%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>shift+ctrl+p</p><p>搜索：Open user settings 带json那个 </p><p>“http.proxy”: “<a href="http://127.0.0.1:33210/">http://127.0.0.1:33210</a>“, </p><p>“http.proxyStrictSSL”: false, </p><p>“http.proxySupport”: “override”, </p><p>“http.noProxy”: [],</p><p>“cursor.general.disableHttp2”: true,</p><p><strong>其中端口需要自行替换成自己的代理端口，如我的clash就是7890</strong></p><p><strong>有时候会出现超时，多发送几次就行，记得代理地区不要选香港澳门这些国区~</strong></p><p>呜呜呜被美帝制裁了，国产ai编程工具发力火起来的好时机呀，Trea发力呀~</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250720001521.png"></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cursor </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序UGC类项目上线技巧|文本和媒体安全验证实现</title>
      <link href="/2025/06/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FUGC%E7%B1%BB%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%8A%80%E5%B7%A7-%E6%96%87%E6%9C%AC%E5%92%8C%E5%AA%92%E4%BD%93%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2025/06/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FUGC%E7%B1%BB%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%8A%80%E5%B7%A7-%E6%96%87%E6%9C%AC%E5%92%8C%E5%AA%92%E4%BD%93%E5%AE%89%E5%85%A8%E9%AA%8C%E8%AF%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>如果你的小程序审核时遇到这种情况，这篇帖子会完美解决你的问题</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250612225425.png"></p><p>一般UGC类小程序上线都会遇到这种情况，微信官方的运行攻略：<a href="https://developers.weixin.qq.com/community/develop/doc/0000e83e8a0b68b3c87962b265c009?highLine=UGC%E7%B1%BB%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%90%A5%E6%94%BB%E7%95%A5">微信开放社区</a>，说白了就是想推销微信的安全接口，你就算用了其它的安全接口也不让你过，哈哈哈哈被资本做局了吧~</p><p><strong>什么服务或功能的小程序是UGC小程序？</strong></p><p>小程序中的功能或服务中，涉及用户将自己自定义编辑的文字、图片、音频、视频等内容通过小程序进行展示或提供给其他用户的，属于UGC小程序。</p><h1 id="AccessToken获取"><a href="#AccessToken获取" class="headerlink" title="AccessToken获取"></a>AccessToken获取</h1><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/mp-access-token/getAccessToken.html">接口调用凭证 &#x2F; 获取接口调用凭据</a></p><p>先上Java代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> RedisUtils redisUtils;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取access_token</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getAccessToken</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/cgi-bin/token&quot;</span>;</span><br><span class="line">       <span class="type">String</span> <span class="variable">requestUrl</span> <span class="operator">=</span> UriComponentsBuilder.fromHttpUrl(url)</span><br><span class="line">               .queryParam(<span class="string">&quot;appid&quot;</span>, APP_ID)</span><br><span class="line">               .queryParam(<span class="string">&quot;secret&quot;</span>, APP_SECRET)</span><br><span class="line">               .queryParam(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;client_credential&quot;</span>)</span><br><span class="line">               .toUriString();</span><br><span class="line">       <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtil.createGet(requestUrl).execute();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 获取 session_key 和 openid</span></span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">parseObj</span> <span class="operator">=</span> JSONUtil.parseObj(response.body());</span><br><span class="line">       <span class="comment">//存入redis</span></span><br><span class="line">       redisUtils.setValue(<span class="string">&quot;access_token&quot;</span>, (String)parseObj.get(<span class="string">&quot;access_token&quot;</span>));</span><br><span class="line">       redisUtils.expire(<span class="string">&quot;access_token&quot;</span>, <span class="number">7200</span>);</span><br><span class="line">       <span class="keyword">return</span> (String)parseObj.get(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我这里获取到后存在了redis里，因为这个access_token有效期只有2小时，所以还加了个时间限制，2小时后自动消失。</p><p><strong>记得替换APP_ID和APP_SECRET</strong></p><p>RedisUtils工具类，可以用用挺好用的，或者用你自己的redis存储方式也行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cn.bdth.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.SessionCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  <span class="doctag">@github</span> dulaiduwang003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">getRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置指定键的过期时间（以秒为单位）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 过期时间，单位：秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定键的剩余生存时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 剩余生存时间（秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置指定键的过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit    时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查给定键是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 键是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对指定键的数字值进行增量操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 增量值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 增量操作后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">increment</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定的键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delKey</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.delete(key);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除指定的键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keys 键集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的键数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">delKeys</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.delete(keys);</span><br><span class="line">        <span class="keyword">return</span> ret == <span class="literal">null</span> ? <span class="number">0</span> : ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象存储到Redis中，使用指定的键</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象存储到Redis中，并设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 过期时间（秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValueTimeout</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据键获取对应的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查哈希表中是否存在指定的字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hkey 字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasHashKey</span><span class="params">(<span class="keyword">final</span> String key, String hkey)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.opsForHash().hasKey(key, hkey);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向哈希表中添加一个字段-值对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey  字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashPut</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向哈希表中批量添加字段-值对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 多个字段-值对</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashPutAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, Object&gt; values)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取哈希表中指定字段的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKey 字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字段对应的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hashGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取哈希表中所有的字段和值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 所有字段和值的映射表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hashGetAll</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取哈希表中多个字段的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys  多个字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 多个字段对应的值列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">hashMultiGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查哈希表中是否存在指定的字段（功能同 hasHashKey）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key      哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey  字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hashExists</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除哈希表中的一个或多个字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hKeys  多个字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被删除的字段数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">hashDeleteKeys</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除哈希表中的一个或多个字段（可变参数形式）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     哈希表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey 多个字段名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 被删除的字段数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hashDelete</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向集合中添加多个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  元素数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 添加成功的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从集合中移除指定的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  要移除的元素数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功移除的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setDel</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取集合中的所有成员</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 集合的所有成员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">getSetAll</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向有序集合中添加多个带分数的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  包含元素及其分数的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 添加成功的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetSetAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().add(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取有序集合中某个元素的分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 元素值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素对应的分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zsetSetGetSource</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对有序集合中的某个元素的分数进行增量操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key       有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value     元素值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> increment 分数增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新后的分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zsetIncrementScore</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value, <span class="keyword">final</span> Double increment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, increment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向有序集合中添加一个带分数的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  元素值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source  分数值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">zsetSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object values, <span class="keyword">final</span> Double source)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">add</span> <span class="operator">=</span> redisTemplate.opsForZSet().add(key, values, source);</span><br><span class="line">        <span class="keyword">return</span> add;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取有序集合中排名在指定范围内的元素及其分数（按分数由高到低排序）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 起始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素及其分数的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zsetReverseRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> Long start, <span class="keyword">final</span> Long end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取有序集合中排名在指定范围内的元素（按分数由高到低排序）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 起始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">zsetReverseRange</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Long start, <span class="keyword">final</span> Long end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原子性地增加指定键的值并返回新值（适用于计数器场景）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增后的新值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">selfIncrease</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                operations.multi();</span><br><span class="line">                <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> operations.opsForValue().increment(key);</span><br><span class="line">                operations.exec();</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原子性地增加有序集合中某个元素的分数并返回新分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 元素值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增后的新分数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">selfIncreaseSource</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Double <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                operations.multi();</span><br><span class="line">                <span class="type">Double</span> <span class="variable">count</span> <span class="operator">=</span> operations.opsForZSet().incrementScore(key, value, <span class="number">1</span>);</span><br><span class="line">                operations.exec();</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从有序集合中移除多个指定的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  要移除的元素集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功移除的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetDelAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从有序集合中移除指定的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     有序集合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  要移除的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功移除的元素数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetDel</span><span class="params">(<span class="keyword">final</span> String key, Object values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向列表尾部追加一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   列表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 元素值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表在添加元素后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPush</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查指定键是否存在（功能同 hasKey）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 键是否存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">doesItExist</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向列表尾部追加多个元素（集合形式）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     列表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  要追加的元素集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表在添加元素后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPushAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向列表尾部追加多个元素（可变参数形式）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     列表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values  要追加的元素数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表在添加元素后的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPushAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列表中指定范围的元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   列表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 起始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 指定范围的元素列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">listGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">int</span> start, <span class="keyword">final</span> <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取列表的长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 列表键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">keySize</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="文本安全内容识别"><a href="#文本安全内容识别" class="headerlink" title="文本安全内容识别"></a>文本安全内容识别</h1><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html">小程序安全 &#x2F; 内容安全 &#x2F; 文本内容安全识别</a></p><p>这里我用Java实现文本识别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本内容检测</span></span><br><span class="line"><span class="comment">     * Scene场景枚举值（1 资料；2 评论；3 论坛；4 社交日志）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">textCheck</span><span class="params">(String content,Integer scene,String openId)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/wxa/msg_sec_check&quot;</span>;</span><br><span class="line">        <span class="comment">//获取access_token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> (String) redisUtils.getValue(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (accessToken == <span class="literal">null</span>)&#123;</span><br><span class="line">            accessToken = getAccessToken();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestUrl</span> <span class="operator">=</span> UriComponentsBuilder.fromHttpUrl(url)</span><br><span class="line">                .queryParam(<span class="string">&quot;access_token&quot;</span>, accessToken)</span><br><span class="line">                .toUriString();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonBody</span> <span class="operator">=</span> JSONUtil.createObj()</span><br><span class="line">                .put(<span class="string">&quot;content&quot;</span>, content)</span><br><span class="line">                .put(<span class="string">&quot;version&quot;</span>, <span class="number">2</span>)</span><br><span class="line">                .put(<span class="string">&quot;scene&quot;</span>, scene)</span><br><span class="line">                .put(<span class="string">&quot;openid&quot;</span>, openId)</span><br><span class="line">                .toString();</span><br><span class="line">                </span><br><span class="line">        <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtil.createPost(requestUrl)</span><br><span class="line">                .body(jsonBody)</span><br><span class="line">                .execute();</span><br><span class="line">                </span><br><span class="line">        <span class="comment">// 获取响应内容并解析</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">parseObj</span> <span class="operator">=</span> JSONUtil.parseObj(response.body());</span><br><span class="line">        <span class="type">String</span> <span class="variable">errmsg</span> <span class="operator">=</span> (String) parseObj.get(<span class="string">&quot;errmsg&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;ok&quot;</span>.equals(errmsg))&#123;</span><br><span class="line">            <span class="keyword">return</span> errmsg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">JSONObject</span>  <span class="variable">result</span> <span class="operator">=</span> JSONUtil.parseObj(parseObj.get(<span class="string">&quot;result&quot;</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">label</span> <span class="operator">=</span> ((Number) result.get(<span class="string">&quot;label&quot;</span>)).intValue();</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(label);</span><br><span class="line">        <span class="comment">//命中标签枚举值，100 正常；10001 广告；20001 时政；20002 色情；20003 辱骂；20006 违法犯罪；20008 欺诈；20012 低俗；20013 版权；21000 其他</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>需要传入content要识别的文本内容，openId，scene应用场景，我会返回label值</p><p>参考错误码：</p><table><thead><tr><th align="left">错误码</th><th align="left">错误码取值</th><th align="left">解决方案</th></tr></thead><tbody><tr><td align="left">-1</td><td align="left">system error</td><td align="left">系统繁忙，此时请开发者稍候再试</td></tr><tr><td align="left">40001</td><td align="left">invalid credential access_token isinvalid or not latest</td><td align="left">access_token 无效或不为最新获取的 access_token，请开发者确认access_token的有效性</td></tr><tr><td align="left">40003</td><td align="left">invalid openid</td><td align="left">不合法的 OpenID ，请开发者确认 OpenID 的有效性</td></tr><tr><td align="left">40129</td><td align="left">invalid scene</td><td align="left">场景值错误（目前支持场景 1 资料；2 评论；3 论坛；4 社交日志）</td></tr><tr><td align="left">43104</td><td align="left">The openid does not match the appid</td><td align="left">appid与 openid 不匹配</td></tr><tr><td align="left">43002</td><td align="left">require POST method</td><td align="left">方法调用错误，请用 post 方法调用</td></tr><tr><td align="left">44002</td><td align="left">empty post data</td><td align="left">POST 的数据包为空。post请求body参数不能为空。</td></tr><tr><td align="left">44991</td><td align="left">reach max api minute frequence</td><td align="left">超出接口每分钟调用限制</td></tr><tr><td align="left">45009</td><td align="left">reach max api daily quota limit</td><td align="left">超出接口每日调用限制</td></tr><tr><td align="left">47001</td><td align="left">data format error</td><td align="left">解析 JSON&#x2F;XML 内容错误;post 数据中参数缺失;检查修正后重试。</td></tr><tr><td align="left">61010</td><td align="left">code is expired</td><td align="left">用户访问记录超时（用户未在近两小时访问小程序）</td></tr></tbody></table><h1 id="多媒体安全内容识别"><a href="#多媒体安全内容识别" class="headerlink" title="多媒体安全内容识别"></a>多媒体安全内容识别</h1><p>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/mediaCheckAsync.html">小程序安全 &#x2F; 内容安全 &#x2F; 多媒体内容安全识别</a></p><h2 id="消息推送"><a href="#消息推送" class="headerlink" title="消息推送"></a>消息推送</h2><p>这个就比较麻烦了，首先要去微信公众平台申请消息推送：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250612232137.png"></p><p>填写信息：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250612232233.png"></p><p>然后在里服务器编写接收信息的接口，接收的地址要跟你写的url一样</p><p>其中，signature签名的生成方式是：</p><ol><li>将Token、timestamp、nonce三个参数进行字典序排序。</li><li>将三个参数字符串拼接成一个字符串进行sha1计算签名，即可获得signature。 开发者需要校验signature是否正确，以判断请求是否来自微信服务器，验签通过后，请原样返回echostr字符串。</li></ol><p>举例：假设填写的URL&#x3D;”<a href="https://www.qq.com/revice%22%EF%BC%8C">https://www.qq.com/revice&quot;，</a> Token&#x3D;”AAAAA”。</p><ol><li>推送的URL链接：<a href="https://www.qq.com/revice?signature=f464b24fc39322e44b38aa78f5edd27bd1441696&echostr=4375120948345356249&timestamp=1714036504&nonce=1514711492">https://www.qq.com/revice?signature=f464b24fc39322e44b38aa78f5edd27bd1441696&amp;echostr=4375120948345356249&amp;timestamp=1714036504&amp;nonce=1514711492</a></li><li>将token、timestamp、nonce三个参数进行字典序排序，排序后结果为:[“1514711492”,”1714036504”,”AAAAA”]。</li><li>将三个参数字符串拼接成一个字符串：”15147114921714036504AAAAA”</li><li>进行sha1计算签名：f464b24fc39322e44b38aa78f5edd27bd1441696</li><li>与URL链接中的signature参数进行对比，相等说明请求来自微信服务器，合法。</li><li>构造回包返回微信，回包消息体内容为URL链接中的echostr参数4375120948345356249。</li></ol><p><strong>验证接口代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/wx/revice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">revice</span><span class="params">(<span class="meta">@RequestParam</span> String signature,<span class="meta">@RequestParam</span> String timestamp,<span class="meta">@RequestParam</span> String nonce,<span class="meta">@RequestParam</span> String echostr)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> nonce + timestamp + <span class="string">&quot;hepingan&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">sha1Signature</span> <span class="operator">=</span> sha1(res);</span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(sha1Signature, signature))&#123;</span><br><span class="line">        <span class="keyword">return</span> echostr;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">return</span> echostr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里我设置了无论对错的返回了echostr，方便验证，验证完后就改回来；</strong></p><p>这里我就成功开启了消息推送</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250613192432.png"></p><h2 id="消息接收"><a href="#消息接收" class="headerlink" title="消息接收"></a>消息接收</h2><p><strong>安全模式太复杂了，这里先用明文模式开发</strong></p><p>先写个接收数据Dto类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReviceDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String ToUserName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String FromUserName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String CreateTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String MsgType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String Event;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String debug_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String trace_id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Result result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Detail detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Result</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String suggest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Detail</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String strategy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer errcode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String suggest;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer label;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Integer prob;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/wx/revice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">revice</span><span class="params">(<span class="meta">@RequestParam</span> String signature, <span class="meta">@RequestParam</span> String timestamp, <span class="meta">@RequestParam</span> String nonce, <span class="meta">@RequestParam</span> String echostr, <span class="meta">@RequestBody</span> ReviceSafeDto reviceDto)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="string">&quot;hepingan&quot;</span>;</span><br><span class="line">    <span class="comment">//验证成功</span></span><br><span class="line">    <span class="comment">//字典排序</span></span><br><span class="line">    Dictionary&lt;String, String&gt; dictionary = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">    dictionary.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">    dictionary.put(<span class="string">&quot;timestamp&quot;</span>, timestamp);</span><br><span class="line">    dictionary.put(<span class="string">&quot;nonce&quot;</span>, nonce);</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sortedParams</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    dictionary.keys().asIterator().forEachRemaining(key -&gt; sortedParams.append(key).append(dictionary.get(key)));</span><br><span class="line">    <span class="type">String</span> <span class="variable">combinedString</span> <span class="operator">=</span> sortedParams.toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">sha1Combined</span> <span class="operator">=</span> sha1(combinedString);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(sha1Combined, signature)) &#123;</span><br><span class="line">        <span class="comment">//验证成功逻辑处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//验证失败逻辑处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片内容检测：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片内容检测</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> imgUrl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> scene</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> openId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">mediaCheck</span><span class="params">(String imgUrl,Integer scene,String openId)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/wxa/msg_sec_check&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> (String) redisUtils.getValue(<span class="string">&quot;access_token&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (accessToken == <span class="literal">null</span>)&#123;</span><br><span class="line">        accessToken = getAccessToken();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">requestUrl</span> <span class="operator">=</span> UriComponentsBuilder.fromHttpUrl(url)</span><br><span class="line">            .queryParam(<span class="string">&quot;access_token&quot;</span>, accessToken)</span><br><span class="line">            .toUriString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonBody</span> <span class="operator">=</span> JSONUtil.createObj()</span><br><span class="line">            .put(<span class="string">&quot;media_url&quot;</span>, imgUrl)</span><br><span class="line">            .put(<span class="string">&quot;media_type&quot;</span>, <span class="number">2</span>)</span><br><span class="line">            .put(<span class="string">&quot;version&quot;</span>, <span class="number">2</span>)</span><br><span class="line">            .put(<span class="string">&quot;scene&quot;</span>, scene)</span><br><span class="line">            .put(<span class="string">&quot;openid&quot;</span>, openId)</span><br><span class="line">            .toString();</span><br><span class="line">    <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtil.createPost(requestUrl)</span><br><span class="line">            .body(jsonBody)</span><br><span class="line">            .execute();</span><br><span class="line"></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">parseObj</span> <span class="operator">=</span> JSONUtil.parseObj(response.body());</span><br><span class="line">    <span class="type">String</span> <span class="variable">errmsg</span> <span class="operator">=</span> (String) parseObj.get(<span class="string">&quot;errmsg&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;ok&quot;</span>.equals(errmsg))&#123;</span><br><span class="line">        <span class="comment">//返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> errmsg;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//返回trace_id</span></span><br><span class="line">        <span class="keyword">return</span> (String) parseObj.get(<span class="string">&quot;trace_id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>安全模式解密代码参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解密消息体&quot;Encrypt&quot;密文</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encodingAesKey</span> <span class="operator">=</span> <span class="string">&quot;your_encoding_aes_key_here&quot;</span>; <span class="comment">// 请替换为实际的EncodingAESKey</span></span><br><span class="line">                <span class="type">byte</span>[] aesKey = Base64.getDecoder().decode(encodingAesKey + <span class="string">&quot;=&quot;</span>); <span class="comment">// 生成32字节的AESKey</span></span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">encryptMsg</span> <span class="operator">=</span> reviceDto.getEncrypt(); <span class="comment">// 获取加密的消息密文</span></span><br><span class="line">                <span class="type">byte</span>[] tmpMsg = Base64.getDecoder().decode(encryptMsg); <span class="comment">// Base64解码得到TmpMsg</span></span><br><span class="line"><span class="comment">// 使用AES密钥进行解密操作（示例中使用JDK实现，实际可能需要根据加密方式调整）</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    javax.crypto.<span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> javax.crypto.Cipher.getInstance(<span class="string">&quot;AES/CBC/PKCS5Padding&quot;</span>);</span><br><span class="line">    <span class="type">SecretKeySpec</span> <span class="variable">keySpec</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(aesKey, <span class="string">&quot;AES&quot;</span>);</span><br><span class="line">    cipher.init(javax.crypto.Cipher.DECRYPT_MODE, keySpec, <span class="keyword">new</span> <span class="title class_">IvParameterSpec</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">16</span>])); <span class="comment">// 初始化向量IV全0或其他指定值</span></span><br><span class="line">    <span class="type">byte</span>[] decrypted = cipher.doFinal(tmpMsg);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 去除前16字节IV偏移量（如果是CBC模式），并提取明文和填充内容</span></span><br><span class="line">    <span class="type">byte</span>[] contentBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[decrypted.length - <span class="number">16</span>];</span><br><span class="line">    System.arraycopy(decrypted, <span class="number">16</span>, contentBytes, <span class="number">0</span>, contentBytes.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取真实数据（去除PKCS7填充）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">padLength</span> <span class="operator">=</span> contentBytes[contentBytes.length - <span class="number">1</span>];</span><br><span class="line">    <span class="type">byte</span>[] realContent = <span class="keyword">new</span> <span class="title class_">byte</span>[contentBytes.length - padLength];</span><br><span class="line">    System.arraycopy(contentBytes, <span class="number">0</span>, realContent, <span class="number">0</span>, realContent.length);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(realContent, java.nio.charset.StandardCharsets.UTF_8); <span class="comment">// 转换为字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> plainText; <span class="comment">// 返回解密后的明文</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">&quot;解密失败: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
            <tag> 上线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序微信登录实现和注意事项</title>
      <link href="/2025/05/13/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2025/05/13/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<p>微信登录的官方api：<a href="https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/user-login/code2Session.html">小程序登录 &#x2F; 小程序登录</a></p><p>现在如果使用的是2.17以上的基础库是无法获取用户头像，昵称和手机等信息，需要先获取openid，不过好像2.1以下版本的库也不行，所以还是用openid登录吧</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250513190036.png"></p><p>什么是openID？openID是微信用户的唯一标识（跟微信号很像），利用这一点就可以用它来注册或登录。</p><p><strong>直接先上前端代码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接处理微信登录</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleWxLoginDirectly</span>= (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">uni.<span class="title function_">login</span>(&#123;</span><br><span class="line"><span class="attr">provider</span>: <span class="string">&#x27;weixin&#x27;</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">code</span>)</span><br><span class="line">uni.<span class="title function_">request</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/user/wx-login`</span>,</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: res.<span class="property">code</span>,</span><br><span class="line"><span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> === <span class="number">200</span>)&#123;</span><br><span class="line">uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;sa-token&#x27;</span>, res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">tokenValue</span>)</span><br><span class="line">uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line"><span class="attr">icon</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;/pages/index/index&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;, <span class="number">1500</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: res.<span class="property">data</span>.<span class="property">msg</span> || <span class="string">&#x27;登录失败&#x27;</span>,</span><br><span class="line"><span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">fail</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;网络错误&#x27;</span>,</span><br><span class="line"><span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">isLoading.<span class="property">value</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>baseUrl为你的后端地址</li><li>具体返回的res需要自己处理</li><li>uni.setStorageSync为存储token在本地</li><li>登录好后会跳转到&#x2F;pages&#x2F;index&#x2F;index</li></ul><p>uni.login()官方文档：<a href="https://uniapp.dcloud.net.cn/api/plugins/login.html#login">uni.login(OBJECT) | uni-app官网</a></p><p><strong>后端获取openID的类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatUtil</span> &#123;</span><br><span class="line"><span class="comment">//配置自己的app_id、app_secret</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_ID</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">APP_SECRET</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOpenId</span><span class="params">(String loginCode)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.weixin.qq.com/sns/jscode2session&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestUrl</span> <span class="operator">=</span> UriComponentsBuilder.fromHttpUrl(url)</span><br><span class="line">                .queryParam(<span class="string">&quot;appid&quot;</span>, APP_ID)</span><br><span class="line">                .queryParam(<span class="string">&quot;secret&quot;</span>, APP_SECRET)</span><br><span class="line">                .queryParam(<span class="string">&quot;js_code&quot;</span>, loginCode)</span><br><span class="line">                .queryParam(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>)</span><br><span class="line">                .toUriString();</span><br><span class="line"> </span><br><span class="line">        <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtil.createGet(requestUrl).execute();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取 session_key 和 openid</span></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">parseObj</span> <span class="operator">=</span> JSONUtil.parseObj(response.body());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">openid</span> <span class="operator">=</span> (String) parseObj.get(<span class="string">&quot;openid&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> openid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先填写自己的APP_ID和APP_SECRET</li></ul><p><strong>接收微信登录的接口：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信小程序登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 登录结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/wx-login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">wxLogin</span><span class="params">(<span class="meta">@RequestBody</span> String code)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">openId</span> <span class="operator">=</span> WechatUtil.getOpenId(code);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;User&gt;().lambda().eq(User::getOpenId, openId));</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setOpenId(openId);</span><br><span class="line">            user.setUsername(<span class="string">&quot;wx_&quot;</span>+openId.substring(<span class="number">0</span>, <span class="number">15</span>));</span><br><span class="line">            user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">            user.setAvatar(<span class="string">&quot;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif&quot;</span>);</span><br><span class="line">            user.setCreatedTime(LocalDateTime.now());</span><br><span class="line">            userMapper.insert(user);</span><br><span class="line">            StpUtil.login(user.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.data(StpUtil.getTokenInfo());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            StpUtil.login(user.getId());</span><br><span class="line">            <span class="keyword">return</span> Result.data(StpUtil.getTokenInfo());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>主要看前面部分后面就是处理逻辑了，通过前端传过来的<strong>code</strong>（这个code是什么？登录凭证校验。通过 wx.login 接口获得临时登录凭证 code 后传到开发者服务器调用此接口完成登录流程。更多使用方法详见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">小程序登录。</a>）来获取openID，然后判断数据库里有无这个openId来判断是使用注册还是登录。</p><p>注意自己的wxappid，微信开发者工具要和Java里设置的一样哦</p><h2 id="部分问题"><a href="#部分问题" class="headerlink" title="部分问题"></a>部分问题</h2><ul><li><strong>40029</strong></li></ul><p>微信小程序返回40029的情况原因有很多，遇到后大概总结了几个已知的</p><p>1.小程序里传到后台的code被微信的调用接口使用了两次（只能使用一次）</p><p>2.appid、AppSecret的值不对（这个自己复制感觉一般不会错）</p><p>3.自己遇到的最难受的原因:创建项目的appid跟你请求url里的appid、AppSecret不是同一组</p><p>起因：刚开始学习的时候，自己注册了一个小程序账号，第一个项目用的这个appid。在真正开始做项目的时候，新建小程序用的测试appid，然后请求openid的时候忘了，用了自己申请的appid、AppSecret，结果就是浪费一下午调试。如果要用测试账号的AppSecret，可以在开发工具里 ‘测试号’—‘申请地址里找到’。</p><ul><li><strong>41002</strong></li></ul><p>{errcode: 41002, errmsg: “appid missing rid: xxxxxxxxxxx”} 错用成post请求</p><ul><li><strong>41004</strong></li></ul><p>{errcode: 41004, errmsg: “appsecret missing, rid: xxxxxxxxxxx”} 请求时键名错了,应为 secret</p><ul><li><strong>41008</strong></li></ul><p>{errcode: 41008, errmsg: “missing code, req_id: xxxxxx “} 请求时键名错了,应为 js_code</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b站批量取消关注脚本</title>
      <link href="/2025/03/12/b%E7%AB%99%E6%89%B9%E9%87%8F%E5%8F%96%E6%B6%88%E5%85%B3%E6%B3%A8%E8%84%9A%E6%9C%AC/"/>
      <url>/2025/03/12/b%E7%AB%99%E6%89%B9%E9%87%8F%E5%8F%96%E6%B6%88%E5%85%B3%E6%B3%A8%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>进入我的关注页面直接f12控制台粘贴下面的脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义点击“已关注”和“已互粉”按钮的函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">clickFollowButtons</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取所有符合条件的 div 元素</span></span><br><span class="line">    <span class="keyword">const</span> followButtons = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div.follow-btn__trigger.gray&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历并点击包含“已关注”或“已互粉”文本的按钮</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> button <span class="keyword">of</span> followButtons) &#123;</span><br><span class="line">        <span class="keyword">if</span> (button.<span class="property">innerText</span>.<span class="title function_">includes</span>(<span class="string">&quot;已关注&quot;</span>) || button.<span class="property">innerText</span>.<span class="title function_">includes</span>(<span class="string">&quot;已互粉&quot;</span>)) &#123;</span><br><span class="line">            button.<span class="title function_">click</span>(); <span class="comment">// 模拟点击</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已点击按钮:&quot;</span>, button.<span class="property">innerText</span>.<span class="title function_">trim</span>());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每次点击后等待1秒</span></span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前页面的按钮点击完成！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义翻页函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">autoPaginate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pageNumber = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`正在处理第 <span class="subst">$&#123;pageNumber&#125;</span> 页...`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击当前页的“已关注”和“已互粉”按钮</span></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">clickFollowButtons</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找“下一页”按钮</span></span><br><span class="line">        <span class="keyword">const</span> nextButton = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button.vui_button.vui_pagenation--btn.vui_pagenation--btn-side&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!nextButton || nextButton.<span class="property">disabled</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有更多页面了，脚本执行结束！&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 如果没有“下一页”按钮或按钮不可用，退出循环</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击“下一页”按钮</span></span><br><span class="line">        nextButton.<span class="title function_">click</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已点击下一页按钮，等待页面加载...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待页面加载完成（根据网络情况调整延迟时间）</span></span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">3000</span>));</span><br><span class="line"></span><br><span class="line">        pageNumber++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置延迟执行，确保页面加载完成</span></span><br><span class="line"><span class="built_in">setTimeout</span>(autoPaginate, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写了两年项目总结的springboot+uniapp项目模板文档</title>
      <link href="/2025/03/09/%E5%86%99%E4%BA%86%E4%B8%A4%E5%B9%B4%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E7%9A%84springboot-uniapp%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E6%96%87%E6%A1%A3/"/>
      <url>/2025/03/09/%E5%86%99%E4%BA%86%E4%B8%A4%E5%B9%B4%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93%E7%9A%84springboot-uniapp%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>gitee开源地址:<a href="https://gitee.com/hepingan11/springboot-uniapp">hepingan11&#x2F;springboot+uniapp</a></strong></p><p>解压即用</p><p>进入application.yml配置你的信息：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/h?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">java</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="comment"># redis??</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">200</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">sa-token</span></span><br><span class="line">  <span class="attr">active-timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">uuid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里OSS</span></span><br><span class="line"><span class="attr">ali-oss:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">domain:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><p><strong>sa-token教程</strong>：<a href="https://sa-token.cc/doc.html#/use/login-auth"><a href="https://sa-token.cc/doc.html#/">框架介绍</a></a></p><p><strong>跨域解决类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">corsConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                        .allowedOrigins(<span class="string">&quot;http://localhost:5173&quot;</span>) <span class="comment">// 允许前端地址</span></span><br><span class="line">                        .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                        .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                        .allowCredentials(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sa-token拦截类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaTokenConfigure</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排序的拦截</span></span><br><span class="line">    String[] writeUrl = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;</span><br><span class="line">            <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/user/register&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/**&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">SaInterceptor</span>(handler -&gt; StpUtil.checkLogin()))</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(writeUrl);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在writeUrl配置你的不被拦截的接口</p><p><strong>UserUrils工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getLoginIdByToken</span><span class="params">(<span class="keyword">final</span> String token)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">loginIdObject</span> <span class="operator">=</span> StpUtil.getLoginIdByToken(token);</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(String.valueOf(loginIdObject));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取登录人id</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">getCurrentLoginId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(String.valueOf(StpUtil.getLoginId()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用UserUtils.getCurrentLoginId()获取接口调用人的ID，一般用于获取userId</p><p><strong>RedisUtils工具类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">getRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.getExpire(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">increment</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delKey</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.delete(key);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">delKeys</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.delete(keys);</span><br><span class="line">        <span class="keyword">return</span> ret == <span class="literal">null</span> ? <span class="number">0</span> : ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValueTimeout</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasHashKey</span><span class="params">(<span class="keyword">final</span> String key, String hkey)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.opsForHash().hasKey(key, hkey);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashPut</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashPutAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, Object&gt; values)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hashGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hashGetAll</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">hashMultiGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hashExists</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">hashDeleteKeys</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hashDelete</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setDel</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">getSetAll</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetSetAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().add(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zsetSetGetSource</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zsetIncrementScore</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value, <span class="keyword">final</span> Double increment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, increment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">zsetSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object values, <span class="keyword">final</span> Double source)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">add</span> <span class="operator">=</span> redisTemplate.opsForZSet().add(key, values, source);</span><br><span class="line">        <span class="keyword">return</span> add;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zsetReverseRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> Long start, <span class="keyword">final</span> Long end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">zsetReverseRange</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Long start, <span class="keyword">final</span> Long end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">selfIncrease</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                operations.multi();</span><br><span class="line">                <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> operations.opsForValue().increment(key);</span><br><span class="line">                operations.exec();</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">selfIncreaseSource</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Double <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                operations.multi();</span><br><span class="line">                <span class="type">Double</span> <span class="variable">count</span> <span class="operator">=</span> operations.opsForZSet().incrementScore(key, value, <span class="number">1</span>);</span><br><span class="line">                operations.exec();</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetDelAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetDel</span><span class="params">(<span class="keyword">final</span> String key, Object values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPush</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">doesItExist</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPushAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPushAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">listGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">int</span> start, <span class="keyword">final</span> <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">keySize</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较常用的redisUtils.seValue(key,value)设置redis键值，getValue(key)</p><p>pom.xml还有许多可以使用的maven库，都加了注释，根据自己需求加删就行.</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pass Assistant v3.0版本大更新说明+虎皮椒支付接入</title>
      <link href="/2025/02/19/Pass-Assistant-v3-0%E7%89%88%E6%9C%AC%E5%A4%A7%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E-%E8%99%8E%E7%9A%AE%E6%A4%92%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5/"/>
      <url>/2025/02/19/Pass-Assistant-v3-0%E7%89%88%E6%9C%AC%E5%A4%A7%E6%9B%B4%E6%96%B0%E8%AF%B4%E6%98%8E-%E8%99%8E%E7%9A%AE%E6%A4%92%E6%94%AF%E4%BB%98%E6%8E%A5%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>在加上ai的神辅助下整蛊了一周多的代码才写出来的3.0大更新，期间包括破解了cursor的时间 (:doge)</p><p>整体页面大更新，让你的眼睛看起来更舒服了</p><p>gitee: <a href="https://gitee.com/hepingan11/gptweb">Pass Assistant前端: 何平安魔改time sea后的gpt前端部分</a></p><p>​<a href="https://gitee.com/hepingan11/gptjava">Pass Assistant后端: 基于time sea修改后的gpt</a></p><h1 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h1><h2 id="图床模块优化更新"><a href="#图床模块优化更新" class="headerlink" title="图床模块优化更新"></a>图床模块优化更新</h2><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250219082134.png"></p><p>新增了公共图床，可以将自己的图片设为私有或公有，共有任何人都可以查看，布局也比以前的无css叙利亚风更好看，站长也更有钱了，普通用户上限20张了（原来10张）后续3.1或3.2将添加用IT币来扩容图床</p><h2 id="外联导航模块"><a href="#外联导航模块" class="headerlink" title="外联导航模块"></a>外联导航模块</h2><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250219082503.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250219082606.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250219082711.png"></p><p>反正就是看起来更舒服了页面，以前的显示还有bug</p><h2 id="新增”关于我”模块"><a href="#新增”关于我”模块" class="headerlink" title="新增”关于我”模块"></a>新增”关于我”模块</h2><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250219082812.png"></p><p>就是如图，一个非常简单的页面，但是使用了新技术lottie动态图，里面还有我的岁月史书~</p><p>还有许多细处的更新，反正就让这个网站看起来像人做的了</p><h1 id="虎皮椒支付接入"><a href="#虎皮椒支付接入" class="headerlink" title="虎皮椒支付接入"></a>虎皮椒支付接入</h1><p>因为平安我没法注册微信或支付宝支付商家（学生党懂得都懂），发现了三方支付代理，就选了虎皮椒支付（花了88大洋开户了支付宝，因为就在它就在重庆开的公司跑路了我也可以线下单杀），下面是我在我网站接入的java代码理解，全是自己手敲的ai都写不出来。</p><p>官网：<a href="https://www.xunhupay.com/">虎皮椒-个人支付微信支付宝个人支付接口,个人网站收款API接口</a></p><p><strong>官方api接口</strong></p><p><strong>支付网关接口URL：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.xunhupay.com/payment/do.html  (设置为可配置的变量，以便接口变更时方便修改)</span><br></pre></td></tr></table></figure><p><strong>传参方式：Post</strong></p><p>使用curl的post方式传参数，并直接获取json返回值，引导客户跳转到支付链接。</p><table><thead><tr><th align="left">#</th><th align="left">参数名</th><th align="left">含义</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">version</td><td align="left">API 版本号</td><td align="left">string(24)</td><td align="left">必填。目前为1.1</td></tr><tr><td align="left">2</td><td align="left">appid</td><td align="left">APP ID</td><td align="left">string(32)</td><td align="left">必填。填写虎皮椒的APPID，不是小程序APPID</td></tr><tr><td align="left">3</td><td align="left">trade_order_id</td><td align="left">商户订单号</td><td align="left">string(32)</td><td align="left">必填。请确保在当前网站内是唯一订单号，只能是数字、大小写字母_-*</td></tr><tr><td align="left">4</td><td align="left">total_fee</td><td align="left">订单金额(元)</td><td align="left">decimal(18,2)</td><td align="left">必填。单位为人民币 元，没小数位不用强制保留2位小数</td></tr><tr><td align="left">5</td><td align="left">title</td><td align="left">订单标题</td><td align="left">string(128)</td><td align="left">必填。商户订单标题（不能超过127个字符或者42个汉字，不能有表情符号）</td></tr><tr><td align="left">6</td><td align="left">time</td><td align="left">当前时间戳</td><td align="left">int(11)</td><td align="left">必填。PHP示例：<code>time()</code></td></tr><tr><td align="left">7</td><td align="left">notify_url</td><td align="left">通知回调网址</td><td align="left">string(128)</td><td align="left">必填。用户支付成功后，我们服务器会主动发送一个post消息到这个网址(注意：当前接口内，SESSION内容无效，手机端不支持中文域名)</td></tr><tr><td align="left">8</td><td align="left">return_url</td><td align="left">跳转网址</td><td align="left">string(128)</td><td align="left">可选。用户支付成功后，我们会让用户浏览器自动跳转到这个网址</td></tr><tr><td align="left">9</td><td align="left">callback_url</td><td align="left">商品网址</td><td align="left">string(128)</td><td align="left">可选。用户取消支付后，我们可能引导用户跳转到这个网址上重新进行支付</td></tr><tr><td align="left">10</td><td align="left">plugins</td><td align="left">名称</td><td align="left">string(128)</td><td align="left">可选。 用于识别对接程序或作者</td></tr><tr><td align="left">11</td><td align="left">attach</td><td align="left">备注</td><td align="left">text</td><td align="left">可选。备注字段，可以传入一些备注数据，回调时原样返回</td></tr><tr><td align="left">12</td><td align="left">nonce_str</td><td align="left">随机值</td><td align="left">string(32)</td><td align="left">必填。作用：1.避免服务器页面缓存，2.防止安全密钥被猜测出来</td></tr><tr><td align="left">13</td><td align="left">hash</td><td align="left">签名</td><td align="left">string(32)</td><td align="left">必填。</td></tr><tr><td align="left">14</td><td align="left">type</td><td align="left">支付通道类型</td><td align="left">string(32)</td><td align="left">微信H5支付请填”WAP”，微信小程序支付请填”JSAPI” ，请参考小程序demo对接小程序支付，微信内支付请勿填写”JSAPI”，支付网关为：<a href="https://api.xunhupay.com/">https://api.xunhupay.com</a> 跳转小程序APPID：wx2574b5c5ee8da56b，其他支付网关跳转小程序APPID：wx402faa5bd5eda155，（支付宝不需要此参数）</td></tr><tr><td align="left">15</td><td align="left">wap_url</td><td align="left">网站域名</td><td align="left">string(50)</td><td align="left">网站域名，H5支付通道请填你网站域名，小程序支付请填支付网关（例如：<a href="https://api.dpweixin.com).(支付宝不需要此参数)/">https://api.dpweixin.com）。（支付宝不需要此参数）</a></td></tr><tr><td align="left">16</td><td align="left">wap_name</td><td align="left">网站名称</td><td align="left">string(50)</td><td align="left">店铺名称或网站域名，长度32或以内，H5支付通道请求必填。（支付宝不需要此参数）</td></tr></tbody></table><p>请求返回：</p><table><thead><tr><th align="left">#</th><th align="left">参数名</th><th align="left">含义</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">oderid</td><td align="left">订单id</td><td align="left">int</td><td align="left">订单id(此处有个历史遗留错误，返回名称是openid，值是orderid，一般对接不需要这个参数)</td></tr><tr><td align="left">2</td><td align="left">url_qrcode</td><td align="left">二维码地址(PC端使用)</td><td align="left">string(156)</td><td align="left">二维码有效期五分钟，PC端可将该参数展示出来进行扫码支付，不用再转二维码，需自己处理跳转</td></tr><tr><td align="left">3</td><td align="left">url</td><td align="left">请求url(手机端专用，PC端已停用)</td><td align="left">string(155)</td><td align="left">只需跳转此参数即可，系统会自动判断是微信端还是手机端，自动返回return_url，不能先显示“url_qrcode”二维码，再跳转“url”链接</td></tr><tr><td align="left">4</td><td align="left">errcode</td><td align="left">错误码</td><td align="left">int</td><td align="left"></td></tr><tr><td align="left">5</td><td align="left">errmsg</td><td align="left">错误信息</td><td align="left">string(8)</td><td align="left">错误信息具体值</td></tr><tr><td align="left">6</td><td align="left">hash</td><td align="left">签名</td><td align="left">string(32)</td><td align="left">数据签名，参考下面签名算法</td></tr></tbody></table><p><strong>HASH生成的步骤如下：</strong></p><p>第一步，设所有发送或者接收到的数据为集合M，将集合M内非空参数值的参数按照参数名ASCII码从小到大排序（字典序），使用URL键值对的格式（即key1&#x3D;value1&amp;key2&#x3D;value2…）拼接成字符串stringA。</p><p>特别注意以下重要规则：</p><ol><li>参数名ASCII码从小到大排序（字典序）；</li><li>如果参数的值为空不参与签名；</li><li>参数名区分大小写；</li><li>验证调用返回或微信主动通知签名时，传送的hash参数不参与签名，将生成的签名与该hash值作校验。</li><li>微信接口可能增加字段，验证签名时必须支持增加的扩展字段</li></ol><p>第二步，在stringA最后拼接上<code>APPSECRET(秘钥)</code>得到stringSignTemp字符串，并对stringSignTemp进行MD5运算，得到hash值（32位小写）。</p><p>知道你们喜欢cv大法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pay</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// appid</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">appid</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">// appsecret</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">appsecret</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">// 请求路径</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.xunhupay.com/payment/do.html&quot;</span>;</span><br><span class="line">       <span class="comment">// 设置 传递参数的集合，方便 传递数据。</span></span><br><span class="line">       Map&lt;String,Object&gt; options = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 必填 设置版本号</span></span><br><span class="line">       options.put(<span class="string">&quot;version&quot;</span>,<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line">       <span class="comment">// 必填 设置 appid</span></span><br><span class="line">       options.put(<span class="string">&quot;appid&quot;</span>,appid);</span><br><span class="line">       <span class="comment">// 密钥不需要直接传递</span></span><br><span class="line">       <span class="comment">//options.put(&quot;appsecret&quot;,appsecret);</span></span><br><span class="line">       <span class="comment">// 必填 订单号 具体内容自己控制 长度 32位 官网说 请确保在当前网站内是唯一订单号，具体含义 我测试了 在描述 此备注</span></span><br><span class="line">       options.put(<span class="string">&quot;trade_order_id&quot;</span>,<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line">       <span class="comment">// 必填 价格 精确到RMB分</span></span><br><span class="line">       options.put(<span class="string">&quot;total_fee&quot;</span>,<span class="string">&quot;0.01&quot;</span>);</span><br><span class="line">       <span class="comment">// 必填 标题</span></span><br><span class="line">       options.put(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;Pass Assistant&quot;</span>);</span><br><span class="line">       <span class="comment">// 必填 当前时间戳 调用 刚写的方法 getSecondTimestamp</span></span><br><span class="line">       options.put(<span class="string">&quot;time&quot;</span>, getSecondTimestamp(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">       <span class="comment">// 必填 通知回调地址 url 什么含义 我们后台需要知道 用户支付了。</span></span><br><span class="line">       options.put(<span class="string">&quot;notify_url&quot;</span>,<span class="string">&quot;http://127.0.0.1:8601/pay/paycallback&quot;</span>); <span class="comment">// 只有这个有用</span></span><br><span class="line">       <span class="comment">// 非必填 使用 响应字段中 url 就直接跳到百度了，如果访问，url_qrcode ，不会直接跳转，只有当支付完成后，再次刷新 url_qrcode中的连接，才会跳转。</span></span><br><span class="line">       options.put(<span class="string">&quot;return_url&quot;</span>,<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br><span class="line">       <span class="comment">// 非必填 用户取消支付，跳转的页面   经过测试，没有触发机制，建议不传递</span></span><br><span class="line">       options.put(<span class="string">&quot;callback_url&quot;</span>,<span class="string">&quot;https://www.sina.com.cn/&quot;</span>);</span><br><span class="line">       <span class="comment">//plugins 非必填 备注信息</span></span><br><span class="line">       options.put(<span class="string">&quot;plugins&quot;</span>,<span class="string">&quot;我是备注信息&quot;</span>);</span><br><span class="line">       <span class="comment">// nonce_str  必填 随机值 32位内  作用: 1.避免服务器页面缓存，2.防止安全密钥被猜测出来(md5 密钥越复杂，就越难解密出来)</span></span><br><span class="line">       options.put(<span class="string">&quot;nonce_str&quot;</span>,<span class="string">&quot;740969606&quot;</span>);</span><br><span class="line">       <span class="comment">// 定义 sb 为了获取 MD5 加密前的字符串</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="comment">// 将HashMap 进行 键 的 Ascll 从小到大排序 并 将每个 hashmap元素 以 &amp; 拼接起来</span></span><br><span class="line">       options.entrySet().stream().sorted((e1,e2) -&gt; e1.getKey().compareTo(e2.getKey())).forEach(a -&gt;&#123;</span><br><span class="line">           sb.append(a).append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">// 去除 最后一位的 &amp;</span></span><br><span class="line">       sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">       <span class="comment">// 拼接上密钥</span></span><br><span class="line">       sb.append(appsecret);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的 加密工具 进行 MD5 加密</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> SecureUtil.md5(sb.toString());</span><br><span class="line">       <span class="comment">// 输出hash结果 postman 要用</span></span><br><span class="line">       System.out.println(<span class="string">&quot;我们生成的Hash 是：&quot;</span>+s);</span><br><span class="line">       <span class="comment">// 输出time结果 postman 要用</span></span><br><span class="line">       System.out.println(<span class="string">&quot;我们生成的time 是: &quot;</span>+options.get(<span class="string">&quot;time&quot;</span>));</span><br><span class="line">       System.out.println();</span><br><span class="line">       <span class="comment">// 必填 hash 签名</span></span><br><span class="line">       options.put(<span class="string">&quot;hash&quot;</span>, s);</span><br><span class="line">       System.out.println(<span class="string">&quot;我们传递的参数有：&quot;</span>+options.toString());</span><br><span class="line">       System.out.println(<span class="string">&quot;开始调 虎皮椒支付 接口...&quot;</span>);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的HttpUtil 发送 post 请求</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">post</span> <span class="operator">=</span> HttpUtil.post(url, options);</span><br><span class="line">       System.out.println(<span class="string">&quot;结束调 虎皮椒支付 接口...\n&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;虎皮椒支付 接口 响应的结果是：&quot;</span>+post+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">       <span class="comment">// 说明：这里 因为虎皮椒支付 响应结果 不统一，正确是Json;不正确 就是一行String 。没办法 判断是否请求是否有效。所以 只能通过 是由能够解析成json 有无异常判断 是否调用成功</span></span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map)JSON.parse(post);</span><br><span class="line">           map.keySet().stream().forEach(k -&gt; &#123;</span><br><span class="line">               <span class="keyword">if</span> (k == <span class="string">&quot;url&quot;</span>) &#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;url二维码链接是: &quot;</span>+map.get(k));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           System.out.println(<span class="string">&quot;调 虎皮椒支付 时 出现了问题&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取精确到秒的时间戳   原理 获取毫秒时间戳，因为 1秒 = 100毫秒 去除后三位 就是秒的时间戳</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSecondTimestamp</span><span class="params">(Date date)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == date) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> String.valueOf(date.getTime());</span><br><span class="line">       <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> timestamp.length();</span><br><span class="line">       <span class="keyword">if</span> (length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> Integer.valueOf(timestamp.substring(<span class="number">0</span>,length-<span class="number">3</span>));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>后来经过我的上十次测试，支付成功后回调(notify_url)没用，就选择第二种方法吧，页面每隔几秒查询次支付状况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">// appid</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">appid</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">// appsecret</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">appsecret</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="comment">// 请求路径</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.xunhupay.com/payment/query.html&quot;</span>;</span><br><span class="line">       <span class="comment">// 设置 传递参数的集合，方便 传递数据。</span></span><br><span class="line">       Map&lt;String,Object&gt; options = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 必填 设置 appid</span></span><br><span class="line">       options.put(<span class="string">&quot;appid&quot;</span>,appid);</span><br><span class="line">       <span class="comment">// 必填 订单号 具体内容自己控制 长度 32位 官网说 请确保在当前网站内是唯一订单号，具体含义 我测试了 在描述 此备注</span></span><br><span class="line">       options.put(<span class="string">&quot;out_trade_order&quot;</span>,<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line">       <span class="comment">// 必填 当前时间戳 调用 刚写的方法 getSecondTimestamp</span></span><br><span class="line">       options.put(<span class="string">&quot;time&quot;</span>, getSecondTimestamp(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">       <span class="comment">// nonce_str  必填 随机值 32位内  作用: 1.避免服务器页面缓存，2.防止安全密钥被猜测出来(md5 密钥越复杂，就越难解密出来)</span></span><br><span class="line">       options.put(<span class="string">&quot;nonce_str&quot;</span>,<span class="string">&quot;123546789&quot;</span>);</span><br><span class="line">       <span class="comment">// 定义 sb 为了获取 MD5 加密前的字符串</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="comment">// 将HashMap 进行 键 的 Ascll 从小到大排序 并 将每个 hashmap元素 以 &amp; 拼接起来</span></span><br><span class="line">       options.entrySet().stream().sorted((e1,e2) -&gt; e1.getKey().compareTo(e2.getKey())).forEach(a -&gt;&#123;</span><br><span class="line">           sb.append(a).append(<span class="string">&quot;&amp;&quot;</span>);&#125;);</span><br><span class="line">       <span class="comment">// 去除 最后一位的 &amp;</span></span><br><span class="line">       sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">       sb.append(appsecret);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的 加密工具 进行 MD5 加密</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> SecureUtil.md5(sb.toString());</span><br><span class="line">       <span class="comment">// 必填 hash 签名</span></span><br><span class="line">       options.put(<span class="string">&quot;hash&quot;</span>, s);</span><br><span class="line">       System.out.println(<span class="string">&quot;我们传递的参数有：&quot;</span>+options);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的HttpUtil 发送 post 请求</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">post</span> <span class="operator">=</span> HttpUtil.post(url, options);</span><br><span class="line">       System.out.println(<span class="string">&quot;结束调 虎皮椒支付 接口...\n&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;虎皮椒支付 接口 响应的结果是：&quot;</span>+post+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(post);</span><br><span class="line">       <span class="comment">// 获取data对象</span></span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">dataObject</span> <span class="operator">=</span> jsonObject.getJSONObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">       <span class="comment">// 获取status值</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> dataObject.getString(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">       System.out.println(status);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当然了上面的全只是测试类，下面上真的实战代码，也就是我的Pass Assistant的分享：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;hupijiao.appid&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String AppId;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;hupijiao.appsecret&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String AppSecret;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;hupijiao.webUrl&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> String webUrl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 虎皮椒支付宝支付</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> productId the product id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">   <span class="keyword">public</span> AlipayPayCodeVo <span class="title function_">generatePayQrCode</span><span class="params">(<span class="keyword">final</span> Long productId)</span> &#123;</span><br><span class="line">       <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.selectOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Product&gt;().lambda().eq(Product::getProductId, productId));</span><br><span class="line">       <span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OrdersException</span>(ExceptionMessages.PRODUCT_NULL_ERR, <span class="number">500</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 请求路径</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.xunhupay.com/payment/do.html&quot;</span>;</span><br><span class="line">       <span class="comment">// 设置 传递参数的集合，方便 传递数据。</span></span><br><span class="line">       Map&lt;String,Object&gt; options = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 必填 设置版本号</span></span><br><span class="line">       options.put(<span class="string">&quot;version&quot;</span>,<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line">       <span class="comment">// 必填 设置 appid</span></span><br><span class="line">       options.put(<span class="string">&quot;appid&quot;</span>,AppId);</span><br><span class="line">       <span class="comment">// 必填 订单号 具体内容自己控制 长度 32位</span></span><br><span class="line">       <span class="comment">// 官网说 请确保在当前网站内是唯一订单号，具体含义 我测试了 在描述 此备注</span></span><br><span class="line">       <span class="type">SecureRandom</span> <span class="variable">secureRandom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">12</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">12</span>; i++) &#123;</span><br><span class="line">           stringBuilder.append(secureRandom.nextInt(<span class="number">12</span>)); <span class="comment">// 生成0-9之间的随机数</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">randomNumber</span> <span class="operator">=</span> stringBuilder.toString();</span><br><span class="line">       options.put(<span class="string">&quot;trade_order_id&quot;</span>,randomNumber);</span><br><span class="line">       <span class="comment">// 必填 价格 精确到RMB分</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">formattedNumber</span> <span class="operator">=</span> String.format(<span class="string">&quot;%.2f&quot;</span>, product.getProductPrice());</span><br><span class="line">       options.put(<span class="string">&quot;total_fee&quot;</span>,formattedNumber);</span><br><span class="line">       <span class="comment">// 必填 标题</span></span><br><span class="line">       options.put(<span class="string">&quot;title&quot;</span>,product.getProductName());</span><br><span class="line">       <span class="comment">// 必填 当前时间戳 调用 刚写的方法 getSecondTimestamp</span></span><br><span class="line">       options.put(<span class="string">&quot;time&quot;</span>, getSecondTimestamp(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">       <span class="comment">// 必填 通知回调地址 url 什么含义 我们后台需要知道 用户支付了。</span></span><br><span class="line">       options.put(<span class="string">&quot;notify_url&quot;</span>,<span class="string">&quot;https://java.hepingan.top/pay/paycallback&quot;</span>); <span class="comment">// 只有这个有用</span></span><br><span class="line">       <span class="comment">// 非必填 使用 响应字段中 url 就直接跳到百度了，如果访问，url_qrcode ，不会直接跳转，只有当支付完成后，再次刷新 url_qrcode中的连接，才会跳转。</span></span><br><span class="line">       options.put(<span class="string">&quot;return_url&quot;</span>,webUrl+<span class="string">&quot;/#/user_view&quot;</span>);</span><br><span class="line">       <span class="comment">// 非必填 用户取消支付，跳转的页面   经过测试，没有触发机制，建议不传递</span></span><br><span class="line">       options.put(<span class="string">&quot;callback_url&quot;</span>,webUrl+<span class="string">&quot;/#/user_view&quot;</span>);</span><br><span class="line">       <span class="comment">//plugins 非必填 备注信息</span></span><br><span class="line">       options.put(<span class="string">&quot;plugins&quot;</span>,<span class="string">&quot;您支付后的IT币（虚拟货币）将只用于Pass Assistant站内消费.&quot;</span>);</span><br><span class="line">       <span class="comment">// nonce_str  必填 随机值 32位内  作用: 1.避免服务器页面缓存，2.防止安全密钥被猜测出来(md5 密钥越复杂，就越难解密出来)</span></span><br><span class="line">       <span class="type">SecureRandom</span> <span class="variable">secureRandom2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">stringBuilder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">10</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           stringBuilder2.append(secureRandom2.nextInt(<span class="number">10</span>)); <span class="comment">// 生成0-9之间的随机数</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">randomNumber2</span> <span class="operator">=</span> stringBuilder2.toString();</span><br><span class="line">       options.put(<span class="string">&quot;nonce_str&quot;</span>,randomNumber2);</span><br><span class="line">       <span class="comment">// 定义 sb 为了获取 MD5 加密前的字符串</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="comment">// 将HashMap 进行 键 的 Ascll 从小到大排序 并 将每个 hashmap元素 以 &amp; 拼接起来</span></span><br><span class="line">       options.entrySet().stream().sorted((e1,e2) -&gt; e1.getKey().compareTo(e2.getKey())).forEach(a -&gt;&#123;</span><br><span class="line">           sb.append(a).append(<span class="string">&quot;&amp;&quot;</span>);&#125;);</span><br><span class="line">       <span class="comment">// 去除 最后一位的 &amp;</span></span><br><span class="line">       sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">       <span class="comment">// 拼接上密钥</span></span><br><span class="line">       sb.append(AppSecret);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的 加密工具 进行 MD5 加密</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> SecureUtil.md5(sb.toString());</span><br><span class="line">       <span class="comment">// 必填 hash 签名</span></span><br><span class="line">       options.put(<span class="string">&quot;hash&quot;</span>, s);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的HttpUtil 发送 post 请求</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">post</span> <span class="operator">=</span> HttpUtil.post(url, options);</span><br><span class="line">       <span class="comment">// 说明：这里 因为虎皮椒支付 响应结果 不统一，正确是Json;</span></span><br><span class="line">       <span class="comment">// 不正确 就是一行String 。没办法 判断是否请求是否有效。</span></span><br><span class="line">       <span class="comment">// 所以 只能通过 是由能够解析成json 有无异常判断 是否调用成功</span></span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) JSON.parse(post);</span><br><span class="line">           <span class="type">String</span> <span class="variable">payUrl</span> <span class="operator">=</span> (String) map.get(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">           <span class="type">LocalDateTime</span> <span class="variable">createdTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">           <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>()</span><br><span class="line">                   .setOrdersId(randomNumber)</span><br><span class="line">                   .setUserId(UserUtils.getCurrentLoginId())</span><br><span class="line">                   .setCreatedTime(createdTime)</span><br><span class="line">                   .setUpdateTime(createdTime)</span><br><span class="line">                   .setProductId(productId)</span><br><span class="line">                   .setProductName(product.getProductName())</span><br><span class="line">                   .setProductPrice(product.getProductPrice())</span><br><span class="line">                   .setState(<span class="number">0</span>);</span><br><span class="line">           ordersMapper.insert(orders);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AlipayPayCodeVo</span>()</span><br><span class="line">                   .setOrdersId(orders.getOrdersId())</span><br><span class="line">                   .setCreatedTime(orders.getCreatedTime())</span><br><span class="line">                   .setProductName(orders.getProductName())</span><br><span class="line">                   .setProductPrice(orders.getProductPrice())</span><br><span class="line">                   .setPayUrl(payUrl);</span><br><span class="line">       &#125;<span class="keyword">catch</span> (OrdersException e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取精确到秒的时间戳   原理 获取毫秒时间戳，因为 1秒 = 100毫秒 去除后三位 就是秒的时间戳</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSecondTimestamp</span><span class="params">(Date date)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">null</span> == date) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> String.valueOf(date.getTime());</span><br><span class="line">       <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> timestamp.length();</span><br><span class="line">       <span class="keyword">if</span> (length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> Integer.valueOf(timestamp.substring(<span class="number">0</span>,length-<span class="number">3</span>));</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 检查 付款状态</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> orderNo 订单</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">paymentStatus</span><span class="params">(<span class="keyword">final</span> String orderNo)</span> &#123;</span><br><span class="line">       <span class="comment">// 请求路径</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;https://api.xunhupay.com/payment/query.html&quot;</span>;</span><br><span class="line">       <span class="comment">// 设置 传递参数的集合，方便 传递数据。</span></span><br><span class="line">       Map&lt;String,Object&gt; options = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">// 必填 设置 appid</span></span><br><span class="line">       options.put(<span class="string">&quot;appid&quot;</span>,AppId);</span><br><span class="line">       <span class="comment">// 必填 订单号 具体内容自己控制 长度 32位 官网说 请确保在当前网站内是唯一订单号，具体含义 我测试了 在描述 此备注</span></span><br><span class="line">       options.put(<span class="string">&quot;out_trade_order&quot;</span>,orderNo);</span><br><span class="line">       <span class="comment">// 必填 当前时间戳 调用 刚写的方法 getSecondTimestamp</span></span><br><span class="line">       options.put(<span class="string">&quot;time&quot;</span>, getSecondTimestamp(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">       <span class="comment">// nonce_str  必填 随机值 32位内  作用: 1.避免服务器页面缓存，2.防止安全密钥被猜测出来(md5 密钥越复杂，就越难解密出来)</span></span><br><span class="line">       <span class="type">SecureRandom</span> <span class="variable">secureRandom2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">stringBuilder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">10</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           stringBuilder2.append(secureRandom2.nextInt(<span class="number">10</span>)); <span class="comment">// 生成0-9之间的随机数</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">String</span> <span class="variable">randomNumber2</span> <span class="operator">=</span> stringBuilder2.toString();</span><br><span class="line">       options.put(<span class="string">&quot;nonce_str&quot;</span>,randomNumber2);</span><br><span class="line">       <span class="comment">// 定义 sb 为了获取 MD5 加密前的字符串</span></span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">       <span class="comment">// 将HashMap 进行 键 的 Ascll 从小到大排序 并 将每个 hashmap元素 以 &amp; 拼接起来</span></span><br><span class="line">       options.entrySet().stream().sorted((e1,e2) -&gt; e1.getKey().compareTo(e2.getKey())).forEach(a -&gt;&#123;</span><br><span class="line">           sb.append(a).append(<span class="string">&quot;&amp;&quot;</span>);&#125;);</span><br><span class="line">       <span class="comment">// 去除 最后一位的 &amp;</span></span><br><span class="line">       sb.deleteCharAt(sb.length()-<span class="number">1</span>);</span><br><span class="line">       sb.append(AppSecret);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的 加密工具 进行 MD5 加密</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> SecureUtil.md5(sb.toString());</span><br><span class="line">       <span class="comment">// 必填 hash 签名</span></span><br><span class="line">       options.put(<span class="string">&quot;hash&quot;</span>, s);</span><br><span class="line">       <span class="comment">// 调用 Hutool 的HttpUtil 发送 post 请求</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">post</span> <span class="operator">=</span> HttpUtil.post(url, options);</span><br><span class="line"></span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(post);</span><br><span class="line">       <span class="comment">// 获取data对象</span></span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">dataObject</span> <span class="operator">=</span> jsonObject.getJSONObject(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">       <span class="comment">// 获取status值</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> dataObject.getString(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">       System.out.println(status);</span><br><span class="line">       <span class="keyword">if</span> (Objects.equals(status, <span class="string">&quot;OD&quot;</span>))&#123;</span><br><span class="line">           ordersMapper.update(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;Orders&gt;()</span><br><span class="line">                   .lambda()</span><br><span class="line">                   .eq(Orders::getOrdersId,orderNo)</span><br><span class="line">                   .set(Orders::getState,<span class="number">1</span>)</span><br><span class="line">                   .set(Orders::getPayTime,LocalDateTime.now()));</span><br><span class="line">           <span class="type">Long</span> <span class="variable">frequency</span> <span class="operator">=</span> userMapper.getFrequencyById(UserUtils.getCurrentLoginId());</span><br><span class="line">           <span class="type">Orders</span> <span class="variable">orders</span> <span class="operator">=</span> ordersMapper.selectOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Orders&gt;()</span><br><span class="line">                   .lambda()</span><br><span class="line">                   .eq(Orders::getOrdersId,orderNo)</span><br><span class="line">                   .select(Orders::getProductId));</span><br><span class="line">           <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.selectOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;Product&gt;()</span><br><span class="line">                   .lambda()</span><br><span class="line">                   .eq(Product::getProductId, orders.getProductId())</span><br><span class="line">                   .select(Product::getFrequency));</span><br><span class="line">           <span class="comment">//更新用户的次数</span></span><br><span class="line">           userMapper.update(<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;User&gt;()</span><br><span class="line">                   .lambda()</span><br><span class="line">                   .eq(User::getUserId,UserUtils.getCurrentLoginId())</span><br><span class="line">                   .set(User::getFrequency,frequency+product.getFrequency()));</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Objects.equals(status, <span class="string">&quot;WP&quot;</span>))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;wait&quot;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;cancel&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-if=&quot;payying&quot;</span><br><span class="line">    style=&quot;text-align: center; padding-top: 100px&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;h1&gt;请跳转到新的页面进行支付&lt;/h1&gt;</span><br><span class="line">    &lt;h2 style=&quot;color: red&quot;&gt;支付成功前请勿关闭或刷新该页面&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt; </span><br><span class="line">  &lt;div v-if=&quot;showSucceed&quot;</span><br><span class="line">  style=&quot;text-align: center; padding-top: 100px&quot;&gt;</span><br><span class="line">    &lt;h1&gt;恭喜您已成功支付&lt;/h1&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;router().push(&#x27;/user_view&#x27;)&quot;&gt;查看&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">alipayPay</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="title class_">ElLoading</span>.<span class="title function_">service</span>(&#123;</span><br><span class="line">         <span class="attr">fullscreen</span>: <span class="literal">true</span>,</span><br><span class="line">         <span class="attr">text</span>: <span class="string">&quot;正在构建订单...&quot;</span>,</span><br><span class="line">         <span class="attr">spinner</span>: <span class="string">&quot;el-icon-loading&quot;</span>,</span><br><span class="line">         <span class="attr">background</span>: <span class="string">&quot;rgba(0, 0, 0, 0.7)&quot;</span>,</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//构建支付宝订单</span></span><br><span class="line">       outcome.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">alipayPayQrCode</span>(productId.<span class="property">value</span>);</span><br><span class="line">       payVisible.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">       payying.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">       mainPageVisible.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">       <span class="variable language_">window</span>.<span class="title function_">open</span>(outcome.<span class="property">value</span>.<span class="property">payUrl</span>, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line">       <span class="comment">//3秒检查一下订单是否支付成功</span></span><br><span class="line">       <span class="keyword">let</span> timerId = <span class="built_in">setInterval</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">alipayIsSucceed</span>(outcome.<span class="property">value</span>.<span class="property">ordersId</span>);</span><br><span class="line">         <span class="keyword">if</span> (res === <span class="string">&quot;success&quot;</span>) &#123;</span><br><span class="line">           <span class="title class_">ElNotification</span>(&#123;</span><br><span class="line">             <span class="attr">title</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">             <span class="attr">message</span>: <span class="string">&quot;赞赏成功，可在我的赞赏中查看该赞赏记录&quot;</span>,</span><br><span class="line">             <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">           &#125;);</span><br><span class="line">           showSucceed.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">           <span class="keyword">await</span> <span class="title function_">getUser</span>();</span><br><span class="line">           <span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">         &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="string">&quot;cancel&quot;</span>) &#123;</span><br><span class="line">           showCover.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">           <span class="title class_">ElNotification</span>(&#123;</span><br><span class="line">             <span class="attr">title</span>: <span class="string">&quot;订单已关闭&quot;</span>,</span><br><span class="line">             <span class="attr">message</span>: <span class="string">&quot;长时间未支付，订单已关闭&quot;</span>,</span><br><span class="line">             <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">         &#125;</span><br><span class="line">       <span class="comment">//间隔时间查询</span></span><br><span class="line">       &#125;, <span class="number">5000</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">       <span class="title class_">ElNotification</span>(&#123;</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&quot;错误&quot;</span>,</span><br><span class="line">         <span class="attr">message</span>: e,</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">       &#125;);</span><br><span class="line">       mainPageVisible.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="title class_">ElLoading</span>.<span class="title function_">service</span>().<span class="title function_">close</span>();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>看得懂就看啦，把那个测试类看懂就会了，我这个仅供参考</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pass Assistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cursor破解最新方法（2025.2.16）</title>
      <link href="/2025/02/16/cursor%E7%A0%B4%E8%A7%A3%E6%9C%80%E6%96%B0%E6%96%B9%E6%B3%95%EF%BC%882025-2-16%EF%BC%89/"/>
      <url>/2025/02/16/cursor%E7%A0%B4%E8%A7%A3%E6%9C%80%E6%96%B0%E6%96%B9%E6%B3%95%EF%BC%882025-2-16%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>sb cursor没有互联网开源精神，直接给他破解了！！！也是找了两三天才找到</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250216092318.png"></p><p>首先去下载0.45版本以下的，越低越好，我选的是0.44.0</p><p><a href="https://downloader-cursor.deno.dev/">Cursor 历史版本下载</a></p><p>再去下载这个工具：</p><p><a href="https://pan.quark.cn/s/aa96dd0eaa80#/list/share">夸克网盘分享</a></p><p>运行里面的CursorPro.exe，他会自动为你创建好一个新账号并应用到你的cursor中，这样你的次数用完了就运行它，默认浏览器听说是要谷歌（没试过）。</p><h2 id="修改机械码"><a href="#修改机械码" class="headerlink" title="修改机械码"></a>修改机械码</h2><p>修改机械码这种方法在0.45没用了但还是放出来方法；cursor存放地址为：C:\Users\Admin\AppData\Roaming\Cursor\User\globalStorage的storage.json，可以自己修改里面的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;telemetry.macMachineId&quot;: &quot;2cbc0f71-f470-4545-b762-87c9dc049cb7&quot;,</span><br><span class="line">&quot;telemetry.sqmId&quot;: &quot;&#123;fbcde710-2667-44a0-a4c9-7dfdcd97da51&#125;&quot;,</span><br><span class="line">&quot;telemetry.machineId&quot;: &quot;24d91d598c0e71a98be1aced4a602106174baad36a50f85768b4213cd968caf9&quot;,</span><br><span class="line">&quot;telemetry.devDeviceId&quot;: &quot;baf2a55a-a656-42b4-9016-32950a89c738&quot;,</span><br></pre></td></tr></table></figure><p>格式要符合一样</p><p>或者去下个插件叫Fake Cursor（<a href="https://github.com/fake-cursor/cursor-fake-machine%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%94%B9%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%8C**%E4%BF%AE%E6%94%B9%E5%AE%8C%E5%90%8E%E8%AE%B0%E5%BE%97%E5%B0%86%E6%96%87%E4%BB%B6%E4%BB%85%E9%99%90%E8%AE%BE%E7%BD%AE%E4%B8%BA%E5%8F%AA%E8%AF%BB**%EF%BC%8C%E4%B8%8D%E7%84%B6cursor%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%E4%BD%A0%E7%9A%84id">https://github.com/fake-cursor/cursor-fake-machine），可以自动修改这个文件，**修改完后记得将文件仅限设置为只读**，不然cursor会自动更新你的id</a></p><p>参考：<a href="https://www.bilibili.com/video/BV1iNNUeaET4/?spm_id_from=333.337.search-card.all.click&vd_source=190aa40e29cf9c29c0ec0fe896bdef1f">Cursor白嫖指南，无限制使用Cursor教程_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1JjAAe6E1W/?spm_id_from=333.337.search-card.all.click">cursor一站式无限白嫖|解决50次150次限制|解决自动升级问题|_哔哩哔哩_bilibili</a></p><h2 id="一键破解方法（推荐）"><a href="#一键破解方法（推荐）" class="headerlink" title="一键破解方法（推荐）"></a>一键破解方法（推荐）</h2><p>原视频链接：<a href="https://www.bilibili.com/video/BV1TjA3ekEjt/?spm_id_from=333.337.search-card.all.click&vd_source=190aa40e29cf9c29c0ec0fe896bdef1f">【真·无限使用】cursor最新版无限续杯白嫖-脚本在视频简介-没有套路_哔哩哔哩_bilibili</a></p><p> 写了这个帮助文档, 大家可以看下 <a href="https://www.yuque.com/brojie/iofws3/cmnk49w9dx9ygsys?singleDoc#">https://www.yuque.com/brojie/iofws3/cmnk49w9dx9ygsys?singleDoc#</a> 《Cursor脚本帮助文档》 — 网盘链接: 夸克: <a href="https://pan.quark.cn/s/67c02947b8c5">https://pan.quark.cn/s/67c02947b8c5</a> 百度: <a href="https://pan.baidu.com/s/1PN4gD4t9Fc-dr-npYVxSBg?pwd=6amk">https://pan.baidu.com/s/1PN4gD4t9Fc-dr-npYVxSBg?pwd=6amk</a> 提取码: 6amk</p><p><strong>注意事项</strong></p><ul><li>默认浏览器设置为谷歌浏览器</li><li>需要上梯子（我没上好像也行）</li><li>以管理员运行脚本</li><li>cursor为最新版</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cursor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个困扰我半年的bug，cannot read properties of null (reading &#39;addeventlistener&#39;),真凶竟是篡改猴！</title>
      <link href="/2025/02/07/IT%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%B8%AA%E5%9B%B0%E6%89%B0%E6%88%91%E5%8D%8A%E5%B9%B4%E7%9A%84bug%EF%BC%8Ccannot-read-properties-of-null-reading-addeventlistener-%E7%9C%9F%E5%87%B6%E7%AB%9F%E6%98%AF%E7%AF%A1%E6%94%B9%E7%8C%B4%EF%BC%81/"/>
      <url>/2025/02/07/IT%E7%AC%94%E8%AE%B0/%E4%B8%80%E4%B8%AA%E5%9B%B0%E6%89%B0%E6%88%91%E5%8D%8A%E5%B9%B4%E7%9A%84bug%EF%BC%8Ccannot-read-properties-of-null-reading-addeventlistener-%E7%9C%9F%E5%87%B6%E7%AB%9F%E6%98%AF%E7%AF%A1%E6%94%B9%E7%8C%B4%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>没错如果你的Vue出现了cannot read properties of null (reading<br>  ‘addeventlistener’),而且下面的索引为userscript.html的212行，内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给按钮绑定点击事件</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">setBtnClick</span>(<span class="params"></span>)&#123;  </span><br><span class="line">     <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,setMenu);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>一开始我以为是全局配置错了啥的，网上搜出来说还要挂载dom前停止addEventLisener事件啥的，甚至我把addeventlistener的所有代码都删了，试了半天都不行。</p><p>罪魁祸首：</p><p> <img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250207054420.png"></p><h1 id="修改方法"><a href="#修改方法" class="headerlink" title="修改方法"></a>修改方法</h1><p><strong>那么恭喜你，你写代码的时候不能用篡改猴了，或者不闲麻烦可以使用下面的修改方法：</strong></p><p>在 Tampermonkey（篡改猴）测试版中遇到 <code>Cannot read properties of null (reading &#39;addEventListener&#39;)</code> 错误，通常是因为用户脚本尝试访问尚未加载或动态生成的 DOM 元素。以下是针对 Tampermonkey 环境的详细解决方案：</p><hr><h3 id="1-确保脚本在-DOM-加载完成后执行"><a href="#1-确保脚本在-DOM-加载完成后执行" class="headerlink" title="1. 确保脚本在 DOM 加载完成后执行"></a><strong>1. 确保脚本在 DOM 加载完成后执行</strong></h3><p>Tampermonkey 默认在 <code>document-end</code> 阶段执行脚本，但某些动态内容可能需要更晚的执行时机。使用 <code>@run-at</code> 元数据或 <code>DOMContentLoaded</code> 事件确保元素存在。</p><h4 id="方法-1：调整脚本执行阶段"><a href="#方法-1：调整脚本执行阶段" class="headerlink" title="方法 1：调整脚本执行阶段"></a><strong>方法 1：调整脚本执行阶段</strong></h4><p>在脚本的元数据（<code>==UserScript==</code> 部分）中指定 <code>@run-at document-idle</code>，确保脚本在页面完全空闲时执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         Your Script Name</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  Example</span></span><br><span class="line"><span class="comment">// @match        https://example.com/*</span></span><br><span class="line"><span class="comment">// @run-at       document-idle  // 确保在 DOM 空闲后执行</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, setMenu);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;未找到按钮 #rwl-setbtn&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="方法-2：手动监听-DOMContentLoaded"><a href="#方法-2：手动监听-DOMContentLoaded" class="headerlink" title="方法 2：手动监听 DOMContentLoaded"></a><strong>方法 2：手动监听 DOMContentLoaded</strong></h4><p>即使使用 <code>@run-at</code>，某些动态页面仍需进一步等待：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @match        https://example.com/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, setMenu);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;初次未找到按钮，尝试动态监听...&quot;</span>);</span><br><span class="line">        <span class="title function_">observeDynamicButton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observeDynamicButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">            btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, setMenu);</span><br><span class="line">            observer.<span class="title function_">disconnect</span>(); <span class="comment">// 绑定后停止监听</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;动态按钮已绑定事件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setMenu</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 处理点击事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-处理跨域或-iframe-中的元素"><a href="#2-处理跨域或-iframe-中的元素" class="headerlink" title="2. 处理跨域或 iframe 中的元素"></a><strong>2. 处理跨域或 iframe 中的元素</strong></h3><p>如果目标元素位于 <code>iframe</code> 内，需先访问 <code>iframe</code> 的 <code>contentDocument</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @match        https://example.com/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> iframe = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;iframe&quot;</span>); <span class="comment">// 调整选择器以匹配实际 iframe</span></span><br><span class="line">    <span class="keyword">if</span> (iframe) &#123;</span><br><span class="line">        iframe.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> btn = iframe.<span class="property">contentDocument</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">                btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, setMenu);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="3-使用-Tampermonkey-的-unsafeWindow-访问页面上下文"><a href="#3-使用-Tampermonkey-的-unsafeWindow-访问页面上下文" class="headerlink" title="3. 使用 Tampermonkey 的 unsafeWindow 访问页面上下文"></a><strong>3. 使用 Tampermonkey 的 <code>unsafeWindow</code> 访问页面上下文</strong></h3><p>Tampermonkey 脚本默认运行在隔离的沙盒环境，直接使用 <code>document</code> 可能无法访问页面 DOM。需通过 <code>unsafeWindow</code> 访问实际页面对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @match        https://example.com/*</span></span><br><span class="line"><span class="comment">// @grant        unsafeWindow  // 声明需要 unsafeWindow 权限</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uw = <span class="keyword">typeof</span> unsafeWindow !== <span class="string">&quot;undefined&quot;</span> ? unsafeWindow : <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = uw.<span class="property">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, setMenu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="4-调试与日志输出"><a href="#4-调试与日志输出" class="headerlink" title="4. 调试与日志输出"></a><strong>4. 调试与日志输出</strong></h3><p>添加日志以确认元素是否存在及脚本执行状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @match        https://example.com/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tampermonkey 脚本已加载&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DOMContentLoaded 触发&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查找到的按钮：&quot;</span>, btn);</span><br><span class="line">    <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;按钮点击事件触发&quot;</span>);</span><br><span class="line">            <span class="title function_">setMenu</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="5-验证元素选择器"><a href="#5-验证元素选择器" class="headerlink" title="5. 验证元素选择器"></a><strong>5. 验证元素选择器</strong></h3><p>确保 <code>#rwl-setbtn</code> 选择器正确：</p><ol><li>在目标页面上按 <code>F12</code> 打开开发者工具。</li><li>使用 <code>Ctrl+F</code> 在 Elements 面板中搜索 <code>#rwl-setbtn</code>。</li><li>确认元素存在且 ID 无误。如果元素是动态生成的，检查其父级容器是否已渲染。</li></ol><hr><h3 id="6-处理-Shadow-DOM"><a href="#6-处理-Shadow-DOM" class="headerlink" title="6. 处理 Shadow DOM"></a><strong>6. 处理 Shadow DOM</strong></h3><p>如果元素位于 Shadow DOM 内部，需穿透访问：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：访问 Shadow DOM 中的元素</span></span><br><span class="line"><span class="keyword">const</span> host = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#shadow-host&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (host &amp;&amp; host.<span class="property">shadowRoot</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = host.<span class="property">shadowRoot</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#rwl-setbtn&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">        btn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, setMenu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ol><li><strong>执行时机</strong>：通过 <code>@run-at document-idle</code> 或 <code>DOMContentLoaded</code> 确保脚本在 DOM 就绪后运行。</li><li><strong>动态元素</strong>：使用 <code>MutationObserver</code> 监听 DOM 变化。</li><li><strong>跨域&#x2F;iframe</strong>：通过 <code>iframe.contentDocument</code> 或 <code>unsafeWindow</code> 访问目标元素。</li><li><strong>调试</strong>：添加 <code>console.log</code> 验证元素是否存在及脚本执行流程。</li><li><strong>选择器验证</strong>：确保元素 ID 正确且位于当前作用域。</li></ol><p>如果问题仍未解决，请提供目标页面的 URL 或 HTML 结构，以便进一步分析。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的故事（大三上）</title>
      <link href="/2025/01/24/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E7%8E%8B%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%B8%89%E4%B8%8A%EF%BC%89/"/>
      <url>/2025/01/24/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E7%8E%8B%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%B8%89%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/c1f824f19f97d2c5a1ecb27e6ee461d8_720.jpg"></p><p>王也是浪了一学期，暑假也是拿到了梦想中的神机4070super, 拿到后本想着搞些大项目赚些money, 但暑假还是拿去体验游戏去了，体验了以前不敢开顶级画质的赛博朋克，地平线5等3a，现在流畅运行，只是现在很少有心静下来玩了。开学也是每天过着普普通通的每一天，周末出去玩玩逛逛啥的，没有搞大项目的冲动了，代码一天敲得很少了。直到某天去网上寻求一些码农兼职找到了机会，第一单60元10分钟就搞完了，正当我觉得赚钱如此简单时后面就开始难道我了，有sb客户找我定制app，想用100元做一个商业级的项目，还有1000的毕设我用模板做被发现…. 发现还是不好赚。但是上次的比赛奖金到了，加上我自己存的一些钱换了个4k160hz显示器，还是香(˵¯͒〰¯͒˵)，还是吃软饭舒服。寒假必须要搞点儿大东西出来，不然没机会了，暑假要去实习。<br>总之感觉这学期都在玩，必须要做出改变了，准备今年的大学生计设赛，必须要去到威海，还有蓝桥杯冲省一，这样才能去北京玩玩，准备将我的网站做一个uniapp端，并且往工具类方向走，spring cloud要啃完。</p><p>实际上寒假一回来就抱着新的显示器玩…..不行必须要做出改变，这可是弯道</p><p align="right">2025.1.24</p><p>最近有点儿对嵌入式单片机感兴趣，想买个树莓派4b，但是要400多…..</p><p align="right">---2025.2.7</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS+YARN集群部署（何平安原创）</title>
      <link href="/2024/11/26/HDFS%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BD%95%E5%B9%B3%E5%AE%89%E5%8E%9F%E5%88%9B%EF%BC%89/"/>
      <url>/2024/11/26/HDFS%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%EF%BC%88%E4%BD%95%E5%B9%B3%E5%AE%89%E5%8E%9F%E5%88%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="1-HDFS集群部署"><a href="#1-HDFS集群部署" class="headerlink" title="1.HDFS集群部署"></a>1.HDFS集群部署</h2><p>选用的是Centos7的虚拟机，但是Centos的yum仓库不再支持了，本人自己写了文章如何使用新yum库：<a href="https://ai.hepingan.top/2024/10/29/Centos%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E6%9C%8D%E5%8A%A1%E4%BA%86%EF%BC%9F%E6%96%B0yum%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/">Centos不再支持服务了？新yum仓库+docker配置教程 | 天香园</a></p><p>首先准备三台linux虚拟机，三台机子的角色如下：</p><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232058.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232058.png" alt="img"></a></p><p>上传hadoop安装包到node1，然后解压到&#x2F;export&#x2F;server&#x2F;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">tar -zxvf hadoop-3.3.4.tar.gz -C /export/server</span><br><span class="line">bash</span><br><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line"><span class="built_in">ln</span> -s /export/server/hadoop-3.3.4 hadoop</span><br><span class="line"><span class="built_in">cd</span> hadoop</span><br></pre></td></tr></table></figure><p>下面是Hadoop安装包的各个结构的介绍</p><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232347.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232347.png" alt="img"></a></p><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232407.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232407.png" alt="img"></a></p><p><strong>workers文件配置</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server/hadoop/etc/hadoop</span><br><span class="line">vim workers</span><br></pre></td></tr></table></figure><p>由于我已在系统上定义了node1,2,3的ip地址指向，故直接写入node1&#x2F;node2&#x2F;node3即可</p><p>配置hadoop-env.sh:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line"><span class="built_in">export</span> HADOOP_LOG_DIR=<span class="variable">$HADOOP_HOME</span>/logs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232435.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232435.png" alt="img"></a></p><p><strong>core-site.xml配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>131072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232543.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232543.png" alt="img"></a></p><p><strong>hdfs-site.xml配置</strong></p><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232600.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241126232600.png" alt="img"></a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir.perm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>700<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1,node2,node3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/dn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.handler.count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>268435456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153447.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153447.png" alt="img" style="zoom:50%;" /></a></p><p><strong>复制node1到node2，node3</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /export/server</span><br><span class="line">scp -r hadoop-3.3.4 node2:`<span class="built_in">pwd</span>`/</span><br><span class="line">scp -r hadoop-3.3.4 node3:`<span class="built_in">pwd</span>`/</span><br></pre></td></tr></table></figure><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153516.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153516.png" alt="img" style="zoom:50%;" /></a></p><p>配置环境变量</p><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153641.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153641.png" alt="img"></a></p><p>授权用户</p><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153712.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153712.png" alt="img"></a></p><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153732.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241127153732.png" alt="img" style="zoom:67%;" /></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - hadoop</span><br><span class="line"></span><br><span class="line">start-dfs.sh</span><br></pre></td></tr></table></figure><p>启动后可以浏览器输入node1:9870就可以访问hadoop页面了</p><p>当看到live nodes有3个时就证明配置成功了：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20250102211558.png"></p><h2 id="2-YARN集群部署"><a href="#2-YARN集群部署" class="headerlink" title="2.YARN集群部署"></a>2.YARN集群部署</h2><p>YARN的架构中除了核心角色，</p><p>即：ResourceManager：集群资源总管家</p><p>NodeManager：单机资源管家</p><p>还可以搭配2个辅助角色使得YARN集群运行更加稳定</p><p>代理服务器(ProxyServer)：Web Application Proxy Web应用程序代理</p><p>历史服务器(JobHistoryServer)： 应用程序历史信息记录服务</p><ul><li>目前项目暂未用到YARN的计算，Java后端的数据处理比YARN集群的计算能力实力相当更简单，且YARN集群启动时所占用的内存空间很大，作为普通开发者通常没有大内存的服务器。</li></ul><table><thead><tr><th><strong>组件</strong></th><th><strong>配置文件</strong></th><th><strong>启动进程</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>Hadoop HDFS</td><td>需修改</td><td>需启动NameNode作为主节点DataNode作为从节点SecondaryNameNode主节点辅助</td><td>分布式文件系统</td></tr><tr><td>Hadoop YARN</td><td>需修改</td><td>需启动ResourceManager作为集群资源管理者NodeManager作为单机资源管理者ProxyServer代理服务器提供安全性JobHistoryServer记录历史信息和日志</td><td>分布式资源调度</td></tr><tr><td>Hadoop MapReduce</td><td>需修改</td><td>无需启动任何进程MapReduce程序运行在YARN容器内</td><td>分布式数据计算</td></tr></tbody></table><p>hadoop用户登录，cd &#x2F;export&#x2F;server&#x2F;hadoop&#x2F;etc&#x2F;hadoop</p><p>mapred-env.sh文件，添加如下环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/export/server/jdk</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_JOB_HISTORYSERVER_HEAPSIZE=1000</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_ROOT_LOGGER=INFO,RFA</span><br></pre></td></tr></table></figure><p>mapred-site.xml文件，添加如下配置信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.intermediate-done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.done-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/mr-history/done<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$HADOOP_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yarn-env.sh文件，添加如下4行环境变量内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/export/server/jdk</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/export/server/hadoop</span><br><span class="line"><span class="built_in">export</span> HADOOP_CONF_DIR=<span class="variable">$HADOOP_HOME</span>/etc/hadoop</span><br><span class="line"><span class="comment"># export YARN_CONF_DIR=$HADOOP_HOME/etc/hadoop</span></span><br><span class="line"><span class="comment"># export YARN_LOG_DIR=$HADOOP_HOME/logs/yarn</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_LOG_DIR=<span class="variable">$HADOOP_HOME</span>/logs</span><br></pre></td></tr></table></figure><p>yarn-site.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">xml</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.web-proxy.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:8089<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>proxy server hostname and port<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Configuration to enable or disable log aggregation<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where intermediate data is written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data/nm-log<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma-separated list of paths on the local filesystem where logs are written.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.log.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>10800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Default time (in seconds) to retain log files on the NodeManager Only applicable if log-aggregation is disabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Shuffle service that needs to be set for Map Reduce applications.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再复制配置到node2，node3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh</span><br><span class="line">scp * node2:`<span class="built_in">pwd</span>`/</span><br></pre></td></tr></table></figure><p>常用的进程启动命令如下：一键启动YARN集群：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$HADOOP_HOME</span>/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><p>会基于yarn-site.xml中配置的yarn.resourcemanager.hostname来决定在哪台机器上启动resourcemanager</p><p>会基于workers文件配置的主机启动NodeManager</p><p>一键停止YARN集群：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$HADOOP_HOME</span>/sbin/stop-yarn.sh</span><br></pre></td></tr></table></figure><p>在当前机器，单独启动或停止进程</p><p>$HADOOP_HOME&#x2F;bin&#x2F;yarn –daemon start|stop resourcemanager|nodemanager|proxyserver</p><p>start和stop决定启动和停止可控制resourcemanager、nodemanager、proxyserver三种进程</p><p>历史服务器启动和停止</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$HADOOP_HOME</span>/bin/mapred –daemon start|stop historyserver</span><br></pre></td></tr></table></figure><p><a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241202205212.png"><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241202205212.png" alt="img"></a></p><p>node1:8088里点击nodes出现这种就成功了</p>]]></content>
      
      
      
        <tags>
            
            <tag> HDFS </tag>
            
            <tag> YARN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos不再支持服务了？新yum仓库+docker配置教程</title>
      <link href="/2024/10/29/Centos%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E6%9C%8D%E5%8A%A1%E4%BA%86%EF%BC%9F%E6%96%B0yum%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
      <url>/2024/10/29/Centos%E4%B8%8D%E5%86%8D%E6%94%AF%E6%8C%81%E6%9C%8D%E5%8A%A1%E4%BA%86%EF%BC%9F%E6%96%B0yum%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="yum配置"><a href="#yum配置" class="headerlink" title="yum配置"></a>yum配置</h2><p>当你输入yum repolist时报错并提示库为0：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241029221124.png"></p><p>说明你的centos yum不行了</p><p>直接复制下面的代码到面板就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://gitee.com/SuperManito/LinuxMirrors/raw/main/ChangeMirrors.sh)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>选择一个你喜欢的源：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241029221336.png"></p><p>然后等待安装ok就行</p><h2 id="docker换源教程"><a href="#docker换源教程" class="headerlink" title="docker换源教程"></a>docker换源教程</h2><p>安装docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>修改源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>按键盘上的 i 键，之后把下面的代码贴进去</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span> : </span><br><span class="line">[</span><br><span class="line"><span class="string">&quot;https://docker.m.daocloud.io&quot;</span>, </span><br><span class="line"><span class="string">&quot;https://noohub.ru&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://huecker.io&quot;</span>,</span><br><span class="line"><span class="string">&quot;https://dockerhub.timeweb.cloud&quot;</span>, </span><br><span class="line"><span class="string">&quot;https://docker.rainbond.cc&quot;</span></span><br><span class="line">] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>esc键，退出编辑模式。 </p><p>:wq 保存。 </p><p>重启</p><p>docker systemctl restart docker</p><p>Docker 常见命令：</p><p>删除镜像: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [name/id]</span><br></pre></td></tr></table></figure><p>拉取镜像:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull -d [name] </span><br></pre></td></tr></table></figure><p>启动容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [name]</span><br></pre></td></tr></table></figure><p>删除容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f [name]</span><br></pre></td></tr></table></figure><p>一键拉取启动容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name [name] -e [环境] -p [宿主机端口映射到容器的端口]</span><br></pre></td></tr></table></figure><p>进入容器内部:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [name] bash</span><br></pre></td></tr></table></figure><h2 id="黑马商城部署注意事项"><a href="#黑马商城部署注意事项" class="headerlink" title="黑马商城部署注意事项"></a>黑马商城部署注意事项</h2><ul><li><p>确保在同一个network网络环境下</p></li><li><p>确保nginx.conf里的api的<a href="http://hmall:8080为你java后端的名字">http://hmall:8080为你java后端的名字</a></p></li><li><p>DockerFile和jar包都要上传</p><p>后端部署：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name hmall --network hmall -p 8080:8080 hmall</span><br></pre></td></tr></table></figure><p>前端nginx:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name nginx \</span><br><span class="line">  -p 18080:18080 \</span><br><span class="line">  -p 18081:18081 \</span><br><span class="line">  -v /root/nginx/html:/usr/share/nginx/html \</span><br><span class="line">  -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf \</span><br><span class="line">  --network hmall \</span><br><span class="line">  nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于electron+vue的桌面应用基础笔记</title>
      <link href="/2024/10/15/IT%E7%AC%94%E8%AE%B0/%E5%9F%BA%E4%BA%8Eelectron-vue%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/10/15/IT%E7%AC%94%E8%AE%B0/%E5%9F%BA%E4%BA%8Eelectron-vue%E7%9A%84%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先创建一个正常的vue项目，然后 vue add electron-builder</p><p>选择13.0</p><p><img src="https://segmentfault.com/img/bVcTmOU" alt="img"></p><p>如果出现下面这种就证明已经安装好了，一般需要2分钟</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241015215100.png"></p><p>如果时间太长安装失败可以试试cnpm install</p><p><img src="https://segmentfault.com/img/bVcTmOV" alt="img"></p><p><img src="https://segmentfault.com/img/bVcTmOW" alt="img"></p><p><img src="https://segmentfault.com/img/bVcTmOX" alt="img"></p><blockquote><p>安装 完成后 我们使用 npm run electron:serve 运行项目 如果依旧是报错的。请耐心往下看完</p></blockquote><p><img src="https://segmentfault.com/img/bVcTmOY" alt="img"></p><p>此处 我们需要打开项目的目录 找到 node_modules 下的 electron 。 删除 这个文件以后 重新使用 cnpm install</p><p><img src="https://segmentfault.com/img/bVcTmOZ" alt="img"></p><p>至此。 electron 应用 已经搭建完成。 我们使用 npm run electron:serve 进行启动项目 ( windows 与 imac 一样 )</p><p><img src="https://segmentfault.com/img/bVcTmO0" alt="img"></p><p>虽然但是我全程没有报错</p><h2 id="项目修改"><a href="#项目修改" class="headerlink" title="项目修改"></a>项目修改</h2><blockquote><p>相比于 基础 vue 项目 我们可以发现在目录中 多出一个 background.js 文件</p></blockquote><p><img src="https://segmentfault.com/img/bVcTmO1" alt="img"></p><blockquote><p>此处可以 配置 electron 应用的一些设置。 如窗口大小 、 是否可以缩放、是否可以移动窗口等等</p></blockquote><p><img src="https://segmentfault.com/img/bVcTmO2" alt="img"></p><p>注意：打开和 关闭 开发者工具 请点击。 操作栏 &gt; view &gt; Toggle Developer tools</p><h2 id="打包-electron-应用"><a href="#打包-electron-应用" class="headerlink" title="打包 electron 应用"></a>打包 electron 应用</h2><blockquote><p>打包应用 使用 npm run electron:build 进行打包 （ imac 系统 和 windows系统 一样使用这个 ）</p></blockquote><blockquote><p>此处 以 iMac 为例 （ 下面会有 windows 解决方案 ）</p></blockquote><p><img src="https://segmentfault.com/img/bVcTmO3" alt="img"></p><blockquote><p>当我们看到。 Build complete ! 时 就说明 打包成功 可以查看 dist_electron &#x2F; mac 里面就是打包好的应用 （ 苹果系统 ）</p></blockquote><p><strong>windows</strong> <strong>解决方案</strong></p><ul><li>打包 windows 应用时 我们需要将 整个项目的源码 上传到 windows 电脑上</li><li>上传到 windows 电脑上后 同样需要安装 cnpm 不然 electron 是安装不上的</li><li>打开项目目录 删除掉 node_modules 重新 cnpm install</li><li>如果还是无法打包 删除掉 node_modules &#x2F; electron 目录 重新 cnpm install</li><li>然后运行 npm run electron:build 进行打包</li></ul><p>Electron 官网地址 点此 : <a href="https://link.segmentfault.com/?enc=0EsiAJHQlJ2ASTmG9k0oXA==.z3eI2kK0HHhzkv5JVflgG9gV1bZFKLJ203ZEWxW/xPg=">electron 官方地址</a></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uniapp项目模板</title>
      <link href="/2024/09/29/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/Uniapp%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/"/>
      <url>/2024/09/29/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/Uniapp%E9%A1%B9%E7%9B%AE%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="项目目录架构："><a href="#项目目录架构：" class="headerlink" title="项目目录架构："></a>项目目录架构：</h3><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20240929112415.png"></p><h3 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//GET请求</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">url, data = &#123;&#125;, header = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;http://127.0.0.1:8601&quot;</span>+url, data, header);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//POST请求</span></span><br><span class="line">  <span class="title function_">post</span>(<span class="params">url, data = &#123;&#125;, header = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&quot;http://127.0.0.1:8601&quot;</span>+url, data, header);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//封装uni.request</span></span><br><span class="line">  <span class="title function_">request</span>(<span class="params">method, url, data, header</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line">        <span class="attr">method</span>: method,</span><br><span class="line">        <span class="attr">data</span>: data,</span><br><span class="line">        <span class="attr">header</span>: header,</span><br><span class="line">        <span class="attr">success</span>: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 这里可以对响应结果进行预处理</span></span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(res.<span class="property">data</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这里可以根据实际情况处理错误</span></span><br><span class="line">            <span class="title function_">reject</span>(res);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 这里处理请求失败</span></span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改下http的链接就行，这是向后端发送请求的封装</p><h4 id="使用封装类例子"><a href="#使用封装类例子" class="headerlink" title="使用封装类例子"></a><strong>使用封装类例子</strong></h4><ul><li>GET（后端使用@RequestParam接收）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="title function_">get</span>(<span class="string">&#x27;/seat/getList?hall=&#x27;</span>+hall).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">list.<span class="property">value</span> = res.<span class="property">data</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>GET(后端使用@PathVariable接收):</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="title function_">get</span>(<span class="string">&#x27;/seat/getList/&#x27;</span>+hall).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">list.<span class="property">value</span> = res.<span class="property">data</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>POST（后端使用@RequestBody接收）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> form = <span class="title function_">ref</span>(&#123;</span><br><span class="line"><span class="string">&quot;line&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;vertical&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&quot;hall&quot;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">submit</span>(<span class="params"></span>)&#123;</span><br><span class="line">request.<span class="title function_">post</span>(<span class="string">&#x27;/seat/addHall&#x27;</span>,form.<span class="property">value</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(res === <span class="string">&quot;ok&quot;</span>)&#123;</span><br><span class="line">toast.<span class="title function_">show</span>(<span class="string">&#x27;添加成功&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">toast.<span class="title function_">show</span>(<span class="string">&#x27;添加失败，或许已经有重复数据了?&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 配置路径别名</span></span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">devServer</span>: &#123;</span><br><span class="line">            <span class="comment">// 调试时允许内网穿透，让外网的人访问到本地调试的H5页面</span></span><br><span class="line">            <span class="attr">disableHostCheck</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// productionSourceMap: false,</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #ifndef VUE3</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./uni.promisify.adaptor&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">mpType</span> = <span class="string">&#x27;app&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  ...<span class="title class_">App</span></span><br><span class="line">&#125;)</span><br><span class="line">app.$mount()</span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #ifdef VUE3</span></span><br><span class="line"><span class="keyword">import</span> &#123; createSSRApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">createSSRApp</span>(<span class="title class_">App</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// #endif</span></span><br></pre></td></tr></table></figure><p>就是HBuilder默认创建的</p><h3 id="pages-json"><a href="#pages-json" class="headerlink" title="pages.json"></a>pages.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;easycom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;autoscan&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;custom&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;^wd-(.*)&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wot-design-uni/components/wd-$1/wd-$1.vue&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">//pages数组中第一项表示应用启动页，参考：https://uniapp.dcloud.io/collocation/pages</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/index&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;enablePullDownRefresh&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/index/test&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;globalStyle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uni-app&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;backgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#F8F8F8&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;uniIdRouter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>第一个 easycom是引入的一个组件库：<a href="https://wot-design-uni.cn/">Wot Design Uni | 一个基于Vue3+TS开发的uni-app组件库，提供70+高质量组件，支持暗黑模式、国际化和自定义主题。 (wot-design-uni.cn)</a></p><p>其他的就是页面路由了,路由跳转：uni.navigateTo({url:”&#x2F;pages&#x2F;index&#x2F;test”})</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般会vue3就会uniapp了，反正我一天就可以上手写项目了.</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的游戏图库</title>
      <link href="/2024/09/05/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F%E5%9B%BE%E5%BA%93/"/>
      <url>/2024/09/05/%E6%88%91%E7%9A%84%E6%B8%B8%E6%88%8F%E5%9B%BE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>问就是图床</p><h2 id="黑神话悟空"><a href="#黑神话悟空" class="headerlink" title="黑神话悟空"></a>黑神话悟空</h2><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240831-004739.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240903-230453.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240904-033427.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240904-034003.png"></p><p>就你一周目的时候欺负我啊? !</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/1.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240830-181651.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240831-001928.png"></p><hr><h2 id="原神"><a href="#原神" class="headerlink" title="原神"></a>原神</h2><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240905-003507.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240903-035128.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240903-032703.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/QQ20240904-225615.png"></p><p>​<strong><u>江南好</u> <u>风景旧曾谙</u> 下次出去远方旅游就去江浙一带的江南古镇吧</strong></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20240914171350.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20240928174051.png"></p><hr><h2 id="赛博朋克2077"><a href="#赛博朋克2077" class="headerlink" title="赛博朋克2077"></a>赛博朋克2077</h2><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/photomode_27092024_134948.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/photomode_27092024_115438.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/photomode_11092024_014706.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/photomode_11092024_014857.png"></p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/photomode_11092024_003638.png"></p><h2 id="AE作品"><a href="#AE作品" class="headerlink" title="AE作品"></a>AE作品</h2><p>(tips: 视频播放不了右键选择显示所有控件)</p><video src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/%E5%9B%BE%E5%B1%82%202-girl_ears_hood_1079406_2560x1440.mp4" /><p>&lt;video src&#x3D;”<a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/girl_dress_jewelry_1168576_2048x1152.mp4">https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/girl_dress_jewelry_1168576_2048x1152.mp4</a>“ &#x2F; &gt;</p><hr><h2 id="Blender练习"><a href="#Blender练习" class="headerlink" title="Blender练习"></a>Blender练习</h2><p>(tips: 视频播放不了右键选择显示所有控件)</p><video src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/0001-0260.mkv" />]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 娱乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024.9月最新百度网盘不限速下载教程</title>
      <link href="/2024/08/31/2024-9%E6%9C%88%E6%9C%80%E6%96%B0%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%E4%B8%8B%E8%BD%BD%E6%95%99%E7%A8%8B/"/>
      <url>/2024/08/31/2024-9%E6%9C%88%E6%9C%80%E6%96%B0%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8D%E9%99%90%E9%80%9F%E4%B8%8B%E8%BD%BD%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>2024.9月最新百度网盘破解</p><p>使用motrix软件辅助，软件下载：</p><p>官网：<a href="https://motrix.app/">Motrix</a></p><p>123网盘下载：<a href="https://www.123pan.com/s/3JBrVv-rW70A.html">Motrix-Setup-1.8.19.exe官方版下载丨最新版下载丨绿色版下载丨APP下载-123云盘 (123pan.com)</a></p><p>下载安装进入设置选择进阶设置，将RPC监听端口改为6800：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20240831045707.png"></p><p>进入网站：<a href="https://jx.os3.top/user">前台解析中心 | 网盘解析-公益站点 (os3.top)</a></p><p>粘贴分享的链接和密码，然后点击 获取&#x2F;刷新列表，下方选择你要下载的文件，点击批量解析，然后点击发送Aria2就可以不限速下载了。</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20240831050041.png"></p><h2 id="在线播放无损视频"><a href="#在线播放无损视频" class="headerlink" title="在线播放无损视频"></a>在线播放无损视频</h2><p>百度网盘最新在线播放无损画质视频app下载：</p><p><a href="https://www.123pan.com/s/ra8CTd-0fEl?%E6%8F%90%E5%8F%96%E7%A0%81:8RNp">https://www.123pan.com/s/ra8CTd-0fEl?提取码:8RNp</a></p><p>电脑的话就自己安个模拟器</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024企业级项目《云岚到家》开发日志</title>
      <link href="/2024/08/12/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/2024%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E3%80%8A%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6%E3%80%8B%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/"/>
      <url>/2024/08/12/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/2024%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%E3%80%8A%E4%BA%91%E5%B2%9A%E5%88%B0%E5%AE%B6%E3%80%8B%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<ul><li><p>2024.8.11成功搭建项目并完成第一个接口区域管理</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20240812051015.png"></p></li></ul><p>小结：又是一个微服务项目，这下熟悉了微服务的流程，之前搭建学成在线项目的时候搭了好久，现在有经验了也是1个小时就搞定了。与单体架构大致不同的就是把一个项目拆分成多个模块管理，向我这里的模块就有好个：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20240812051338.png"></p><p>微服务的一些组件如nacos就是一个公共的配置信息管理的东东，在企业在一般只有leader才有管理权限，普通打工人就只能读取配置了，mysql,redis啥的也都放在docker 容器里，不过企业的话估计云服务器用得多一些吧。还有就是网关统一代理其他微服务，不错<del>代码的话前面比较简单就普通的增删改查，没啥技术含量。听说后面的抢订单模块有点儿难</del></p><blockquote><p><strong>防止忘掉启动事项</strong>：项目启动先启动虚拟机，账号密码：root&#x2F;centos，进去后</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> docker </span><br><span class="line">docker <span class="built_in">start</span> mysql</span><br><span class="line">docker <span class="built_in">start</span> redis</span><br><span class="line">docker restart nacos</span><br></pre></td></tr></table></figure><p>启动网关项目</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云岚到家 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的故事（大二下）</title>
      <link href="/2024/08/02/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8B%EF%BC%89/"/>
      <url>/2024/08/02/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-hh.oss-cn-hangzhou.aliyuncs.com/undefinedimage-20240802064757078.png" alt="image-20240802064757078"></p><p>又是冲冲一学期，惯例又来了，又是在火车上写一学期总结。</p><p>这学期真的过得很快，感觉上一秒还在爬武功山，还在长沙看毛爷爷，还在和女朋友爬缙云山….. 可能是这学期任务比较重吧。寒假AIGC破壁社的朋友发了我份gpt的模板然后我就感兴趣改了起来，优化弄成了自己的gpt, 我们破壁社也在后来有了自己的小程序和公司企业，打算暑假重操旧业把它弄起来，搭个官网什么的。后来报名了全国大学生计算机设计大赛，作品就是那个gpt，自己加了几个模块没想到还进了省二入了国赛，虽然后面因为种种原因齐国赛了，至少还是可以肯定我的水平的(害得我天天没事的时候就写这破逼玩意儿最后又不打国赛了.ƪ(˘⌣˘)ʃ)，自己还是凭本事写了很多东西的，最近又和朋友报名了龙智杯，是个ai算法比赛对我来说还是有点儿难度的，期末的时候我一个人也是养活十几个人，把我设计分享给别人或帮做点儿内容。不过这学期新东西学的好像很少，可能是不知道学啥了吧一直都在实操了。暑假想找个实习结果一看全是需要工作经验，要不就是应届生要求，所以技术再好别人都不会看你的。还是老老实实去发展我的吧。</p><p>暑假买了新电脑终于可以捣鼓Ai了.        –2024.8.2</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最新AI代码助手通义灵码，万亿数据在线搜索解读，拳打CodeGeeX</title>
      <link href="/2024/07/25/Ai%E7%A7%91%E6%8A%80/%E6%9C%80%E6%96%B0AI%E4%BB%A3%E7%A0%81%E5%8A%A9%E6%89%8B%E9%80%9A%E4%B9%89%E7%81%B5%E7%A0%81%EF%BC%8C%E4%B8%87%E4%BA%BF%E6%95%B0%E6%8D%AE%E5%9C%A8%E7%BA%BF%E6%90%9C%E7%B4%A2%E8%A7%A3%E8%AF%BB%EF%BC%8C%E6%8B%B3%E6%89%93CodeGeeX/"/>
      <url>/2024/07/25/Ai%E7%A7%91%E6%8A%80/%E6%9C%80%E6%96%B0AI%E4%BB%A3%E7%A0%81%E5%8A%A9%E6%89%8B%E9%80%9A%E4%B9%89%E7%81%B5%E7%A0%81%EF%BC%8C%E4%B8%87%E4%BA%BF%E6%95%B0%E6%8D%AE%E5%9C%A8%E7%BA%BF%E6%90%9C%E7%B4%A2%E8%A7%A3%E8%AF%BB%EF%BC%8C%E6%8B%B3%E6%89%93CodeGeeX/</url>
      
        <content type="html"><![CDATA[<p>最新的Ai代码注释工具“通义灵码”也是发布了，小何也来蹭蹭热度~</p><p>官网：<a href="https://tongyi.aliyun.com/lingma">通义灵码_智能编码助手_AI编程-阿里云 (aliyun.com)</a></p><p>应用或插件市场里搜索通义灵码就行</p><blockquote><h3 id="在-Visual-Studio-Code-中安装通义灵码"><a href="#在-Visual-Studio-Code-中安装通义灵码" class="headerlink" title="在 Visual Studio Code 中安装通义灵码"></a><img src="https://img.alicdn.com/imgextra/i4/O1CN012S9NwM1OqkmCghDCB_!!6000000001757-2-tps-96-93.png" alt="img" style="zoom:25%;" />在 Visual Studio Code 中安装通义灵码</h3><p>直接安装步骤如下：</p><p>唤起 Visual Studio Code 插件市场直接安装，安装后请重启 IDE，即可开启智能编码之旅。</p><p>立即安装</p><p>手动安装步骤如下：</p><p>步骤1</p><p>已安装 Visual Studio Code 的情况下，在侧边导航上点击扩展。</p><p><img src="https://img.alicdn.com/imgextra/i3/O1CN01aP4Wo823ZiHsreAM7_!!6000000007270-2-tps-1380-592.png" alt="img"></p><p>步骤2</p><p>搜索通义灵码（TONGYI Lingma），找到通义灵码后点击安装。</p><p><img src="https://img.alicdn.com/imgextra/i3/O1CN01WnQgRP1ZMUQ0hDhCN_!!6000000003180-2-tps-1260-552.png" alt="img"></p><p>步骤3</p><p>重启 Visual Studio Code，重启成功后登录阿里云账号，即刻开启智能编码之旅。</p></blockquote><h3 id="在-JetBrains-IDEs-中安装通义灵码-以-IntelliJ-IDEA-为例"><a href="#在-JetBrains-IDEs-中安装通义灵码-以-IntelliJ-IDEA-为例" class="headerlink" title="在 JetBrains IDEs 中安装通义灵码 以 IntelliJ IDEA 为例"></a><img src="https://img.alicdn.com/imgextra/i3/O1CN01Q9RGID1V5lS9mq1Gf_!!6000000002602-2-tps-96-96.png" alt="img" style="zoom:25%;" />在 JetBrains IDEs 中安装通义灵码 以 IntelliJ IDEA 为例</h3><ul><li>步骤1</li></ul><p>已安装 IntelliJ IDEA 的情况下：</p><p><img src="https://img.alicdn.com/imgextra/i2/O1CN01xaMBv61nVYqMSMUN5_!!6000000005095-2-tps-52-62.png" alt="img">IntelliJ IDEA 菜单下点击设置</p><p><img src="https://img.alicdn.com/imgextra/i4/O1CN01yhRyhg1yXoZAp6U6w_!!6000000006589-2-tps-52-56.png" alt="img">文件菜单下点击设置</p><p><img src="https://img.alicdn.com/imgextra/i3/O1CN01oULdGZ1prCnL5Jk02_!!6000000005413-2-tps-1324-534.png" alt="img"></p><ul><li>步骤2</li></ul><p>方式一：从插件市场安装点击导航-插件，打开应用市场，搜索通义灵码（TONGYI Lingma），找到通义灵码后点击安装。</p><p><img src="https://img.alicdn.com/imgextra/i2/O1CN01GFrBe11WrE9UI0scW_!!6000000002841-2-tps-1260-516.png" alt="img"></p><p>方式二：下载离线包安装1. 下载 JetBrains IDEs 的 zip 安装包；<img src="https://img.alicdn.com/imgextra/i3/O1CN01ial9Jy1WGaQj8wGPo_!!6000000002761-2-tps-80-80.png" alt="img" style="zoom:25%;" />下载离线安装包<br>\2. 点击导航-插件，点击设置图标，下拉菜单中单击从本地安装插件，<br>  选择下载的 zip 文件后安装。</p><p><img src="https://img.alicdn.com/imgextra/i4/O1CN01u7vhds1STAqr9ztZb_!!6000000002247-0-tps-1260-514.jpg" alt="img"></p><ul><li>步骤3</li></ul><p>重启 IntelliJ IDEA，重启成功后登录阿里云账号，即刻开启智能编码之旅。</p><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>选中一个单词按住Ctrl+Shift+S可以快速查询该单词的用法</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/492bef6dcc3c2c6171e24d8371ed1f96.png"></p><p>​                                                           </p><p>​                                                                                                           </p><p>​                                                                    </p><p>​                                                                                                                                 </p>]]></content>
      
      
      <categories>
          
          <category> Ai科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot+vue3项目搭建时经常用到的类</title>
      <link href="/2024/07/22/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/springboot-vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%97%B6%E7%BB%8F%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E7%B1%BB/"/>
      <url>/2024/07/22/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/springboot-vue3%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%97%B6%E7%BB%8F%E5%B8%B8%E7%94%A8%E5%88%B0%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>模板下载：<a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/muban.zip">https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/muban.zip</a></p><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h3 id="Controller层注解"><a href="#Controller层注解" class="headerlink" title="Controller层注解"></a>Controller层注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &#123;&quot;*&quot;, &quot;null&quot;&#125;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/emp&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br></pre></td></tr></table></figure><h3 id="Do类注解例"><a href="#Do类注解例" class="headerlink" title="Do类注解例"></a>Do类注解例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long user_id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long frequency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long isVip;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串处理类"><a href="#字符串处理类" class="headerlink" title="字符串处理类"></a>字符串处理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hepingan.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串处理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  <span class="doctag">@github</span> dulaiduwang003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringUtils</span> <span class="keyword">extends</span> <span class="title class_">org</span>.apache.commons.lang3.StringUtils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isLegal</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !str.contains(<span class="string">&quot;|&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">notEmpty</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(str) &amp;&amp; str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">join</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> join(list.toArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; String <span class="title function_">join</span><span class="params">(List&lt;T&gt; list, String separator)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> join(list.toArray(), separator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Redis信息类"><a href="#Redis信息类" class="headerlink" title="Redis信息类"></a>Redis信息类</h3><p>要搭配下面的Redis配置类一起使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hepingan.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.SessionCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ZSetOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  <span class="doctag">@github</span> dulaiduwang003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">getRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> redisTemplate.getExpire(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> timeout, <span class="keyword">final</span> TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.expire(key, timeout, unit);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">increment</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delKey</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.delete(key);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">delKeys</span><span class="params">(<span class="keyword">final</span> Collection&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.delete(keys);</span><br><span class="line">        <span class="keyword">return</span> ret == <span class="literal">null</span> ? <span class="number">0</span> : ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValueTimeout</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value, <span class="keyword">final</span> <span class="type">long</span> timeout)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasHashKey</span><span class="params">(<span class="keyword">final</span> String key, String hkey)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">ret</span> <span class="operator">=</span> redisTemplate.opsForHash().hasKey(key, hkey);</span><br><span class="line">        <span class="keyword">return</span> ret != <span class="literal">null</span> &amp;&amp; ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashPut</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hashPutAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Map&lt;String, Object&gt; values)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hashGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String hKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hashGetAll</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">hashMultiGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().multiGet(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hashExists</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">hashDeleteKeys</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; hKeys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, hKeys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hashDelete</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setDel</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">getSetAll</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetSetAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().add(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zsetSetGetSource</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().score(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">zsetIncrementScore</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value, <span class="keyword">final</span> Double increment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().incrementScore(key, value, increment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">zsetSet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object values, <span class="keyword">final</span> Double source)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">add</span> <span class="operator">=</span> redisTemplate.opsForZSet().add(key, values, source);</span><br><span class="line">        <span class="keyword">return</span> add;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; zsetReverseRangeWithScores(<span class="keyword">final</span> String key, <span class="keyword">final</span> Long start, <span class="keyword">final</span> Long end) &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRangeWithScores(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">zsetReverseRange</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Long start, <span class="keyword">final</span> Long end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet().reverseRange(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">selfIncrease</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                operations.multi();</span><br><span class="line">                <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> operations.opsForValue().increment(key);</span><br><span class="line">                operations.exec();</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">selfIncreaseSource</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">SessionCallback</span>&lt;Double&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Double <span class="title function_">execute</span><span class="params">(RedisOperations operations)</span> <span class="keyword">throws</span> DataAccessException &#123;</span><br><span class="line">                operations.multi();</span><br><span class="line">                <span class="type">Double</span> <span class="variable">count</span> <span class="operator">=</span> operations.opsForZSet().incrementScore(key, value, <span class="number">1</span>);</span><br><span class="line">                operations.exec();</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetDelAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">zsetDel</span><span class="params">(<span class="keyword">final</span> String key, Object values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForZSet().remove(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPush</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object value)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">doesItExist</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPushAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Collection&lt;Object&gt; values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">listPushAll</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        <span class="keyword">return</span> count == <span class="literal">null</span> ? <span class="number">0</span> : count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">listGet</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> <span class="type">int</span> start, <span class="keyword">final</span> <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">keySize</span><span class="params">(<span class="keyword">final</span> String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Redis配置类"><a href="#Redis配置类" class="headerlink" title="Redis配置类"></a>Redis配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hepingan.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureBefore;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis参数配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  <span class="doctag">@github</span> dulaiduwang003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(RedisAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Jackson2JsonRedisSerializer&lt;Object&gt; <span class="title function_">jackson2JsonRedisSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        om.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">        om.registerModule(timeModule());</span><br><span class="line">        serializer.setObjectMapper(om);</span><br><span class="line">        <span class="keyword">return</span> serializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> StringRedisSerializer <span class="title function_">stringRedisSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory lettuceConnectionFactory,</span></span><br><span class="line"><span class="params">                                                       Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer,</span></span><br><span class="line"><span class="params">                                                       StringRedisSerializer stringRedisSerializer)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(lettuceConnectionFactory);</span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">(Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer,</span></span><br><span class="line"><span class="params">                                                           RedisSerializer&lt;String&gt; redisSerializer)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">3600</span> * <span class="number">24</span> * <span class="number">10</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory,</span></span><br><span class="line"><span class="params">                                     RedisSerializer&lt;String&gt; redisSerializer,</span></span><br><span class="line"><span class="params">                                     Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer,</span></span><br><span class="line"><span class="params">                                     RedisCacheConfiguration redisCacheConfiguration)</span> &#123;</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(redisCacheConfiguration)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JavaTimeModule <span class="title function_">timeModule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JavaTimeModule</span> <span class="variable">timeModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>();</span><br><span class="line">        timeModule.addDeserializer(LocalDate.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>)));</span><br><span class="line">        timeModule.addDeserializer(LocalDateTime.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">        timeModule.addSerializer(LocalDate.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd&quot;</span>)));</span><br><span class="line">        timeModule.addSerializer(LocalDateTime.class,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">        <span class="keyword">return</span> timeModule;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Bean处理类"><a href="#Bean处理类" class="headerlink" title="Bean处理类"></a>Bean处理类</h3><p>(很少用)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hepingan.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  <span class="doctag">@github</span> dulaiduwang003</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">BeanUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; T <span class="title function_">copyClassProperTies</span><span class="params">(S source, Class&lt;T&gt; target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(JSON.toJSONString(source), target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">copyArrayProperTies</span><span class="params">(Object source, Class&lt;T&gt; target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseArray(JSON.toJSONString(source), target);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S, T&gt; T <span class="title function_">copyClassProperTiesWriteDate</span><span class="params">(S source, Class&lt;T&gt; target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(</span><br><span class="line">                JSONObject.toJSONStringWithDateFormat(source, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, SerializerFeature.WriteDateUseDateFormat), target</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Copy array proper ties write date list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    the type parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source the source</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target the target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">copyArrayProperTiesWriteDate</span><span class="params">(Object source, Class&lt;T&gt; target)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseArray(</span><br><span class="line">                JSONObject.toJSONStringWithDateFormat(source, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, SerializerFeature.WriteDateUseDateFormat), target</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">codec:</span></span><br><span class="line">    <span class="attr">max-in-memory-size:</span> <span class="number">1048576</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10240MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">10240MB</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">H_Java</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="comment"># redis??</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">200</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">database:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">  <span class="comment"># mysql??</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/h?useUnicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;allowMultiQueries=true&amp;useSSL=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxx</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">token</span></span><br><span class="line">  <span class="attr">active-timeout:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># token ?????????uuid?simple-uuid?random-32?random-64?random-128?tik?</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">uuid</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8601</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">&#x27;null&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阿里OSS</span></span><br><span class="line"><span class="attr">ali-oss:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">&#x27;oss-cn-hangzhou.aliyuncs.com&#x27;</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">domain:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Result前后端返回类"><a href="#Result前后端返回类" class="headerlink" title="Result前后端返回类"></a>Result前后端返回类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.hepingan.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_SUCCESS</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CODE_ERROR</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setCode(code);</span><br><span class="line">        <span class="built_in">this</span>.setMsg(msg);</span><br><span class="line">        <span class="built_in">this</span>.setData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Map&lt;String, ?&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer) <span class="built_in">this</span>.get(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (String) <span class="built_in">this</span>.get(<span class="string">&quot;msg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.get(<span class="string">&quot;data&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.put(<span class="string">&quot;code&quot;</span>, code);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.put(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">set</span><span class="params">(String key, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.put(key, data);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setMap</span><span class="params">(Map&lt;String, ?&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var2</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (var2.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> (String) var2.next();</span><br><span class="line">            <span class="built_in">this</span>.put(key, map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_SUCCESS, <span class="string">&quot;操作成功&quot;</span>, (Object) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">ok</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_SUCCESS, msg, (Object) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">code</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, (String) <span class="literal">null</span>, (Object) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">data</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_SUCCESS, <span class="string">&quot;ok&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_ERROR, <span class="string">&quot;操作失败&quot;</span>, (Object) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(<span class="keyword">final</span> String msg, <span class="keyword">final</span> Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, msg, (Object) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(CODE_ERROR, msg, (Object) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg, <span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, msg, (Object) <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">build</span><span class="params">(<span class="type">int</span> code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code, msg, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;code\&quot;: &quot;</span> + <span class="built_in">this</span>.getCode() + <span class="string">&quot;, \&quot;msg\&quot;: &quot;</span> + <span class="built_in">this</span>.transValue(<span class="built_in">this</span>.getMsg()) + <span class="string">&quot;, \&quot;data\&quot;: &quot;</span> + <span class="built_in">this</span>.transValue(<span class="built_in">this</span>.getData()) + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">transValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value <span class="keyword">instanceof</span> String ? <span class="string">&quot;\&quot;&quot;</span> + value + <span class="string">&quot;\&quot;&quot;</span> : String.valueOf(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一般springboot流行maven配置类，即pom-xml"><a href="#一般springboot流行maven配置类，即pom-xml" class="headerlink" title="一般springboot流行maven配置类，即pom.xml"></a>一般springboot流行maven配置类，即pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.hepingan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>H_Java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>H_Java<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>H_Java<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.ipokerface<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snowflake-id-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.20.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.35.107.ALL<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.aliyun.oss/aliyun-sdk-oss --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.17.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.nanohttpd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nanohttpd-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.ipokerface<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>snowflake-id-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-redis-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.35.0.RC<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.35.0.RC<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;gson&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--            &lt;artifactId&gt;httpclient&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.75<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><p>一般vue3项目目录预览：</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page1/PixPin_2024-07-22_03-40-18.png"></p><h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/theme-chalk/display.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [key, component] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="title class_">ElementPlusIconsVue</span>)) &#123;</span><br><span class="line">    app.<span class="title function_">component</span>(key, component)</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><p>routes里一个花括号就是一个路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;cancelArr&#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/BSideRequest&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Index&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/EmployeeView.vue&#x27;</span>),</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;UserView&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;../views/UserView.vue&#x27;</span>),</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to) =&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO 页面切换中断所有请求</span></span><br><span class="line">    cancelArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cancel, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">cancel</span>()</span><br><span class="line">        cancelArr.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 设置浏览器Title</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = (to.<span class="property">meta</span>.<span class="property">title</span> ? to.<span class="property">meta</span>.<span class="property">title</span> : <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27; - H公司管理系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="BSideRequest-js"><a href="#BSideRequest-js" class="headerlink" title="BSideRequest.js"></a>BSideRequest.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 请求取消令牌列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> cancelArr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_BASE_API</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">6</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 请求拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 请求头</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 添加取消令牌</span></span><br><span class="line">    config.<span class="property">cancelToken</span> = <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="function"><span class="params">cancel</span> =&gt;</span> &#123;</span><br><span class="line">        cancelArr.<span class="title function_">push</span>(cancel)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODO 响应拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">401</span>) &#123;</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">            location.<span class="title function_">reload</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> res.<span class="property">msg</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&#x27;服务调用失败，正在紧急处理，请稍后使用。&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="环境配置-env-development"><a href="#环境配置-env-development" class="headerlink" title="环境配置.env.development"></a>环境配置.env.development</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># just a flag</span><br><span class="line">ENV = &#x27;development&#x27;</span><br><span class="line"></span><br><span class="line"># HTTP请求基类</span><br><span class="line">VUE_APP_BASE_API = &#x27;http://localhost:8601&#x27;</span><br><span class="line"></span><br><span class="line"># 长连接基类</span><br><span class="line">VUE_APP_WSS = &#x27;ws://localhost:8601&#x27;</span><br><span class="line"></span><br><span class="line"># 图片服务器域名</span><br><span class="line">VUE_APP_IMAGE = &#x27;https://img-hepingan.oss-cn-hangzhou.aliyuncs.com&#x27;</span><br><span class="line"></span><br><span class="line">VUE_APP_RATE = 20</span><br><span class="line"></span><br><span class="line">VUE_APP_MEMORY = 4</span><br><span class="line"></span><br><span class="line">VUE_APP_MEMORY_SIZE = 2000</span><br></pre></td></tr></table></figure><h3 id="BSideApi-js格式"><a href="#BSideApi-js格式" class="headerlink" title="BSideApi.js格式"></a>BSideApi.js格式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/BSideRequest&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">GetSdModelPage</span>(<span class="params">pageNum,prompt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;emp/get/page?pageNum=&#x27;</span>+ pageNum +<span class="string">&#x27;&amp;prompt=&#x27;</span>+ prompt,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">GetEmployeeList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;emp/get/emp&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的vue项目里有的库：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@element-plus/icons-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.7.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;core-js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;element-plus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.7.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;v-md-editor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vuex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><strong>即axios,element-plus,v-md-editor,vuex,vue-router，推荐安装不然上面有些用不了</strong></p><p>css库推荐：<a href="https://www.tailwindcss.cn/">Tailwind CSS - 只需书写 HTML 代码，无需书写 CSS，即可快速构建美观的网站。 | TailwindCSS中文文档 | TailwindCSS中文网</a></p><p>maven仓库：<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a></p><p>redis教程：<a href="https://blog.csdn.net/weixin_44893902/article/details/123087435">Window下Redis的安装和部署详细图文教程（Redis的安装和可视化工具的使用）_redis安装-CSDN博客</a></p><p>element-plus：<a href="https://element-plus.org/zh-CN/">一个 Vue 3 UI 框架 | Element Plus (element-plus.org)</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十几秒一个网站？Droa一键生成</title>
      <link href="/2024/05/31/Ai%E7%A7%91%E6%8A%80/%E5%8D%81%E5%87%A0%E7%A7%92%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%EF%BC%9FDroa%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90/"/>
      <url>/2024/05/31/Ai%E7%A7%91%E6%8A%80/%E5%8D%81%E5%87%A0%E7%A7%92%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%EF%BC%9FDroa%E4%B8%80%E9%94%AE%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>今天为大家推荐这一款 AI 网站生成神器 <a href="https://www.uisdc.com/tag/dora-ai">Dora AI</a>，它是新推出的一个无代码网站构建平台，借助 AI 生成技术，只通过文本提示就能快速生成可编辑、可交互的网站，目前受到很多网站开发者的关注，一起来看看它有哪些神奇之处吧~</p><p><img src="https://image.uisdc.com/wp-content/uploads/2023/05/uisdc-hs-20230518-1-3.jpg" alt="Dora AI ！一句话生成可交互、可编辑网站的 AI 神器"></p><p>Dora AI 主页</p><p><a href="https://www.uisdc.com/controlnet-v1-1">AI绘画神级插件 Controlnet 连续更新！手把手教你安装体验新功能（附模型资源）大家好，这里是和你们一起探索 AI 绘画的花生~ Stable Diffusion WebUI 的绘画插件 Controlnet 在 4 月份更新了 V1.1 版本，发布了 14 个优化模型，并新增了多个预处理器，让它的功能比之前更加好用了，最近几天又连续更新了 3 个新 Refere阅读文章 <em>&gt;</em></a></p><h4 id="Dora-AI-介绍"><a href="#Dora-AI-介绍" class="headerlink" title="Dora AI 介绍"></a>Dora AI 介绍</h4><p>Dora AI 网站直达： <a href="https://link.uisdc.com/?redirect=https://www.dora.run/ai">https://www.dora.run/ai</a></p><p>Dora AI 的产品团队来自中国北京，Product Hunt 上的发布者为 Faye Zheng。从 Dora AI 官网上看，目前可以实现的效果主要有三种：</p><p><strong>① 根据文本生成网站</strong></p><p>根据官方演示视频展示，当用户输入一句关于网站的描述后，Dora AI 的会一次性生成三组设计稿供用户挑选。设计稿具有完整的网站页面框架，文案、配图和各种组件一应俱全，排版设计看起来也很高级。而且这个设计稿还是可编辑的，分成了多个不同的图层，用户可以继续在上面做出修改。</p><p><img src="https://image.uisdc.com/wp-content/uploads/2023/05/uisdc-hs-20230518-1-4.jpg" alt="Dora AI ！一句话生成可交互、可编辑网站的 AI 神器"></p><p>AI 生成的设计稿</p><p><strong>② 生成3D交互动画</strong></p><p>在编辑设计稿时，可以直接输入一句话，让 AI 将静态背景替换成具有交互效果的 3D 模型，这样鼠标进行操作时网页会跟随反应，打造沉浸式使用体验。</p><p>从演示视频中我发现当 3D 模型生成后，对应的图层变成“场景”和“3D 相机”，也就是交互效果是通过相机视角调整完成的。而 AI 做的作用应该是让“替换 3D 模型元素”和“添加动画效果”2 个任务自动完成，省去用户自己调整设计的步骤。</p><p><strong>③ 高级 AI 动画</strong></p><p>在看完演示视频后，我觉得 AI 动画这个功能实在是太神了。描述你想要的动画效果并指定动画对象，Dora AI 就能自动添加动画并弹出编辑面板，用户可以继续拖动滑块对动画效果进行调整。这比自己手动调整动画效果方便很多，而且让不懂编程的用户也能轻松为自己的网站添加高级的动画效果。</p><p>其实 Dora 原本就是一个无代码网站构建平台，帮助用户直接通过拖拽元素组件创建带有 3D 元素和动画效果的网站，并借助 Flutter 实现响应式布局，可以适应全端排版需求。</p><p>Dora 官网： <a href="https://link.uisdc.com/?redirect=https://www.dora.run/">https://www.dora.run/</a></p><p>Dora 的产品演示</p><p>这次发布的 Dora AI 则是借助现在的 AI 技术让网站构建变得更加快捷方便。比如快速生成网站配图、通过文本指令自动完成负责指令等，让每个人都能通过自然语言快速制作一个视觉效果优秀、具有 3D 动画和交互功能的网站，这无疑也是网站设计的一大进步。</p><p>目前 Dora AI 正在进行 alpha 内测，感兴趣的朋友可以进入官方加入 Waitliast：</p><p>Dora AI 官网： <a href="https://link.uisdc.com/?redirect=https://www.dora.run/ai">https://www.dora.run/ai</a></p>]]></content>
      
      
      <categories>
          
          <category> Ai科技 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PASS-Assistant Document</title>
      <link href="/2024/05/27/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/PASS-Assistant-Document/"/>
      <url>/2024/05/27/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/PASS-Assistant-Document/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/PixPin_2024-06-11_15-10-24.png"></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>全新的Ai整合Web网站，基于近年来大火的ChatGPT3.5，ChatGPT4和智谱清言GLM-4v大模型开发了基础的智能对话系统。该网站拥有基础的登录系统，积分系统，用户管理系统，兑换码系统，订单系统，收藏功能和服务器配置系统等，还有预设角色和模型对话，SD-AI绘画模块，私人GPT预设模块，数字人平台模块等新奇功能。</p><p>•SD-AI绘画模块：采用远程调用云服务器sd绘画接口，能在线实现文生图，图生图功能，用户在线完成绘画功能后，可以选择将其发布到该网站给予其它浏览人观看，实现共享型绘画分享社区。<br>•私人GPT预设模块：用户能自己填写对话模型api，密钥，模型预设，回复速率等设置，实现自己私人定制的GPT，打造更符合自身的预设。<br>•数字人平台：基于智能问答模型(GPT3.5&#x2F;GLM-4V)，GPT-SOVITS模型和阿里云函数计算FC应用数字人接口集合而成的在线数字人问答平台，用户能够在预设的数字人模型中与其对话，发送消息后会经过这三个模型加工处理，返回一个对刚刚消息处理的数字人对话视频。该模块平台除了对话功能，还有在线定制数字人功能，用户仅需上传人物头像，一分钟录制语音和模型预设词就可在线合成数字人模型，并且可以将模型分享到该网站。</p><h2 id="部分接口文档及设计"><a href="#部分接口文档及设计" class="headerlink" title="部分接口文档及设计"></a>部分接口文档及设计</h2><p>接口文档由本人亲自编写，有错误欢迎指正哦~(qq1973016127)</p><ul><li><strong>控制台(Admin)</strong></li></ul><p>对ai模型各个配置可直接在可视化面板修改，因为后端所有请求中都是查询redis中的配置数据进行接口调用，所以配置信息也是存储在redis中的。</p><p>获取终端数据：GET &#x2F;admin&#x2F;server&#x2F;get&#x2F;terminal</p><p>更新终端数据：POST &#x2F;admin&#x2F;server&#x2F;put&#x2F;terminal</p><p>获取总人数：GET &#x2F;admin&#x2F;user&#x2F;get&#x2F;count</p><p>获取用户信息：POST &#x2F;user&#x2F;current&#x2F;info</p><ul><li><p><strong>黑夜&#x2F;日间 主题切换</strong></p></li><li><p><strong>Web 对话记忆(历史对话记录)</strong></p></li><li><p><strong>超级实验室功能 (含绘图功能 NewBing claude 免费GPT)</strong></p></li><li><p><strong>对话暂停</strong></p></li><li><p><strong>商品</strong></p></li></ul><p>获取订单分页数据：&#x2F;admin&#x2F;orders&#x2F;page?pageNum&#x3D;a&amp;prompt&#x3D; b &amp;status&#x3D;c</p><p>删除交易产品：&#x2F;admin&#x2F;product&#x2F;delete&#x2F;‘ + data</p><p>添加交易产品：&#x2F;admin&#x2F;product&#x2F;put&#x2F;data</p><p>获取交易产品：&#x2F;admin&#x2F;product&#x2F;get&#x2F;page?pageNum&#x3D;’ + a + ‘&amp;prompt&#x3D;’ + b,</p><ul><li><strong>支付宝支付</strong></li></ul><p>构建订单：url: ‘&#x2F;pay&#x2F;alipay&#x2F;pay&#x2F;‘ + data,<br>method: ‘POST’</p><p>状态查询：url: ‘&#x2F;pay&#x2F;alipay&#x2F;status&#x2F;‘ + data,<br>method: ‘POST’</p><p>用户订单page：url: ‘&#x2F;pay&#x2F;orders&#x2F;page?pageNum&#x3D;’ + data,<br>method: ‘GET’</p><ul><li><p><strong>GPT 流对话</strong></p></li><li><p><strong>对话功能收藏功能 以及 收藏对话回溯场景</strong></p></li><li><p><strong>支持 GPT 自定义敏感词拦截 以及 微信铭感词拦截</strong></p></li><li><p><strong>SD MJ 文生图 图生图</strong></p></li></ul><p>提交绘画请求:&#x2F;draw&#x2F;postSdDraw</p><p>传参：@Valid DrawingSdTaskDto dto</p><p>dto类：</p><p>private MultipartFile images;</p><p>@NotBlank(message &#x3D; “提示词不能为空”)<br>private String prompt;</p><p>@NotNull(message &#x3D; “图片宽度不能为空”)<br>private Long width;</p><p>@NotNull(message &#x3D; “图片高度不能为空”)<br>private Long height;</p><p>@NotBlank(message &#x3D; “模型名称不能为空”)<br>private String modelName;</p><p>@NotNull(message &#x3D; “迭代次数不能为空”)<br>private Integer steps;</p><p>@NotBlank(message &#x3D; “采样方法不能为空”)<br>private String sampler_index;</p><p>@NotNull(message &#x3D; “环境不能为空”)<br>private Integer env;</p><p>@NotNull(message &#x3D; “上传提示词不能为空”)<br>private Long is_public;</p><p>private String negative_prompt;</p><ul><li><p><strong>支持自定义 GPT 预设词功能版块(无限制定义)</strong></p></li><li><p><strong>项目工件模块化</strong></p></li><li><p><strong>Ai 币兑换码</strong></p></li></ul><p>生产交换码：&#x2F;admin&#x2F;exchange&#x2F;build</p><p>删除交换码：&#x2F;admin&#x2F;exchange&#x2F;delete&#x2F;（data）</p><p>兑换交换码：&#x2F;admin&#x2F;exchange&#x2F;get&#x2F;page?pageNum&#x3D;’ + a + ‘&amp;prompt&#x3D;’ + b,</p><ul><li><strong>登录注册</strong></li></ul><p>找回密码：POST &#x2F;auth&#x2F;email&#x2F;password&#x2F;back</p><p>注册：url: ‘&#x2F;auth&#x2F;email&#x2F;enroll’,<br>method: ‘POST’</p><p>邮箱登录：url: ‘&#x2F;auth&#x2F;email&#x2F;login’,<br>method: ‘POST’</p><p>是否登录成功：url: ‘&#x2F;auth&#x2F;wechat&#x2F;code&#x2F;result?verifyCode&#x3D;’ + data,<br>method: ‘GET’</p><ul><li><p><strong>创意广场(允许将优秀个人作品展示至鉴赏 所有用户可视)</strong></p></li><li><p><strong>支持 GPT 对话暂停输出以及继续输出</strong></p></li><li><p><strong>内置后台管理 (用户管理 绘图管理 服务器管理 兑换码管理)</strong></p></li><li><p><strong>接入百度翻译 API</strong></p></li><li><p><strong>收藏</strong></p></li></ul><p>添加收藏：url: ‘&#x2F;user&#x2F;stat&#x2F;put&#x2F;data’,<br>method: ‘POST’,<br>data</p><p>删除收藏：url: ‘&#x2F;user&#x2F;star&#x2F;delete&#x2F;‘ + data,<br>method: ‘POST’</p><ul><li><p><strong>绘图类 API 列队处理</strong></p></li><li><p><strong>绘画模型控制台修改</strong></p></li></ul><p>查询：GET &#x2F;admin&#x2F;sd&#x2F;page&#x2F;model?pageNum&#x3D;?</p><p>新增：POST &#x2F;admin&#x2F;sd&#x2F;put&#x2F;data</p><p>删除：&#x2F;admin&#x2F;sd&#x2F;delete&#x2F;data</p><ul><li><p><strong>数据懒异步处理</strong></p></li><li><p><strong>支持主流语言以及配置类 代码高亮</strong></p></li><li><p><strong>公告</strong></p></li></ul><p>url: ‘&#x2F;public&#x2F;get&#x2F;announcement’,<br>method: ‘GET’</p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PASS-Assistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PASS-Assistant Demonstration</title>
      <link href="/2024/05/27/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/PASS-Assistant-Demonstration/"/>
      <url>/2024/05/27/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/PASS-Assistant-Demonstration/</url>
      
        <content type="html"><![CDATA[<p>视频演示地址：<a href="https://www.cnblogs.com/hepingan/p/18180722">Pass Asistant演示视频 - 何平安 - 博客园 (cnblogs.com)</a></p><p>（视频显示不了请下载下面视频链接：<a href="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/QQ2024428-225915.mp4%EF%BC%89">https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/QQ2024428-225915.mp4）</a></p><p><strong>首页</strong></p><p>该网站拥有基础的登录系统，积分系统，用户管理系统，兑换码系统，订单系统，收藏功能和服务器配置系统等，还有预设角色和模型对话，SD-AI绘画模块，私人GPT预设模块，数字人平台模块等新奇功能。</p><p><img src="https://img2.imgtp.com/2024/05/06/wolrFlHC.png"></p><p><strong>预设角色</strong></p><p><img src="https://img2.imgtp.com/2024/05/06/gxG3nzLq.png"></p><p><strong>数字人平台</strong></p><p>该功能暂未完工，打算基于智能问答模型(GPT3.5&#x2F;GLM-4V)，GPT-SOVITS模型和阿里云函数计算FC应用数字人接口集合而成的在线数字人问答平台，用户能够在预设的数字人模型中与其对话，发送消息后会经过这三个模型加工处理，返回一个对刚刚消息处理的数字人对话视频。该模块平台除了对话功能，还有在线定制数字人功能，用户仅需上传人物头像，一分钟录制语音和模型预设词就可在线合成数字人模型，并且可以将模型分享到该网站。</p><p>由于接口费用过高暂未有能力运营该模块。</p><p><img src="https://img2.imgtp.com/2024/05/06/GJuUFYwZ.png"></p><p>AI<strong>绘画</strong></p><p>采用sd绘画云端接口的调用，本人的接口部署在阿里云函数FC服务器上，地址: sd.hepingan.top，可以设置正向提示词，反向提示词，模型，参考图（即图生图功能），步数，采样器，大小，是否公开的设置。绘画欣赏可随机浏览别人的图和自己的图。</p><p><img src="https://img2.imgtp.com/2024/05/07/pa8wGbpF.png"></p><p><strong>绘画模型管理</strong></p><p>在线新增和删除绘画模型</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/PixPin_2024-05-12_00-54-59.png"></p><p>商品管理</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/PixPin_2024-05-12_00-54-51.png"></p><p>兑换码管理</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/PixPin_2024-05-12_00-54-41.png"></p><p>用户管理</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/PixPin_2024-05-12_00-54-21.png"></p><p>用户收藏模块</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/PixPin_2024-05-12_00-53-36.png"></p><p>个人中心</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/PixPin_2024-05-12_00-53-16.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PASS-Assistant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI二维码,真的太好看了!ai二维码制作方法分享</title>
      <link href="/2024/04/18/Ai%E7%A7%91%E6%8A%80/AI%E4%BA%8C%E7%BB%B4%E7%A0%81-%E7%9C%9F%E7%9A%84%E5%A4%AA%E5%A5%BD%E7%9C%8B%E4%BA%86-ai%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%88%B6%E4%BD%9C%E6%96%B9%E6%B3%95%E5%88%86%E4%BA%AB/"/>
      <url>/2024/04/18/Ai%E7%A7%91%E6%8A%80/AI%E4%BA%8C%E7%BB%B4%E7%A0%81-%E7%9C%9F%E7%9A%84%E5%A4%AA%E5%A5%BD%E7%9C%8B%E4%BA%86-ai%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%88%B6%E4%BD%9C%E6%96%B9%E6%B3%95%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>这段时间定制高级 AI 艺术二维码的价格一路飙升，最高已至 2w 制作一张。经过我们的努力研发，简化了各种繁琐的制作流程，真正做到了艺术二维码人人可生成且真的很艺术！</p><h2 id="一、AI二维码效果"><a href="#一、AI二维码效果" class="headerlink" title="一、AI二维码效果"></a><strong>一、AI二维码效果</strong></h2><p>如下请欣赏</p><p><img src="https://pic3.zhimg.com/80/v2-b4bcb9c99fdf66620fa6ea02a6acdeb2_720w.webp" alt="img"></p><p>美女二维码</p><p><img src="https://pic3.zhimg.com/80/v2-1b86e4a55fdcf27a2bc954e5eb5e43aa_720w.webp" alt="img"></p><p>风景二维码</p><p><img src="https://pic2.zhimg.com/80/v2-43f3a1cd0b7168b2764aa3301848a955_720w.webp" alt="img"></p><p>专属二维码</p><p><img src="https://pic3.zhimg.com/80/v2-edc9651077f8a09c42ac6d2dbe3431ce_720w.webp" alt="img"></p><p>二维码设计</p><p><img src="https://pic4.zhimg.com/80/v2-b019cc7414e929c00d7ce2a8e0526447_720w.webp" alt="img"></p><p>二维码美女</p><p><img src="https://pic1.zhimg.com/80/v2-7d30088a5bfb02ee8e5a3d6950e25c2c_720w.webp" alt="img"></p><p>立体二维码</p><p><img src="https://pic1.zhimg.com/80/v2-ea6e4c374fd0c0ee8b0c6625aa51b8dc_720w.webp" alt="img"></p><p>二维码美化</p><p>从现在起，无须再花高价去定制，无须再付费去学习。简单便宜即可批量生产高级 AI 二维码。</p><p>即使你是从没接触过 AI 绘画的小白、不了解二维码的原理，只需按照我们下面列出的教程，就能立即上手～</p><p><a href="https://link.zhihu.com/?target=https://pan.quark.cn/s/991e4ab6ebc6">AI二维码美化教程pan.quark.cn&#x2F;s&#x2F;991e4ab6ebc6</a></p><p><strong>二、AI艺术二维码使用场景</strong></p><p>二维码目前已经广泛应用于各行各业，不管在网上冲浪，或是在线下各种场合，我们都随处可见二维码的应用。</p><p>当人们已经看腻千篇一律的黑白二维码，是时候把你的品牌二维码更换为结合 AI 的艺术二维码，彻底颠覆二维码体验，重新定义个人与品牌形象，留下令人深刻的印象！</p><p>下面列举了一些AI二维码基础使用场景，具体的场景还有很多很多，等待你去探索。</p><p><img src="https://pic1.zhimg.com/80/v2-7bf179b91cb1e6aa043289197546ad8c_720w.webp" alt="img"></p><h2 id="三、如何通过AI美化二维码进行引流和变现？"><a href="#三、如何通过AI美化二维码进行引流和变现？" class="headerlink" title="三、如何通过AI美化二维码进行引流和变现？"></a><strong>三、如何通过AI美化二维码进行引流和变现？</strong></h2><p>你可以在闲鱼、<strong>抖音</strong>和<strong>小红书</strong>等平台上发布作品进行推广，找到与你类似的账号进行模仿发布即可。吸引用户扫描二维码并添加你的微信，然后开始变现。你还可以将自己的二维码制作成艺术品，然后加入各种微信群进行推广。</p><p><strong>变现方式：</strong></p><p>直接帮助用户制作二维码。由于这项操作具有一定门槛，许多人不会操作。如果有人对此感兴趣，他们自然会选择付费。目前市场价每张二维码可以为9.9至29.9元不等。</p><p>当然，你也可以自己制作教程并销售。通过录制一份教程并销售，每份售价99至199元，轻松实现零本投入、万倍利润。 还可以提供收徒培训。</p><p>对于那些不仅不懂AI二维码美化，也不懂推广和引流的人，你可以提供AI二维码制作方法一对一指导和实操经验分享，并收费299至599元。</p><p>AI二维码美化教程：**<a href="https://link.zhihu.com/?target=http://pan.quark.cn/s/395b49cf23e6">http://pan.quark.cn/s/395b49cf</a>**</p>]]></content>
      
      
      <categories>
          
          <category> Ai科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小玩意儿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+python flask实现智谱清言接口web服务</title>
      <link href="/2024/04/06/IT%E7%AC%94%E8%AE%B0/vue-python-flask%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%B0%B1%E6%B8%85%E8%A8%80%E6%8E%A5%E5%8F%A3web%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/04/06/IT%E7%AC%94%E8%AE%B0/vue-python-flask%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%B0%B1%E6%B8%85%E8%A8%80%E6%8E%A5%E5%8F%A3web%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>创建个主py文件和副py接口，主py先引入运行代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> blog <span class="keyword">import</span> blog</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.register_blueprint(blog)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>这里我的副py文件叫blog.py，所以就引入它的名字了（记得放在同一个目录下）</p><p>接下来是blog接口代码~</p><p>引入配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint, request</span><br><span class="line"><span class="keyword">from</span> zhipuai <span class="keyword">import</span> ZhipuAI</span><br><span class="line"></span><br><span class="line">blog = Blueprint(<span class="string">&#x27;blog&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line">client = ZhipuAI(api_key=<span class="string">&quot;替换为你的Api key&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="接口代码"><a href="#接口代码" class="headerlink" title="接口代码"></a>接口代码</h2><p><strong>普通的GLM4文本对话接口：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/chat&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_GLM4</span>():</span><br><span class="line">    content = request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(request.form[<span class="string">&#x27;content&#x27;</span>])</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;glm-4&quot;</span>,</span><br><span class="line">        messages=[</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个和蔼可亲，粘人的女友，你在回答用户问题时可以带点儿甜言蜜语&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: content&#125;</span><br><span class="line">        ],</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><p>这里的message中的system内容是让模型扮演个对应角色或提出要求，下面的content才是提出问题</p><p><strong>GLM-4v图像文本对话：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/chatgv&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_GLM4V</span>():</span><br><span class="line">    img = request.files.get(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(img)</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: <span class="string">&quot;你的IMGTP图床token&quot;</span>,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 Edg/121.0.0.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 本地方法</span></span><br><span class="line">    <span class="comment"># image_filename = &quot;abc.png&quot;</span></span><br><span class="line">    <span class="comment"># directory = os.getcwd()</span></span><br><span class="line">    <span class="comment"># image_path = os.path.join(directory, image_filename)</span></span><br><span class="line"></span><br><span class="line">    files = &#123;</span><br><span class="line">        <span class="string">&quot;image&quot;</span>: (<span class="string">&#x27;img.jpg&#x27;</span>, img, <span class="string">&#x27;multipart/form-data&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    r2 = requests.post(url=<span class="string">&quot;https://www.imgtp.com/api/upload&quot;</span>, files=files, headers=header)</span><br><span class="line"></span><br><span class="line">    r2_data = r2.json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r2.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># print(f&quot;信息:&#123;r2_data&#125;&quot;)</span></span><br><span class="line">        img_url = r2_data.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">        img_name = r2_data.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        img_id = r2_data.get(<span class="string">&quot;data&quot;</span>, &#123;&#125;).get(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;图片地址：<span class="subst">&#123;img_url&#125;</span>,图片名：<span class="subst">&#123;img_name&#125;</span>,图片id: <span class="subst">&#123;img_id&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(r2.status_code)</span><br><span class="line"></span><br><span class="line">    content = request.form[<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;glm-4v&quot;</span>,</span><br><span class="line">        messages=[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;text&quot;</span>: content</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;image_url&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;image_url&quot;</span>: &#123;</span><br><span class="line">                            <span class="string">&quot;url&quot;</span>: img_url</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br><span class="line">    r = requests.post(<span class="string">&quot;https://www.imgtp.com/api/delete&quot;</span>, headers=header, data=&#123;<span class="string">&#x27;id&#x27;</span>: img_id&#125;)</span><br><span class="line">    <span class="built_in">print</span>(r.json())</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><p>记得替换你的IMGTP图床token，获取token方法：登录网站：<a href="https://www.imgtp.com/">ImgTP - 免费公共图床</a>，在设置里面可以看到你账号的token：</p><p><img src="https://img2.imgtp.com/2024/04/06/Jtu9UAuH.png"></p><p>它里面也提供了官方接口文档</p><p>我这里的逻辑是先通过imgtp图床上传图片，将上传的图片链接返回并传给GLM-4v对话模型，调用完成后就删除图片了（删除它可以不占用图床空间，也可以不删看自己需求）</p><p><strong>cogview-3图像生成</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@blog.route(<span class="params"><span class="string">&#x27;/draw&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>():</span><br><span class="line">    content = request.form.get(<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">    response = client.images.generations(</span><br><span class="line">        model=<span class="string">&quot;cogview-3&quot;</span>,  <span class="comment"># 填写需要调用的模型名称</span></span><br><span class="line">        prompt=content,</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response.data[<span class="number">0</span>].url)</span><br><span class="line">    <span class="keyword">return</span> response.data[<span class="number">0</span>].url</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>会返回图片链接</p><h2 id="调用实例"><a href="#调用实例" class="headerlink" title="调用实例"></a>调用实例</h2><p>工具：postman</p><p>运行主py文件，普通文本对话：</p><p><img src="https://img2.imgtp.com/2024/04/06/g2fHsYcs.png"></p><p>图像文本对话：</p><p><img src="https://img2.imgtp.com/2024/04/06/l6HmdJRS.png"></p><p>图像生成接口：</p><p><img src="https://img2.imgtp.com/2024/04/06/yCf80rGY.png"></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智谱清言api调用教程</title>
      <link href="/2024/03/31/Ai%E7%A7%91%E6%8A%80/%E6%99%BA%E8%B0%B1%E6%B8%85%E8%A8%80api%E8%B0%83%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/03/31/Ai%E7%A7%91%E6%8A%80/%E6%99%BA%E8%B0%B1%E6%B8%85%E8%A8%80api%E8%B0%83%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>将智谱清言的<a href="https://link.zhihu.com/?target=https://chatglm.cn/main/alltoolsdetail">GLM4</a>的对话流转换为了ChatGPT兼容的流格式，同时支持高速流式输出、智能体对话、联网搜索、AI绘图、长文档解读、图像解析、多轮对话，零配置部署，多路token支持，自动清理会话痕迹。</p><h2 id="在线体验"><a href="#在线体验" class="headerlink" title="在线体验"></a>在线体验</h2><p>代码已经开源（希望能点个小小的star哈~）：<a href="https://link.zhihu.com/?target=https://github.com/LLM-Red-Team/glm-free-api?tab=readme-ov-file">https://github.com/LLM-Red-Team/glm-free-api</a></p><p>此链接仅临时测试功能，只有一路并发，如果遇到异常请稍后重试，建议自行部署使用。</p><p><a href="https://link.zhihu.com/?target=https://udify.app/chat/Pe89TtaX3rKXM8NS">https://udify.app/chat/Pe89TtaX3rKXM8NS</a></p><h2 id="验明正身"><a href="#验明正身" class="headerlink" title="验明正身"></a>验明正身</h2><p><img src="https://pic2.zhimg.com/80/v2-1eb899c6f95dc8b011e95d507efda499_720w.webp" alt="img"></p><p>验明正身</p><h2 id="智能体对话"><a href="#智能体对话" class="headerlink" title="智能体对话"></a>智能体对话</h2><p>对应智能体链接：<a href="https://link.zhihu.com/?target=https://chatglm.cn/main/gdetail/65c046a531d3fcb034918abe">网抑云评论生成器</a></p><p><img src="https://pic3.zhimg.com/80/v2-ca5642dc21579a634bc307bffb8e95d2_720w.webp" alt="img"></p><p>智能体对话</p><h2 id="多轮对话"><a href="#多轮对话" class="headerlink" title="多轮对话"></a>多轮对话</h2><p><img src="https://pic3.zhimg.com/80/v2-8aff0e5a84f8acf0c3d234e5d8e27c32_720w.webp" alt="img"></p><p>多轮对话</p><h2 id="AI绘图"><a href="#AI绘图" class="headerlink" title="AI绘图"></a>AI绘图</h2><p><img src="https://pic3.zhimg.com/80/v2-c86de8bba4671417764b7de113d34026_720w.webp" alt="img"></p><p>AI绘图</p><h2 id="联网搜索"><a href="#联网搜索" class="headerlink" title="联网搜索"></a>联网搜索</h2><p><img src="https://pic3.zhimg.com/80/v2-0f5c5d0589398aa57b9cd0f606fdd6c6_720w.webp" alt="img"></p><p>联网搜索</p><h2 id="长文档解读"><a href="#长文档解读" class="headerlink" title="长文档解读"></a>长文档解读</h2><p><img src="https://pic1.zhimg.com/80/v2-bbd4e1c2fc31ba79c3e156478135cd28_720w.webp" alt="img"></p><h2 id="图像解析"><a href="#图像解析" class="headerlink" title="图像解析"></a>图像解析</h2><p><img src="https://pic2.zhimg.com/80/v2-fbddd3b47d6e746311026451174fd449_720w.webp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Ai科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Suno V3版本更新！堪称AI音乐的ChatGPT时刻</title>
      <link href="/2024/03/29/Ai%E7%A7%91%E6%8A%80/Suno-V3%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%EF%BC%81%E5%A0%AA%E7%A7%B0AI%E9%9F%B3%E4%B9%90%E7%9A%84ChatGPT%E6%97%B6%E5%88%BB/"/>
      <url>/2024/03/29/Ai%E7%A7%91%E6%8A%80/Suno-V3%E7%89%88%E6%9C%AC%E6%9B%B4%E6%96%B0%EF%BC%81%E5%A0%AA%E7%A7%B0AI%E9%9F%B3%E4%B9%90%E7%9A%84ChatGPT%E6%97%B6%E5%88%BB/</url>
      
        <content type="html"><![CDATA[<p><strong>一句话总结</strong></p><p>Suno AI音乐平台发布了V3版本，标志着AI音乐创作领域的一个重要进步，类似于ChatGPT在文本生成领域的影响。</p><p><img src="https://pic1.zhimg.com/80/v2-6878a32e86cbde25dd062ffe7a663058_720w.webp" alt="img"></p><p><strong>关键信息点</strong></p><ul><li>Suno AI是专注于生成式AI音乐的平台，最新发布的V3版本在音质、咬字和节奏编排上有显著提升。</li><li>V3版本的AI音乐生成质量已经达到了值得关注和推荐的水平。</li><li>Suno AI提供了两种模式：Custom Mode（自定义模式，可输入歌词）和Instrumental（生成纯音乐）。</li><li>用户可以通过编写prompt来指导AI创作音乐，包括音乐流派、风格、情绪、乐器等元素。</li><li>Suno AI的V3版本虽然仍有限制（如最多生成2分钟音乐），但已经足够满足大多数普通人的音乐创作需求。</li></ul><p><img src="https://pic4.zhimg.com/80/v2-587370bb7cc270127554cc48d0a82d5b_720w.webp" alt="img"></p><p><strong>内容问答</strong></p><ul><li>Q: Suno AI的V3版本有哪些改进？</li><li>A: V3版本在音质、咬字和节奏编排上有了显著提升，使得生成的音乐更加悦耳和专业。</li><li>Q: Suno AI提供哪些创作模式？</li><li>A: 提供Custom Mode（自定义模式，可输入歌词）和Instrumental（生成纯音乐）两种模式。</li><li>Q: 如何使用Suno AI生成音乐？</li><li>A: 用户需要编写一个包含音乐流派、风格、情绪、乐器等元素的prompt来指导AI创作音乐。</li></ul><p><img src="https://pic3.zhimg.com/80/v2-ebdcc8855e725feddf29c4032ee244a6_720w.webp" alt="img"></p><p><strong>Suno AI的V3版本要怎么使用？</strong></p><p>Suno AI的V3版本可以通过以下步骤使用：</p><p><strong>1.访问Suno AI平台</strong>：首先，你需要访问Suno AI的官方网站（<a href="https://link.zhihu.com/?target=https://app.suno.ai/%EF%BC%89%EF%BC%8C%E8%BF%99%E6%98%AF%E7%94%9F%E6%88%90%E9%9F%B3%E4%B9%90%E7%9A%84%E4%B8%BB%E9%A1%B5%E3%80%82">https://app.suno.ai/），这是生成音乐的主页。</a></p><p><strong>2.选择生成模式</strong>：Suno AI提供了两种主要的生成模式：</p><ol><li><ol><li><strong>Custom Mode（自定义模式）</strong>：在这个模式下，你可以自定义歌词来生成音乐。</li><li><strong>Instrumental（纯音乐模式）</strong>：选择这个模式，Suno AI将只生成没有歌词的纯音乐。</li></ol></li></ol><p><strong>编写Prompt</strong>：使用Custom Mode时，你需要编写一个prompt，这个prompt应该包含以下元素：</p><ol><li><ol><li>音乐流派（如Kpop、Heavy Metal）</li><li>音乐风格（如Slow、Broadway）</li><li>情绪（如悲伤、愤怒）</li><li>乐器（如钢琴、吉他）</li><li>主题或场景</li><li>人声描述（如愤怒的男声、忧伤的女声）</li></ol></li></ol><p>\3. 对于Instrumental模式，你需要根据你想要生成的音乐的特点来编写相应的英文词组prompt,不用写歌词。</p><p><strong>4.生成歌词</strong>：如果你不熟悉音乐创作，可以使用大型语言模型来帮助你生成歌曲的prompt和歌词。你需要提供一个故事或主题，并指定歌曲的结构（如Verse、Chorus、Bridge等），以及你希望的文学气质和押韵要求。</p><p><strong>5.提交生成</strong>：将编写好的prompt复制粘贴到Suno AI的输入框中，然后点击生成按钮。根据你的设置，AI将根据这些指示生成音乐。</p><p>通过以上步骤，你可以利用Suno AI的V3版本来创作属于你自己的音乐作品。</p><p><strong>其他事项：</strong></p><p><strong>1.免费与付费用户</strong>：免费用户每天有一定数量的积分（50积分），可以用来生成音乐。付费用户可以通过订阅服务获得更多积分，10刀一个月，给2500积分，可以生成很多玩很久。</p><p><strong>2.编辑与分享</strong>：生成的音乐可以直接分享，也可以进行进一步的编辑或与其他技术（如SVC）结合，以实现更个性化的声音效果。</p><p>对于生成式AI，我一直是按照五个模态去进行分类的：</p><p>文本、图片、声音、视频、3D。</p><p>而声音领域，可能是在我的分类里，我最感兴趣也是最喜欢的一个。</p><p>在某一个路演的PPT上，我给声音又拆成了4个细分：</p><p><img src="https://pic2.zhimg.com/80/v2-02f4643a48586050ccd176912f5f1cd5_720w.jpg" alt="img"></p><p>TTS、SVC、AI音效，我都写过，也玩了很久，而生成式AI音乐，是我一直没写过的东西。</p><p>不是我没玩，是我觉得这玩意，真的还没到值得去写去推荐的地步。。。</p><p>整个AI生成式音乐的代表，那肯定就是SunoAI了。</p><p>而且这玩意其实也火过2波了。</p><p>第一波是去年3、4月的时候，有一个很火的开源项目叫Bark，就是出自Suno之手，拿了将近32k的星标。</p><p><img src="https://pic4.zhimg.com/80/v2-f2179ca631838dd9d997b2c80eeca83b_720w.jpg" alt="img"></p><p>然后就是去年12月21号的时候，为了庆祝《海贼王》动画25周年，海贼王决定重制最开始的东海篇的那60集，然后尾田这货，给海贼王官方发了一首贺曲，叫《YO-HO-HOおれ達海賊》。</p><p><img src="https://pic3.zhimg.com/80/v2-b63bb2351d009e740983d8b2c89669aa_720w.webp" alt="img"></p><p>这事本身是个好事，但是好死不死的，这曲子是特么拿AI做的，就是用今天的主角Suno出的。。</p><p>这曲子大概就是这样，很糙，基本等于没法听的地步。</p><p><img src="https://picx.zhimg.com/v2-b5e3de36486af065a9201cc5903b9227.jpg?source=382ee89a" alt="img"></p><p>01:17</p><p>然后就被网友一通骂，你这个浓眉大眼的尾田怎么也用AI了。。。传着传着就变成《海贼王》重制版要用AI做了。。。于是骂的更凶了。。。</p><p>这个小插曲，还是挺有意思的，也间接的标明，当时的Suno的质量，是真的差。</p><p>直到今天，Suno终于上了V3版本。</p><p><img src="https://pic3.zhimg.com/80/v2-5d63262301bc08b71740b3c10c3754ee_720w.webp" alt="img"></p><p>在我听了很多demo和自己也跑了二十几首后，我觉得，AI音乐的”ChatGPT”时刻，终于到来了。</p><p>这是我的一个demo。</p><p><img src="https://pic1.zhimg.com/v2-ebe10536f4be6d422a3b2cc5ca2434e6.jpg?source=382ee89a" alt="img"></p><p>02:00</p><p>弊端就是Suno最多只能生成2分钟的音乐，所以可以听到最后，会戛然而止直接截断，但是已经比V2好很多了。</p><p>但是这个音质、咬字、节奏编排啥的，也都好太多太多了。</p><p>发给朋友听，她回了一句是：卧槽，还是好听的。</p><p>网址在此：<a href="https://link.zhihu.com/?target=https://app.suno.ai/">https://app.suno.ai/</a></p><p><img src="https://pic2.zhimg.com/80/v2-6956ea0ab882b4ca6818984ccb5c9c49_720w.webp" alt="img"></p><p>点Create就是生成的主页。</p><p>主要用两种模式，一个是打开的”Custom Mode”，这个是自定义模式，可以自己自定义歌词。</p><p>第二种是Instrumental，这个打开后就只会生成没有歌词的纯音乐了。</p><p>roll一次是同时出2首歌，一首消耗5积分，所以一次消耗10积分。</p><p>免费用户每天有50积分可以玩，可以roll5次出10首歌。</p><p>你要是氪金的话也挺便宜，10刀一个月，给2500积分，能玩很久很久。</p><p>要生成音乐的话，第一步肯定是写prompt，第二步（纯音乐没有）就是写歌词。</p><p>prompt这块，我比较推荐的写法就是：</p><blockquote><p>音乐流派（如Kpop、Heavy Metal）、音乐风格（如Slow、Broadway）、情绪（如悲伤、愤怒）、乐器（如钢琴、吉他）、主题或场景、人声描述（如愤怒的男声、忧伤的女声）</p></blockquote><p>但是说实话，写音乐的prompt对于不懂音乐的人来说，真的难，毕竟什么音乐流派、音乐风格很多都不懂，你咋写啊&#x3D; &#x3D;</p><p>歌词其实一样的道理，一首歌，正常是有结构的，比如有Verse（主歌）、Chorus（副歌）、有Bridge（快结束的时候经常那个不一样的部分）等等，普通人很多时候再写的时候也一脸懵逼，这特么咋写。。</p><p>别说大家，其实我去年刚玩Suno的时候，一样也是一脸懵逼。</p><p>让大家去现学我觉得也不现实。。。</p><p>那AI的方式，就必须用AI去解决，你说对吧。</p><p>所以，我就随手写了一个Prompt，让大模型来给你写歌曲Prompt和歌词。</p><p>什么玩意都给你弄好，你自己复制即用。就像这样：</p><p><img src="https://pic4.zhimg.com/80/v2-30b4e6477f63003467b6a9e03b8c8f77_720w.webp" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-3d5a4cbc7ea9c5049d38692f1e562001_720w.webp" alt="img"></p><p>这个Prompt长这样：</p><blockquote><p>#01 你是歌词大师XX，现在，我需要你帮我写一段XX歌词，描述的是一个XX故事，整体歌曲时长2分钟以内，要押韵，要有文学气质，副歌部分要进行跨行重复。请按以下结构帮我创作：<br>“””<br>[instrumental intro]<br>[Verse 1]<br>&lt;歌词&gt;<br>[Chorus]<br>&lt;歌词&gt;<br>[Verse 2]<br>&lt;歌词&gt;<br>[Chorus]<br>&lt;歌词&gt;<br>[Bridge]<br>&lt;歌词&gt;<br>[Guitar solo]<br>[Chorus]<br>&lt;歌词&gt;<br>[Outro]<br>[End]<br>“””<br>#02 输出歌词以后，再根据歌词和故事内容，以英文词组的形式再给出歌曲的prompt。<br>请按以下格式帮我输出英文prompt：<br>“””&lt;音乐流派（如Kpop、Heavy Metal）&gt;、&lt;音乐风格（如Slow、Broadway）&gt;、&lt;情绪（如悲伤、愤怒）&gt;、&lt;乐器（如钢琴、吉他）&gt;、&lt;主题或场景&gt;、&lt;人声描述（如愤怒的男声、忧伤的女声）&gt;”””</p></blockquote><p>直接拿去复制开箱即可用。</p><p>然后就直接把出来的结果，全都复制粘贴进去，当然，你也可以自己改吧改吧。</p><p><img src="https://pic4.zhimg.com/80/v2-4d7b6f9db8025faab39ad271e41494d3_720w.webp" alt="img"></p><p>都扔进去之后，点那个黄的btn，直接开跑，速度挺快的，大概几十秒就出来了。</p><p>说实话，这个出来男声，让我有点心动了。。。</p><p><img src="https://picx.zhimg.com/v2-c9a5ec7df34a0b29e0ab5d6f9a7fbb75.jpg?source=382ee89a" alt="img"></p><p>02:00</p><p>当然，出来的歌，你不仅可以拿去直接发，你还可以玩一些骚操作，比如配合SVC，分离换声，换成自己的，可以参考这篇教程：</p><p><a href="https://link.zhihu.com/?target=http://mp.weixin.qq.com/s?__biz=MzIyMzA5NjEyMA==&mid=2647661219&idx=1&sn=74299c51f67863360c044b45a48658cf&chksm=f007c6f4c7704fe2875e409f0c7379fdac20524ec4199af2f3eaf7cfe34348c77afe7f486141&scene=21%23wechat_redirect">AI唱歌之终极喂饭教程 - SVC的极限就在这了</a></p><p>更多的歌，大家可以自己去Suno上跑着玩，体验一下AI音乐的魅力，这种直出的感觉，还是非常爽的。</p><p>虽然对很多专业歌手或者专业制作人来说，可能觉得还偏玩具，可控性差，不好编辑等等。</p><p>但至少，一定达到了大多数普通人的水准。</p><p>且这个趋势，一定是一个不可逆的未来。</p><p>这股子风，现在，终于到了音乐。</p><p>AI音乐的”ChatGPT”时刻，我觉得，终于到来了。</p>]]></content>
      
      
      <categories>
          
          <category> Ai科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPT-sovits=自定义AI语言模型训练</title>
      <link href="/2024/03/28/Ai%E7%A7%91%E6%8A%80/GPT-sovits-%E8%87%AA%E5%AE%9A%E4%B9%89AI%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
      <url>/2024/03/28/Ai%E7%A7%91%E6%8A%80/GPT-sovits-%E8%87%AA%E5%AE%9A%E4%B9%89AI%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>GPT-SoVITS是一个开源的TTS项目，只需要1分钟的音频文件就可以克隆声音，支持将汉语、英语、日语三种语言的文本转为克隆声音，作者已测试，部署很方便，训练速度很快，效果很好。项目发布不到1个月就有了9.3k star。</p><p><img src="https://pic1.zhimg.com/80/v2-baee8b7310451f87541d8cfeeec5547c_720w.webp" alt="img"></p><p>直接看作者测试的效果，能够以假乱真了。</p><p><a href="https://pan.baidu.com/link/zhihu/7dhFzeuQhvi1SkF3YmM1RYJ2Z5R1IDWwdqhm=="><img src="https://zhstatic.zhihu.com/assets/zhihu-components/file-icon/zhimg_answer_editor_file_other.svg" alt="img">中文_原声.wav307.9K·百度网盘</a><a href="https://pan.baidu.com/link/zhihu/7hhDzRuUhSi0R2lHtGaKJx0iafLwYTdwZC9W=="><img src="https://zhstatic.zhihu.com/assets/zhihu-components/file-icon/zhimg_answer_editor_file_other.svg" alt="img">中文_克隆声.wav262.4K·百度网盘</a><a href="https://pan.baidu.com/link/zhihu/75h0zVuRhLikYQNXllRids1kM5RRJlUQUtEF=="><img src="https://zhstatic.zhihu.com/assets/zhihu-components/file-icon/zhimg_answer_editor_file_other.svg" alt="img">英语_克隆声.wav423.7K·百度网盘</a><a href="https://pan.baidu.com/link/zhihu/7IhzzXuMhwiUS6Vkl2MFN6NEcidPdlVwdXhU=="><img src="https://zhstatic.zhihu.com/assets/zhihu-components/file-icon/zhimg_answer_editor_file_other.svg" alt="img">日语_克隆声.wav979.2K·百度网盘</a></p><p><strong>GPT-SoVITS项目地址</strong><br><a href="https://link.zhihu.com/?target=https://github.com/RVC-Boss/GPT-SoVITS">https://github.com/RVC-Boss/GPT-SoVITS</a></p><p><strong>以下是详细教程，阅读前请注意：</strong><br>1.本文篇幅较长，截图较多，建议先收藏再阅读。<br>2.本文基于google colab运行，本地部署及autodl云端部署也可参考，基本相同。<br>3.如需本地一键安装包，可关注公众号”AI技术实战”，回复”声音克隆”获取。</p><h2 id="1-部署运行"><a href="#1-部署运行" class="headerlink" title="1.部署运行"></a>1.部署运行</h2><p>GPT-SoVITS提供了colab的notebook，并且提供了web-ui，可以一键部署，非常方便。点击下图中”COLAB”即可打开colab notebook。也可以直接打开链接：<a href="https://link.zhihu.com/?target=https://colab.research.google.com/github/RVC-Boss/GPT-SoVITS/blob/main/colab_webui.ipynb">https://colab.research.google.com/github/RVC-Boss/GPT-SoVITS/blob/main/colab_webui.ipynb</a></p><p><img src="https://pic2.zhimg.com/80/v2-e192c1e5e187755a6d8ddd73c8ddf201_720w.webp" alt="img"></p><p>进入colab笔记本，点击”全部运行”。</p><p><img src="https://pic3.zhimg.com/80/v2-9090b24d23587c81cea38e7d159aa1fa_720w.webp" alt="img"></p><p>等待运行完成，需要等待10几分钟左右。</p><p><img src="https://pic1.zhimg.com/80/v2-98531f14cdf62fa398414647d6dda7dc_720w.webp" alt="img"></p><p>当看到日志出现Running on public URL时，说明启动成功，点击这个url，打开web界面</p><p><img src="https://pic4.zhimg.com/80/v2-dd957cd33a0f8d47c1a4bade31e6cadf_720w.webp" alt="img"></p><p>打开的web界面如下：</p><p><img src="https://pic3.zhimg.com/80/v2-62194ebde7ca70e8092ee3312e97b4fa_720w.webp" alt="img"></p><h2 id="2-声音上传和处理"><a href="#2-声音上传和处理" class="headerlink" title="2.声音上传和处理"></a>2.声音上传和处理</h2><p>准备1分钟以上的干声音频文件用于训练，最好是在安静的环境下录制，如果音频文件中有背景声音或其他声音，则必须进行下面的处理，否则非必须，但是建议处理。</p><h3 id="2-1-人声分离"><a href="#2-1-人声分离" class="headerlink" title="2.1 人声分离"></a>2.1 人声分离</h3><p>这一步操作是使用UVR5(一个处理声音的软件)提取出干净的人声，后面我们会使用提取出来的干声音频训练。进入界面，按下图选中Open UVR5-Webui。</p><p><img src="https://pic1.zhimg.com/80/v2-ca34e3ac1e986f9cb248c671f6d4765c_720w.webp" alt="img"></p><p>在colab控制台会输出一个UVR5的web界面链接</p><p><img src="https://pic3.zhimg.com/80/v2-94d17a8f66f9d209e8e1d74fc133affe_720w.webp" alt="img"></p><p>打开这个链接，进入到UVR5的界面，按如下方式操作：</p><p><img src="https://pic3.zhimg.com/80/v2-560803bee13b5996333e1a866a8a8416_720w.webp" alt="img"></p><p>等待处理完成</p><p><img src="https://pic3.zhimg.com/80/v2-8d286b04a9704911d39b8ab7197d6a02_720w.webp" alt="img"></p><p>处理成功</p><p><img src="https://pic3.zhimg.com/80/v2-1a6e2a668739384d08d3e67dd908b35e_720w.webp" alt="img"></p><p>回到colab界面，按照如下路径打开，可看到人声已经被提取出来了</p><p><img src="https://pic1.zhimg.com/80/v2-78e9466031cace0dff832f25b8da0230_720w.webp" alt="img"></p><p>把instrument开头的文件删除，只保留人声</p><p><img src="https://pic4.zhimg.com/80/v2-33a57e382c1ea050a68555849ef2423b_720w.webp" alt="img"></p><p>使用DeEchoAggressive把干声再处理一次，注意路径要写对。</p><p><img src="https://pic2.zhimg.com/80/v2-32305f00331e5ce83e1b2f0448506b01_720w.webp" alt="img"></p><p>转换成功</p><p><img src="https://pic3.zhimg.com/80/v2-07c3b9a7ba05316af57effaa1a0e9436_720w.webp" alt="img"></p><p>下面箭头指的就是最终提取出的人声，把其他两个都删除，文件夹中只保留这一个文件。</p><p><img src="https://pic4.zhimg.com/80/v2-96f36352de43e3ee78d907adec9544c7_720w.webp" alt="img"></p><p>干声提取成功后，UVR5的界面就可以关掉了，因为后面还会打开几个界面，担心不熟悉的朋友会懵，不关也可以。</p><h3 id="2-2-切割音频"><a href="#2-2-切割音频" class="headerlink" title="2.2 切割音频"></a>2.2 切割音频</h3><p>这一步要将干声音频切割，必须做，否则会爆显存。</p><p><img src="https://pic2.zhimg.com/80/v2-c7e27efd75ac24d59f2b22f559566941_720w.webp" alt="img"></p><p>等待切割完成</p><p><img src="https://pic3.zhimg.com/80/v2-474c1611ae108fe6dca81c27829de8e2_720w.webp" alt="img"></p><p>回到colab页面，可以看到音频被切割为多个小段音频</p><p><img src="https://pic1.zhimg.com/80/v2-673284722c4641b62bb83a97f22dff3c_720w.webp" alt="img"></p><h3 id="2-3-打标"><a href="#2-3-打标" class="headerlink" title="2.3 打标"></a>2.3 打标</h3><p>其实就是自动将输入的干声音频转为文字，用来告诉训练系统，音频中的哪个时间说的是什么字。注意输入的路径是上一步切割后的音频路径。</p><p><img src="https://pic3.zhimg.com/80/v2-e138cdd8b0210bd2a1fe370ee1404e9e_720w.webp" alt="img"></p><p>开始执行了</p><p><img src="https://pic1.zhimg.com/80/v2-fb71c8923355ec5ada2192c6db5f7b10_720w.webp" alt="img"></p><p>可以在colab控制台看到日志</p><p><img src="https://pic1.zhimg.com/80/v2-4f3e5836bdf350b9363e031af12109e8_720w.webp" alt="img"></p><p>稍等一会，在界面可以看到任务完成</p><p><img src="https://pic1.zhimg.com/80/v2-ff9f92c0962e4615dc2edb721809c028_720w.webp" alt="img"></p><p>在colab文件夹可以看到这个目录，.list文件就是自动打标生成的文件。</p><p><img src="https://pic4.zhimg.com/80/v2-621d5a5fd296718824c1f32cad484fab_720w.webp" alt="img"></p><h3 id="2-4-人工校对"><a href="#2-4-人工校对" class="headerlink" title="2.4 人工校对"></a>2.4 人工校对</h3><p>因为上一步是自动做的，可能有些识别的不准，所以人工校对一下，追求完美可以校对，否则可以跳过这一步，系统自动识别的已经很准确了。</p><p><img src="https://pic4.zhimg.com/80/v2-9a09d54f69125378f5f31d45fc8a228f_720w.webp" alt="img"></p><p>可以看到控制台又输出一个url，打开</p><p><img src="https://pic1.zhimg.com/80/v2-31be372c39fb396b418f7691c6676288_720w.webp" alt="img"></p><p>以下是校对的web界面，列出了部分自动识别结果，可根据情况修改，这一步作者没做，有些功能不太清楚，读者有需要的话请自行研究。</p><p><img src="https://pic4.zhimg.com/80/v2-b2ccbf41c9a9a9bd6ca37c7cc6cb0a27_720w.webp" alt="img"></p><h2 id="3-训练"><a href="#3-训练" class="headerlink" title="3.训练"></a>3.训练</h2><p>声音处理完成，终于要开始训练了。</p><h3 id="3-1数据集格式化"><a href="#3-1数据集格式化" class="headerlink" title="3.1数据集格式化"></a>3.1数据集格式化</h3><p>进入界面，按照下图填写，还是要注意各路径要写对。</p><p><img src="https://pic2.zhimg.com/80/v2-b4bc41e24ffaf2e3f8e6c88f574cb205_720w.webp" alt="img"></p><p>填写完成后，分别点击下面三个按钮，每个按钮点完后，等待执行结束再点击下一个。</p><p><img src="https://pic4.zhimg.com/80/v2-997575ff0316da0437cf364d0b3fd67f_720w.webp" alt="img"></p><h3 id="3-2-SoVITS训练"><a href="#3-2-SoVITS训练" class="headerlink" title="3.2 SoVITS训练"></a>3.2 SoVITS训练</h3><p>填写模型名称，设置batch size，建议batch_size设置为显存的一半，高了会爆显存。<br>接着设置轮数(total epoch)，SoVITS模型轮数（下图箭头4)，可以设置的高一点，GPT模型轮数（下图箭头7）不能高于20（一般情况下）建议设置10。<br>点击”Start SoVITS training”（下图箭头5），注意点了箭头5之后，不要再点箭头7。</p><p><img src="https://pic2.zhimg.com/80/v2-0e3508babaa7cd91bfefcb24b8762c51_720w.webp" alt="img"></p><p>点击Start SoVITS traing之后，可以看到开始训练了。</p><p><img src="https://pic4.zhimg.com/80/v2-af0e9d8feb6c45cbfc8332ec1a21efdb_720w.webp" alt="img"></p><p>训练的时候可以查看显卡占用，爆显存了就调低batch size，或者存在过长的音频，需要在切割音频环节将过长音频再次切割。</p><p><img src="https://pic3.zhimg.com/80/v2-727d85223fe43e3f29c392b78d893862_720w.webp" alt="img"></p><p>SoVITS训练完成后会有提示。</p><p><img src="https://pic3.zhimg.com/80/v2-1f7a0e4d00b5978b2cbf0ff6787b5eb6_720w.webp" alt="img"></p><p>可以看到SoVITS_weights目录中多了几个模型。</p><p><img src="https://pic2.zhimg.com/80/v2-2b919abc4866021a329027c0afe48659_720w.webp" alt="img"></p><p>SoVITS训练完成，可以点击”Start GPT traing”开始GPT训练了，同样点完等待。</p><p><img src="https://pic2.zhimg.com/80/v2-0bc1f74bd39f28208bd9e37d34cf0679_720w.webp" alt="img"></p><p>GPT也训练完成了。</p><p><img src="https://pic1.zhimg.com/80/v2-09bcf4faa6978d6a565f4a7696f3361c_720w.webp" alt="img"></p><h2 id="4-推理"><a href="#4-推理" class="headerlink" title="4.推理"></a>4.推理</h2><p>终于可以使用看效果了！推理又是另外一个界面了。</p><p><img src="https://pic1.zhimg.com/80/v2-ade19a682228be3f9b7e25833af51000_720w.webp" alt="img"></p><p>回到colab界面，可以看到又多了一个URL，打开这个URL</p><p><img src="https://pic4.zhimg.com/80/v2-7c79c3b862a11627f63c1ce196e0480b_720w.webp" alt="img"></p><p>这个就是推理界面了。按照下图方式设置，开始文本转语音。</p><p><img src="https://pic3.zhimg.com/80/v2-047e4ab154be22a216b98ee5142732f6_720w.webp" alt="img"></p><p>不出意外的话，稍等一会语音就合成好了，可以试听，也可以点击右边的三个小圆点下载到本地。</p><p><img src="https://pic3.zhimg.com/80/v2-55c20b17cf15d2bd51f178e54d8411ba_720w.webp" alt="img"></p><blockquote><p>上面参考音频，建议是数据集中的音频。最好5秒。参考音频很重要！会学习语速和语气，请认真选择。参考音频的文本是参考音频说什么就填什么，必须要填。语种也要对应。</p><p>切分建议无脑选50字一切，低于50字的不会切。如果50字一切报错的话就是显存太小了可以按句号切。如果不切，显存越大能合成的越多，实测4090大约1000字，但已经胡言乱语了，所以哪怕你是4090也建议切分生成。合成的过长很容易胡言乱语。如果出现吞字，重复，参考音频混入的情况，这是正常现象。不是模型炼差了，不用为模型担心。改善的方法有使用较低轮数的GPT模型、合成文本再短点、换参考音频。官方也在努力修复这个问题。</p></blockquote><h2 id="5-保存模型用于以后推理"><a href="#5-保存模型用于以后推理" class="headerlink" title="5.保存模型用于以后推理"></a>5.保存模型用于以后推理</h2><p>如果对模型比较满意的话，可以将模型保存下来，以后直接使用模型推理，不需要再浪费时间训练了。进入colab文件夹，按照下图方式下载即可。</p><p><img src="https://pic3.zhimg.com/80/v2-6d3028353a22b89aa301e2d9d9fa51de_720w.webp" alt="img"></p><p>当然也可以保存到google云盘，这样下次使用colab的时候，可以直接从google云盘获取模型。下面是保存到google云盘的步骤。</p><p><img src="https://pic3.zhimg.com/80/v2-40c0c15bba643722ec56e7be63918ff2_720w.webp" alt="img"></p><p>上面点完之后，右边会自动多出挂载云盘的代码块，运行即可。</p><p><img src="https://pic2.zhimg.com/80/v2-08a5a5c816bbe31c678a00bf3fbc3a35_720w.webp" alt="img"></p><p>挂载成功之后，刷新左边的文件目录，可以看到drive文件夹，就是google云盘，可以将上面的GPT-SoVITS文件夹中的模型文件拖动到google云盘中。</p><p><img src="https://pic4.zhimg.com/80/v2-87eb0df27cdf5aec7a231ea0ecc049d7_720w.webp" alt="img"></p><p>以后需要推理时，将GPT模型（ckpt后缀）放入GPT_weights文件夹，SoVITS模型（pth后缀）放入SoVITS_weights文件夹，如下图所示，在界面中点击刷新模型，就可以使用这些模型进行推理了。</p><p><img src="https://pic3.zhimg.com/80/v2-0270d11f2fbcd2d239465040f3786cd2_720w.webp" alt="img"></p><h2 id="6-本地部署要求"><a href="#6-本地部署要求" class="headerlink" title="6.本地部署要求"></a>6.本地部署要求</h2><p><strong>训练：</strong><br>1.Windows10&#x2F;11系统，支持 CUDA 的8G以上显存的nVIDIA 显卡;<br>2.macOS 12.3或更高版本，搭载Apple芯片（M系列芯片）或AMD GPU的Mac（如2019款Mac Pro）<br><strong>推理：</strong><br>1.Windows10&#x2F;11系统，支持 CUDA 的4G以上显存的nVIDIA 显卡;<br>2.macOS 12.3或更高版本，搭载Apple芯片（M系列芯片）或AMD GPU的Mac（如2019款Mac Pro）</p><video src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/tmppool7hke.wav" />]]></content>
      
      
      <categories>
          
          <category> Ai科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sd绘画搭建一条路服务</title>
      <link href="/2024/03/28/Ai%E7%A7%91%E6%8A%80/sd%E7%BB%98%E7%94%BB%E6%90%AD%E5%BB%BA%E4%B8%80%E6%9D%A1%E8%B7%AF%E6%9C%8D%E5%8A%A1/"/>
      <url>/2024/03/28/Ai%E7%A7%91%E6%8A%80/sd%E7%BB%98%E7%94%BB%E6%90%AD%E5%BB%BA%E4%B8%80%E6%9D%A1%E8%B7%AF%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><strong>一、本地部署 Stable Diffusion</strong></p><p><strong>前言</strong></p><p>目前市面上比较权威，并能用于工作中的AI绘画软件其实就两款。一个叫Midjourney（简称MJ），另一个叫Stable-Diffusion（简称SD）。MJ需要付费使用，而SD开源免费，但是上手难度和学习成本略大，并且非常吃电脑配置（显卡、内存）。</p><p>E和Midjourney相比，Stable Diffusion 最大的优势是开源，这意味着Stable Diffusion的潜力巨大、发展飞快。由于开源免费属性，SD 已经收获了大量活跃用户，开发者社群已经为此提供了大量免费高质量的外接预训练模型（fine-tune）和插件，并且在持续维护更新。在第三方插件和模型的加持下，SD拥有比Midjourney更加丰富的个性化功能，在经过使用者调教后可以生成更贴近需求的图片，甚至在 AI 视频特效、AI音乐生成等领域，Stable Diffusion 也占据了一席之地。</p><p>Stable Diffusion是一种潜在扩散模型（Latent Diffusion Model），能够从文本描述中生成详细的图像。它还可以用于图像修复、图像绘制、文本到图像和图像到图像等任务。简单地说，我们只要给出想要的图片的文字描述在提Stable Diffusion就能生成符合你要求的逼真的图像！</p><p><img src="https://pic3.zhimg.com/80/v2-ddc6c5960c6d609ff4f49d31390fb3aa_720w.webp" alt="img"></p><p><strong>电脑配置</strong></p><p>电脑配置最核心的关键点：看显卡、看内存、看硬盘、看CPU。其中最重要的是看显卡。N卡（英伟达Nvida独立显卡）首选，效率远超集显&#x2F;AMD&#x2F;Intel显卡和CPU渲染，最低10系起步，体验感佳用40系，显存最低4G，6G及格，上不封顶；内存最低8G，16G及格，上不封顶；硬盘可用空间最好有个500G朝上，固态最佳。</p><p>系统要求：支持 Win10&#x2F;Win11&#x2F;macOS（仅限Apple Silicon，Intel 版本的 Mac 无法调用 Radeon 显卡）和 Linux 系统，苹果版 SD 兼容的插件数量较少，功能性不及 Windows 与 Linux 电脑。</p><p>如果身边没有合适的电脑可以考虑购买云主机，比如腾讯GPU云服务器。若无法使用独立显卡和云服务，亦可修改启动配置，使用CPU渲染（兼容性强，出图速度慢，需要16G以上内存）。</p><p><img src="https://pic3.zhimg.com/80/v2-f0ba84744604aff06fb0a6462b355f96_720w.webp" alt="img"></p><p>从图中可看出，与AMD或英特尔的任何产品相比，Nvidia的GPU提供了卓越的性能–有时是以巨大的优势。随着Torch的DLL修复到位，RTX 4090的性能比带有xformers的RTX 3090 Ti高出50%，而没有xformers的性能则高出43%。生成每张图片只需要三秒多。</p><p><strong>安装方法</strong></p><p>SD开源地址：<a href="https://link.zhihu.com/?target=https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki">https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki</a></p><p>目前大家普遍采用的Stable Diffusion Web UI是发布于开源程序分享网站 Github 的 Python 项目，和平常软件安装方法有所不同，不是下载安装即可用的软件，需要准备执行环境、编译源码，针对不同操作系统（操作系统依赖）、不同电脑（硬件依赖）还有做些手工调整，这需要使用者拥有一定的程序开发经验（可以现学），已经有很多大佬们写了详细的安装教程。（如<a href="https://link.zhihu.com/?target=https://www.tonyisstark.com/846.html">https://www.tonyisstark.com/846.html</a> @托尼不是塔克）</p><p>如果像我一样是小白不会装，现在可以直接使用大佬们做的一键启动程序包，比如国内@秋葉aaaki大大开发的整合包，极大的降低了安装门槛（强烈推荐！）</p><p><img src="https://pic2.zhimg.com/80/v2-89894ef22d19fa2382153cbaedc2f21d_720w.webp" alt="img"></p><p>（详见<a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1ne4y1V7QU">https://www.bilibili.com/video/BV1ne4y1V7QU</a>）一键启动包只是封装了可视化的一键界面，不影响出图效果，只是降低了本地部署的门槛。</p><p>Nvidia 显卡用户须知：在使用SD前，请登录 Nvidia 官网<a href="https://link.zhihu.com/?target=https://www.nvidia.cn/geforce/drivers/">https://www.nvidia.cn/geforce/drivers/</a>下载安装对应显卡最新版驱动程序，与<a href="https://link.zhihu.com/?target=https://blog.csdn.net/weixin_44177494/article/details/120444922">https://blog.csdn.net/weixin_44177494&#x2F;article&#x2F;details&#x2F;120444922</a>显卡支持的最新版 CUDA 驱动。</p><p><strong>启动SD</strong></p><p>进入SD安装文件夹，双击 webui-user.bat，待其加载完成方可使用浏览器（Chrome&#x2F;Edge）登录默认的加载IP <a href="https://link.zhihu.com/?target=http://127.0.0.1:7860/">http://127.0.0.1:7860/</a></p><p><img src="https://pic2.zhimg.com/80/v2-e9cfefe29dd80365fa9ff7bc1517f47d_720w.webp" alt="img"></p><p><strong>界面汉化</strong></p><p>如果需要中文语言包，可以下载如下中文语言包扩展，下载界面网址为：<a href="https://link.zhihu.com/?target=https://github.com/VinsonLaro/stable-diffusion-webui-chinese">https://github.com/VinsonLaro/stable-diffusion-webui-chinese</a></p><p>方法1：通过WebUI拓展进行安装<br>1.打开stable diffusion webui，进入”Extensions”选项卡<br>2.点击”Install from URL”，注意”URL for extension’s git repository”下方的输入框<br>3.粘贴或输入本Git仓库地址<a href="https://link.zhihu.com/?target=https://github.com/VinsonLaro/stable-diffusion-webui-chinese">https://github.com/VinsonLaro/stable-diffusion-webui-chinese</a><br>4.点击下方的黄色按钮”Install”即可完成安装，然后重启WebUI(点击”Install from URL”左方的”Installed”，然后点击黄色按钮”Apply and restart UI”网页下方的”Reload UI”完成重启)<br>5.点击”Settings”，左侧点击”User interface”界面，在界面里最下方的”Localization (requires restart)”，选择”Chinese-All”或者”Chinese-English”<br>6.点击界面最上方的黄色按钮”Apply settings”，再点击右侧的”Reload UI”即可完成汉化</p><p><strong>二、界面基础</strong></p><p><strong>了解界面</strong></p><p>接下来是具体的使用方法简介。目前SD并不存在通行可靠的使用规范，每个人的电脑配置、需求都不尽相同，cpkd&#x2F;Safetensors大模型、VAE、embeding、lora等AI模型、各类插件、提示词、输出参数的组合牵一发则动全身，需要大家有足够的耐心查阅插件开发者的说明文档和来自<a href="https://link.zhihu.com/?target=https://civitai.com/">https://civitai.com/</a>等分享网站的使用心得，大家可以先到civitai上搜索中意的图例，复用原作者的出图提示词、参数和模型，再以此修改，这样学习的效果最为直观。</p><p><img src="https://pic3.zhimg.com/80/v2-8712f8736f92b80fb19dff0d8f220d0a_720w.webp" alt="img"></p><p><strong>文生图</strong>：根据文本提示生成图像<br><strong>图生图</strong>：根据提供的图像作为范本、结合文本提示生成图像<br><strong>更多</strong>：优化(清晰、扩展)图像<br><strong>图片信息</strong>：显示图像基本信息,包含提示词和模型信息（除非信息被隐藏）<br><strong>模型合并</strong>：把已有的模型按不同比例进行合并生成新模型<br>训练：根据提供的图片训练具有某种图像风格的模型</p><p><img src="https://pic3.zhimg.com/80/v2-f3a273c5f3e0f8c02822091f1cb9858a_720w.webp" alt="img"></p><p>描述语分为正向&#x2F;负向描述，它们也叫tag(标签）或prompt(提示词）<br><strong>正面提示词</strong>：相比Midjourney需要写得更精准和细致，描述少就给AI更多自由发挥空间。<br><strong>负面提示词</strong>：不想让SD生成的内容。<br>正向：masterpiece, best quality, 更多画质词，画面描述<br>反向：nsfw, lowres, bad anatomy, bad hands, text, error, missing fingers,extra digit, fewer digits, cropped, worst quality, low quality, normal quality, jpeg artifacts, signature, watermark, username, blurry,根据画面产出加不想出现的画面。</p><p><img src="https://pic1.zhimg.com/80/v2-5ada42c007dbdbf9b941cc82113acf8c_720w.webp" alt="img"></p><p><strong>生成下面的5个小图标（从左到右依次分别是）</strong></p><ul><li>复原上次生成图片的提示词（自动记录）</li><li>清空当前所有提示词</li><li>打开模型选择界面</li><li>应用选择的风格模板到当前的提示词</li><li>存档当前的正反向提示词</li></ul><p><img src="https://pic1.zhimg.com/80/v2-91b6f73a0a896678425fb672114f5830_720w.webp" alt="img"></p><p><strong>采样方法</strong><br>1.建议根据自己使用的checkpoint使用脚本跑网格图（用自己关心的参数）然后选择自己想要的结果。<br>2.懒得对比：请使用DPM++ 2M或DPM++ 2M Karras（二次元图）或UniPC，想要点惊喜和变化，Euler a、DPM++ SDE、DPM++ SDE Karras（写实图）、DPM2 a Karras（注意调整对应eta值）<br>3.eta和sigma都是多样性相关的，但是它们的多样性来自步数的变化，追求更大多样性的话应该关注seed的变化，这两项参数应该是在图片框架被选定后，再在此基础上做微调时使用的参数。</p><p><strong>采样步数</strong><br>稳定扩散通过从充满噪音的画布开始创建图像，并逐渐去噪以达到最终输出。此参数控制这些去噪步骤的数量。通常越高越好，但在一定程度上，我们使用的默认值是25个步骤。以下是不同情况下使用哪个步骤编号的一般指南：</p><ul><li>如果您正在测试新的提示，并希望获得快速结果来调整您的输入，请使用10-15个步骤</li><li>当您找到您喜欢的提示时，请将步骤增加到25</li><li>如果是有毛皮的动物或有纹理的主题，生成的图像缺少一些细节，尝试将其提高到40</li></ul><p><img src="https://pic3.zhimg.com/80/v2-0cd6be5cc8b6bc5f9813638ef9cb8a1e_720w.webp" alt="img"></p><p><strong>面部修复</strong>：修复人物的面部，但是非写实风格的人物开启面部修复可能导致面部崩坏。<br><strong>平铺</strong>：生成一张可以平铺的图像<br><strong>高分辨率重绘</strong>：使用两个步骤的过程进行生成，以较小的分辨率创建图像，然后在不改变构图的情况下改进其中的细节，选中该选项会有一系列新的参数，<br>其中重要的是：<br><strong>放大算法</strong>：Latent 在许多情况下效果不错，但重绘幅度小于 0.5 后就不甚理想。ESRGAN_4x、SwinR 4x 对 0.5 以下的重绘幅度有较好支持。<br><strong>放大倍数</strong>: 通常2倍即可<br><strong>重绘幅度</strong>：决定算法对图像内容的保留程度。该值越高，放大后图像就比放大前图像差别越大。低 denoising 意味着修正原图，高 denoising 就和原图就没有大的相关性了。一般来讲阈值是 0.7 左右，超过 0.7 和原图基本上无关，0.3 以下就是稍微改一些，0什么都不会改变，1会得到一个完全不同的图像。具体的执行步骤为 重绘强度 * 重绘步数。</p><p><img src="https://pic4.zhimg.com/80/v2-59dd1d7689b46313cd27b5fd9a85201f_720w.webp" alt="img"></p><p><strong>长宽尺寸</strong>(分辨率）<br>长宽尺寸并非数值越大越好，最佳的范围应在512至768像素之间，比如正方形图多是512<em>512和768</em>768，人像肖像 512x768，风景画 768×512，可按比例加大或减小，这个值必须是 8 的倍数。如果不希望主题对象出现重复，应在此范围内选择适当的尺寸。如果需要更高分辨率的图片，建议先使用SD模型生成图片，然后再使用合适的模型进行upscale。</p><p><strong>生成批次</strong>：每次生成图像的组数。一次运行生成图像的数量为生成批次 * 每批数量。<br><strong>每批数量</strong>：同时生成多少个图像。增加这个值可以提高性能，但你也需要更多的 VRAM。图像总数是这个值乘以批次数。除 4090 等高级显卡以外通常保持为 1。</p><p><strong>提示词相关性CFG</strong>：较高的数值将提高生成结果与提示的匹配度。<br>OpenArt上使用的默认CFG是7，这在创造力和生成你想要的东西之间提供了最佳平衡。通常不建议低于5。<br>CFG量表可以分为不同的范围，每个范围都适合不同的提示类型和目标<br>CFG 2 – 6：有创意，但可能太扭曲，没有遵循提示。对于简短的提示来说，可以很有趣和有用<br>CFG 710：推荐用于大多数提示。创造力和引导一代之间的良好平衡<br>CFG 10-15：当您确定您的提示是详细且非常清晰的，您希望图像是什么样子时<br>CFG 16-20：除非提示非常详细，否则通常不推荐。可能影响一致性和质量<br>CFG &gt;20：几乎无法使用</p><p><strong>随机种子（Seed）</strong>:生成每张图片时的随机种子，这个种子是用来作为确定扩散初始状态的基础。不懂的话，用随机的即可。</p><p><strong>提示词生成</strong></p><p>开始不知道怎么写提示词，可以先参考优秀的风格模板作为起手式，还可以借助描述语工具和网站，多出图多研究，掌握了出图规律，慢慢就可以自己写提示词啦，写提示词要尽可能写的详细。跑AI的过程就像抽卡，抽出一堆卡，选出你审美范畴里觉得好看的。</p><p><img src="https://pic1.zhimg.com/80/v2-189f1c9b48f41d2c2939757ddd9b610c_720w.webp" alt="img"></p><p>找tag关键词网站：<br>可参考Civitai | Stable Diffusion models, embeddings, hypernetworks and more中优秀作品的提示词作为模板。<br>其他网站还有：<br>ChatGPT：<a href="https://link.zhihu.com/?target=https://chat.openai.com/">https://chat.openai.com/</a><br>AI Creator：<a href="https://link.zhihu.com/?target=https://ai-creator.net/arts">https://ai-creator.net/arts</a><br>NovelAI：<a href="https://link.zhihu.com/?target=https://spell.novelai.dev">https://spell.novelai.dev</a><br>魔咒百科词典：<a href="https://link.zhihu.com/?target=https://aitag.top">https://aitag.top</a><br>AI咒术生成器：<a href="https://link.zhihu.com/?target=https://tag.redsex.cc/">https://tag.redsex.cc/</a><br>AI词汇加速器 AcceleratorI Prompt：<br>词图 PromptTool：<a href="https://link.zhihu.com/?target=https://www.prompttool.com/NovelAI">https://www.prompttool.com/NovelAI</a><br>鳖哲法典：<a href="https://link.zhihu.com/?target=http://tomxlysplay.com.cn/%23/">http://tomxlysplay.com.cn/#/</a><br>Danbooru tag：Tag Groups Wiki | Danbooru (<a href="https://link.zhihu.com/?target=http://donmai.us">http://donmai.us</a>)</p><p><strong>Prompt格式优化</strong></p><p>第一段：画质tag，画风tag<br>第二段：画面主体，主体强调，主体细节概括（主体可以是人、事、物、景）画面核心内容<br>第三段：画面场景细节，或人物细节，embedding tag。画面细节内容<br>第二段一般提供人数，人物主要特征，主要动作（一般置于人物之前），物体主要特征，主景或景色框架等</p><p><strong>举个例子</strong><br>(具体场景还是要灵活应用，多尝试，找到合适自己的节奏和风格）<br>第一段：masterpiece, best quality, 4k, ( Pixar - style :1.4)<br>第二段：1boy,(Cute,handsome,wearing outdoor sportswear :0.7), 3D,(Face close-up :1.2), (at night, surrounded by glowing plants, flowers, flying fireflies, bonfires), (Ultra detailed, aesthetic, beautiful composition, rich bright colors, volumetric soft light).<br>第三段：Inspired by Alice in Wonderland, magic, fairy tales. unreal Engine, octane render, cuteness render, awe inspiring, beautiful, <a href="lora:blindbox_V1Mix:1">lora:blindbox_V1Mix:1</a></p><p><img src="https://pic3.zhimg.com/80/v2-abe713ec346a9e8d82398373aaf5444e_720w.webp" alt="img"></p><p><strong>Prompt规则细节</strong></p><p>\1. 越靠前的Tag权重越大。<br>\2. 生成图片的大小会影响Prompt的效果，图片越大需要的Prompt越多，不然Prompt会相互污染。<br>3.Stable-diffusion中，可以使用括号人工修改提示词的权重，方法如下：<br>(word) - 将权重提高 1.1 倍<br>((word)) - 将权重提高 1.21 倍（&#x3D; 1.1 * 1.1）<br>[word] - 将权重降低至原先的 90.91%<br>(word:1.5) - 将权重提高 1.5 倍<br>(word:0.25) - 将权重减少为原先的 25%<br>请注意，权重值最好不要超过 1.5</p><p><img src="https://pic3.zhimg.com/80/v2-8af7500f4597553e3348f0bebb4f0fa2_720w.webp" alt="img"></p><p>\4. Prompt支持使用emoji，可通过添加emoji达到表现效果。如 形容表情， 可修手。<br>5.“+” ， “ AND” ， “|” 用法：“+”和“ AND ”都是用于连接短Tag，但AND两端要加空格。”+”约等于” and “；“|” 为循环绘制符号（融合符号）(Prompt A: w1)|(Prompt B: w2)<br>以上表达适用于WebUI，w1、w2为权重。AI会对A、 B两Prompt进行循环绘制。可往后无限加入Prompt。<br>6.tag不一定是多么充满细节，只要模型稳定。小图+高分辨率重绘。800<em>400的图变成1600</em>800，初识小图减少崩坏概率。<br>7.关键词最好具有特异性，譬如 Anime(动漫)一词就相对泛化，而Jojo一词就能清晰地指向 Jojo动漫的画风。措辞越不抽象越好，尽可能避免留下解释空间的措辞。</p><p><strong>三、了解模型</strong></p><p><strong>下载模型</strong></p><p>主流模型下载网站：<br>Hugging face是一个专注于构建、训练和部署先进开源机器学习模型的网站：<a href="https://link.zhihu.com/?target=https://huggingface.co/">https://huggingface.co/</a><br>Civitai是一个专为Stable Diffusion AI艺术模型设计的网站，是非常好的AI模型库：<a href="https://link.zhihu.com/?target=https://civitai.com/">https://civitai.com/</a><br>主流模型被删除可以去备用模型站下载：<a href="https://link.zhihu.com/?target=https://www.4b3.com">https://www.4b3.com</a></p><p><img src="https://pic2.zhimg.com/80/v2-45091ab3c9ea33d2c4cc12eb8bdcc031_720w.webp" alt="img"></p><p><strong>模型选择</strong></p><p>如何选择合适模型是最重要的。<br>从你想画的风格（写实、二次元、卡通盲盒等）来选择大模型，再搭配合适的Lora。</p><p><strong>1.Checkpoint</strong><br>体积较大，也被称为大模型，不同的大模型使用不同的图片训练而成，对应不同的风格，相当于最底层的引擎。有时候需要大模型+VAE+emb+Lora联合搭配使用以达到需要的效果。<br>下载的大模型可放置于SD文件夹&#x2F;models&#x2F;Stable-diffusion内。</p><p><img src="https://pic2.zhimg.com/80/v2-dcefdb6c297905e79e1880f5aed650ed_720w.webp" alt="img"></p><p><strong>2.Lora</strong></p><p>Lora是特征模型，体积较小，是基于某个确定的角色、确定的风格或者固定的动作训练而成的模型，可使用权重控制，确定性要远强于embedding。embedding和Lora有功能交集的部分，也有互相不可取代的地方。</p><p>在ckpt大模型上附加使用，对人物、姿势、物体表现较好。在webui界面的Additional Networks下勾线Enable启用，然后在Model下选择模型，并可用Weight调整权重。权重越大，该 Lora 的影响也越大。不建议权重过大（超过1.2），否则很容易出现扭曲的结果。</p><p>多个Lora模型混合使用可以起到叠加效果，譬如一个控制面部的Lora 配合一个控制画风的 Lora就可以生成具有特定画风的特定人物。因此可以使用多个专注于不同方面优化的Lora，分别调整权重，结合出自己想要实现的效果。</p><p>LoHA 模型是一种 LORA 模型的改进。<br>LoCon 模型也一种 LORA 模型的改进，泛化能力更强。<br>下载的Lora可放置于SD文件夹&#x2F;models&#x2F;Lora内。</p><p><img src="https://pic1.zhimg.com/80/v2-fda222f7c354e0b7777c3f5177e71d10_720w.webp" alt="img"></p><p><strong>3.VAE</strong><br>VAE模型类似滤镜，对画面进行调色与微调，一般需要搭配相应的模型一起使用。（如果图片比较灰，颜色不太靓丽，就可能是没加载vae)<br>下载的VAE可放置于SD文件夹&#x2F;models&#x2F;VAE内。</p><p><strong>4.Textual inversion（embedding）</strong><br>关键词预设模型，即关键词打包，即等于预设好一篮子关键词a,b,c打包，进而来指代特定的对象&#x2F;风格。也可以通过下载Textual inversion进行使用。<br>下载的embedding可放置于SD文件夹&#x2F;embeddings内。</p><p><strong>四、ControlNet</strong></p><p>ControlNet使得SD从玩具变成做商业项目的神器，接下来会重中之重来详细讲解一下。<br>ControlNet是斯坦福大学研究人员开发的Stable Diffusion的扩展，使创作者能够轻松地控制AI图像和视频中的对象。它将根据边缘检测、草图处理或人体姿势等各种条件来控制图像生成。ControlNet可以概括为一种简单的稳定扩散微调方法。ControlNet的工作原理是将可训练的网络模块附加到稳定扩散模型的U-Net （噪声预测器）的各个部分。Stable Diffusion 模型的权重是锁定的，在训练过程中它们是不变的。在训练期间仅修改附加模块。</p><p><strong>安装</strong><br>从github上找到并把网址填到扩展里安装，安装完后记得点击 Apply and restart UI（<a href="https://link.zhihu.com/?target=https://github.com/Mikubill/sd-webui-controlnet">https://github.com/Mikubill/sd-webui-controlnet</a>）</p><p><img src="https://pic4.zhimg.com/80/v2-c08d40337960bebab28092dce6b331b7_720w.webp" alt="img"></p><p>1.将ControlNet模型（.pt、.pth、.ckpt或.safetensors）放入models&#x2F;ControlNet文件夹。<br>2.打开“txt2img”或“img2img”选项卡，写下您的提示。<br>3.按“刷新模型”，选择要使用的模型。（若没有出现，请尝试重新加载&#x2F;重新启动webui）<br>4.上传您的图像并选择预处理器，完成。<br>目前，它支持完整型号和修剪型号。使用extract_controlnet.py从原始.pth文件中提取controlnet。<br>预训练模型：<a href="https://link.zhihu.com/?target=https://huggingface.co/lllyasviel/ControlNet/tree/main/models">https://huggingface.co/lllyasviel/ControlNet/tree/main/models</a></p><p><strong>界面介绍</strong></p><p><img src="https://pic1.zhimg.com/80/v2-934c4f18855d9fbd10d25549d44158b4_720w.webp" alt="img"></p><p><strong>开启</strong> :选中此框以启用ControlNet。<br><strong>颜色反转</strong>：交换黑色和白色。例如，它可以在您上传涂鸦时使用。ControlNet 需要黑色背景和白色涂鸦。如果您使用白色背景的外部软件创建涂鸦，则必须使用此选项。如果您使用 ControlNet 的界面创建涂鸦，则不需要使用此选项。<br><strong>RGB转为BGR</strong> :用于检测用户导入图像中的颜色信息。有时图像中的颜色信息可能与扩展所期望的不同。如果您上传图像并使用预处理，则无需选中此框。<br><strong>低显存</strong>:这将减缓ETA进程，但有助于使用更少的计算空间(显存小于8 GB VRAM建议使用)，检查您是否用完了 GPU 内存，或者想要增加处理的图像数量。<br><strong>推测模式</strong>:ControlNet自动识别图像(不需要提示和负面提示)与选定的预处理器。它强制 ControlNet 编码器遵循输入控制图（如深度、边缘等)，即使没有提示也是如此。使用此模式时使用更高的步进，例如50，但是这个效果不一定好。</p><p><img src="https://pic1.zhimg.com/80/v2-7a2d84822fb58596f7e2f1758a2226ac_720w.webp" alt="img"></p><p>**权重（Weight)**：代表使用 ControlNet 生成图片时被应用的权重占比。<br>**引导介入时机（Guidance Start)**：在理解此功能之前，我们应该先知道生成图片的 Sampling steps 采样步数功能，步数代表生成一张图片要刷新计算多少次，Guidance Start(T) 设置为 0 即代表开始时就介入，默认为 0，设置为 0.5 时即代表 ControlNet 从 50% 步数时开始介入计算。<br>**引导退出时机（Guidance End)**：和引导介入时机相对应，如设置为1，则表示在100%计算完时才会退出介入也就是不退出，默认为 1，可调节范围 0-1，如设置为 0.8 时即代表从80% 步数时退出介入。</p><p><img src="https://pic4.zhimg.com/80/v2-557a54044f165ca8d0ec1a7e0b043173_720w.webp" alt="img"></p><p>调整大小模式提供了调整ControlNet大小和上传图像的纵横比。<br><strong>Just Resize</strong>:不保留纵横比的情况下，改变ControlNet图像的大小以匹配Txt2Img设置的宽度和高度。这包括拉伸或压缩图像以适应指定的尺寸。<br><strong>Scale to Fit (Inner Fit)</strong>:调整ControlNet图像的大小以适应Txt2Image的尺寸。它将调整图像的大小，直到它能够适应Txt2Image设置的宽度和高度。<br><strong>Envelope (Outer Fit)</strong>:调整Txt2Image的大小以适应ControlNet图像的尺寸。它将调整图像的大小，直到Txt2Image设置可以适合ControlNet图像。<br><strong>画布宽度 和 画布高度</strong> 提供手动创建绘图或草图以，不上传任何图像（最好使用 Scribble 预处理器以获得良好的输出）。它会调整空白画布的大小来进行绘制，不会影响上传的原始图像。</p><p><img src="https://pic2.zhimg.com/80/v2-7468dde77697fbb5543c4e56149acb41_720w.webp" alt="img"></p><p><strong>预览图片处理结果</strong>：能够快速查看选择的预处理器是如何将上传的图像或绘图转换为 ControlNet的检测图。对在渲染输出图像之前尝试各种预处理器有用，可节省我们的时间。<br><strong>隐藏处理结果</strong>：删除预览图像。</p><p><img src="https://pic4.zhimg.com/80/v2-937665d029d4e7197cbc5c4e18945937_720w.webp" alt="img"></p><p>预处理器和模型是ControlNet的主要选项。<br><strong>预处理器</strong>：用于对输入图像进行预处理，例如检测边缘、深度和法线贴图。None使用输入图像作为控制图。 根据所需的输出，用户可以选择相应的控制方法。<br><strong>模型</strong>：如果您选择了预处理器，您通常会选择相应的模型。但是它并不限制你混合和匹配所有的预处理器和模型，但是混合多了就会产生负面效果，所以最好使用更加匹配的模型并且越少越好。ControlNet模型与在AUTOMATIC1111 GUI顶部选择的稳定扩散模型一起使用。</p><p><strong>预处理器</strong></p><p>下面我们介绍几个常用的 ControlNet，并在下面举例说明如何使用它。</p><p><strong>1、Canny边缘检测</strong><br>Canny通过使用边缘检测器创建高对比度区域的轮廓来检测输入图像。线条可以捕捉到非常详细的信息，但如果你的图像背景中有一些物体，它很可能会检测到不需要的物体。所以背景中物体越少效果越好。用于此预处理器的最佳模型是control_sd15_canny。</p><p><img src="https://pic3.zhimg.com/80/v2-b1c53af984360b0217ccd3e2c4887ad6_720w.webp" alt="img"></p><p><strong>2、Depth &amp; Depth Leres</strong><br>这个预处理器有助于生成输入图像的深度估计。深度通常用于控制图像内物体的空间定位。浅色区域意味着它离用户更近，而深色区域则离用户更远。<br>在大图像时它可能会丢失图像内部的细节(面部表情等)。一般会与control_sd15_depth模型组合使用。Midas Resolution函数用于增加或减少detectmap中的大小和细节级别。它的级别越高，将使用更多的VRAM，但可以生成更高质量的图像，反之亦然。<br>Depth Leres有与Depth 相同的基本概念，但在地图中包含更广泛的范围。但有时它会从图片中捕获了太多信息，可能会生成与原始图像略有不同的图像。所以最好先试用两种预处理器，然后决定哪一种。</p><p><img src="https://pic4.zhimg.com/80/v2-9a694ed81408f57cb3dac6ea6d32a11f_720w.webp" alt="img"></p><p><strong>3、HED (Holistically-Nested Edge Detection)</strong><br>Hed可以在物体周围创建清晰和精细的边界，输出类似于Canny，但减少了噪声和更柔软的边缘。它的有效性在于能够捕捉复杂的细节和轮廓，同时保留细节特征(面部表情、头发、手指等)。Hed预处理器可用于修改图像的风格和颜色。用于此预处理器的最佳模型是control_sd15_hed。</p><p><img src="https://pic3.zhimg.com/80/v2-1c2337626e557a396beff1e7a1c74b5a_720w.webp" alt="img"></p><p><strong>4、MLSD ( Mobile Line Segment Detection)</strong><br>MLSD Preprocessor 最适合生成强有力的线条，这些线条能够检测出需要独特和刚性轮廓的建筑和其他人造作品。但是它不适用于处理非刚性或弯曲的物体。MLSD适用于生成室内布局或建筑结构，因为它可以突出直线和边缘。用于此预处理器的最佳模型是control_sd15_mlsd。</p><p><img src="https://pic2.zhimg.com/80/v2-523d96396c2af3d266688bc27f941c1d_720w.webp" alt="img"></p><p><strong>5、Normal map</strong><br>法线图使用了三种主要颜色(红、绿、蓝)，通过不同的角度来精确定位物体的粗糙度和光滑程度。它生成法线图的基本估计，可以保留相当多的细节，但可能会产生意想不到的结果，因为法线图完全来自图像，而不是在3D建模软件中构建的。<br>法线图有利于突出复杂的细节和轮廓，并且在定位对象方面也很有效，特别是在接近度和距离方面。“Normal Background Threshold”用于调整背景成分。设置一个更高的阈值可以移除背景的远处部分(将其混合成紫色)。降低阈值将命令AI保留甚至显示额外的背景元素。用于此预处理器的最佳模型是control_sd15_normal。</p><p><img src="https://pic4.zhimg.com/80/v2-f1e80b5281beced419c71ee884c8d1ff_720w.webp" alt="img"></p><p><strong>6、OpenPose</strong><br>这个预处理器生成了一个基本的骨骼火柴人形象。这种技术被广泛采用，因为多个 OpenPose骨架可以组合成一个图像，这有助于引导稳定扩散生成多个一致的主题。骨架图有很多关节点，每个点代表如下图所示。</p><p><img src="https://pic1.zhimg.com/80/v2-5979d8f2284d698c10c55646546816ac_720w.webp" alt="img"></p><p><strong>7、Scribble</strong><br>涂鸦的目的是从简单的黑白线条画和草图生成图像。用户也可以使用“Canvas”选项创建特定大小的空白画布，用于手动素描（也可以直接上传图像）。如果草图和绘图由白色背景上的黑线组成，则需要选中“Invert Input Color”复选框。用于这个预处理器的最佳模型是control_sd15_openpose。</p><p><img src="https://pic3.zhimg.com/80/v2-dfca58146adafab31b4a77037647fa56_720w.webp" alt="img"></p><p><strong>8、Segmentation</strong><br>分割预处理器检测并将上传的图像分割为同一图像内的段或区域。该模型在生成一组新的图像时，将detectmap图像应用于文本提示。用于此预处理器的最佳模型是control_sd15_seg。</p><p><img src="https://pic4.zhimg.com/80/v2-5347107433e8bd44fba0ab6101a36b83_720w.webp" alt="img"></p><p><strong>附录：预处理器与对应模型清单</strong></p><p><img src="https://pic1.zhimg.com/80/v2-2f68a20f9ff5f97601b90e4df3f6e9f8_720w.webp" alt="img"></p><p><strong>总结</strong></p><p>使用AI绘图工具Stable Diffusion确实能提高美术工作者的生产效率，但是请记住：人工智能，没有人工就没有智能。Stable Diffusion并不是简单易上手的APP，我们需要花费一定的时间和精力去学习和不断调试，才能使其真正为我们所用，高效产出效果符合需求的图片。</p><p>最后，我为大家简单罗列一下使用SD的几项核心能力：<br>1.Github使用能力，使用者在熟练掌握Github开源项目的安装、调参、排错、编程环境设置等技能后，就不会在SD报错时六神无主了。<br>2.基础出图调试能力，这项能力能够让使用者无需协助就能自行摸索稳定输出可用的图片。<br>3.Controlnet构图能力，基于Controlnet的构图控制是美术从业者驾驭SD的缰绳，不会用Controlnet，你只会被随机噪声牵着走。<br>4.学习插件并组合使用的能力。<br>5.Lora等小模型的训练能力（进阶）。</p><p>如本文对您有帮助，欢迎将其分享给需要的朋友～关注我，接下来会分享更多关于Stable Diffusion的进阶内容和商业落地项目。</p><p><strong>站在巨人的肩膀上</strong></p><p><a href="https://link.zhihu.com/?target=https://avoid.overfit.cn/post/acbb609d015a40fc8d0cd26f8e215dd9">https://avoid.overfit.cn/post/acbb609d015a40fc8d0cd26f8e215dd9</a><br><a href="https://link.zhihu.com/?target=https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features%23attentionemphasis">https://github.com/AUTOMATIC1111/stable-diffusion-webui/wiki/Features#attentionemphasis</a><br><a href="https://link.zhihu.com/?target=https://muhou.net/document/236688.html">https://muhou.net/document/236688.html</a><br><a href="https://link.zhihu.com/?target=https://guide.novelai.dev/guide/prompt-engineering/practice">https://guide.novelai.dev/guide/prompt-engineering/practice</a><br><a href="https://zhuanlan.zhihu.com/p/619721909">https://zhuanlan.zhihu.com/p/619721909</a><br><a href="https://zhuanlan.zhihu.com/p/612572004">https://zhuanlan.zhihu.com/p/612572004</a><br><a href="https://link.zhihu.com/?target=https://www.163.com/dy/article/I22IV66G0518R7MO.html">https://www.163.com/dy/article/I22IV66G0518R7MO.html</a><br><a href="https://link.zhihu.com/?target=https://stable-diffusion-art.com/controlnet/">https://stable-diffusion-art.com</a></p>]]></content>
      
      
      <categories>
          
          <category> Ai科技 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai绘画 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于TimeSea的sd绘画接口修改为阿里云FC</title>
      <link href="/2024/03/17/IT%E7%AC%94%E8%AE%B0/%E5%9F%BA%E4%BA%8ETimeSea%E7%9A%84sd%E7%BB%98%E7%94%BB%E6%8E%A5%E5%8F%A3%E4%BF%AE%E6%94%B9%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91FC/"/>
      <url>/2024/03/17/IT%E7%AC%94%E8%AE%B0/%E5%9F%BA%E4%BA%8ETimeSea%E7%9A%84sd%E7%BB%98%E7%94%BB%E6%8E%A5%E5%8F%A3%E4%BF%AE%E6%94%B9%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91FC/</url>
      
        <content type="html"><![CDATA[<h2 id="代码修改"><a href="#代码修改" class="headerlink" title="代码修改"></a>代码修改</h2><p>下载时间海大佬的源码：<a href="https://gitee.com/dulaiduwang_hjx_bilibili/time_sea_chatgpt">TIME SEA CHATGPT: 基于SpringBoot3 开发的 双端Ai (含小程序 H5, 网页支持已适配手机)平台 , 适配 功能 ChatGPT、数字人视频生成、NewBing 、Claude、自定义对话、自定义角色、 SD绘图 、GPT绘图、MJ绘图, 网页数据和小程序端同步 登录方式分为 邮箱登录 或 微信扫一扫登录 , 绘图内含 百度翻译 黄图鉴权 , 支持 小程序流量主功能 双端自带 管理系统 (gitee.com)</a></p><p>里面有后端的部署教程哦~</p><p>直接进入Web模块，里面全局搜索DrawingTextView.vue文件，将里面的代码全部替换为下面的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;demo-image__placeholder&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;block&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;demonstration&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;el-image :src=&quot;src&quot;&gt;&lt;/el-image&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">      目前PC版显示可能有些问题，建议缩小网页或使用手机端</span><br><span class="line">  &lt;br/&gt;</span><br><span class="line">      正向提示词(英文更准确~):</span><br><span class="line">      &lt;el-input</span><br><span class="line">          type=&quot;textarea&quot;</span><br><span class="line">          :rows=&quot;2&quot;</span><br><span class="line">          placeholder=&quot;请输入绘画提示词&quot;</span><br><span class="line">          v-model=&quot;prompt&quot;&gt;</span><br><span class="line">      &lt;/el-input&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      绘画模型:</span><br><span class="line">      &lt;el-select v-model=&quot;value&quot; placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in options&quot;</span><br><span class="line">            :key=&quot;item.value&quot;</span><br><span class="line">            :label=&quot;item.label&quot;</span><br><span class="line">            :value=&quot;item.value&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      采样器:</span><br><span class="line">      &lt;el-select v-model=&quot;value2&quot; placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in options2&quot;</span><br><span class="line">            :key=&quot;item.value2&quot;</span><br><span class="line">            :label=&quot;item.label2&quot;</span><br><span class="line">            :value=&quot;item.value2&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      大小:</span><br><span class="line">      &lt;el-select v-model=&quot;height&quot; placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in shape&quot;</span><br><span class="line">            :key=&quot;item.height&quot;</span><br><span class="line">            :label=&quot;item.label3&quot;</span><br><span class="line">            :value=&quot;item.height&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      步数(越高越丰富,越低越简约):</span><br><span class="line">      &lt;el-select v-model=&quot;step&quot; placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">        &lt;el-option</span><br><span class="line">            v-for=&quot;item in options3&quot;</span><br><span class="line">            :key=&quot;item.step&quot;</span><br><span class="line">            :label=&quot;item.label3&quot;</span><br><span class="line">            :value=&quot;item.step&quot;&gt;</span><br><span class="line">        &lt;/el-option&gt;</span><br><span class="line">      &lt;/el-select&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;requestImage&quot;&gt;开始绘画&lt;/el-button&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      (画好后记得保存到本地哦~)</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;div v-if=&quot;loading===1&quot;&gt;</span><br><span class="line">        &lt;h1&gt;</span><br><span class="line">          &lt;span&gt;加&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;载&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;中&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;.&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;.&lt;/span&gt;</span><br><span class="line">          &lt;span&gt;.&lt;/span&gt;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">        (预计需要1分钟，请勿刷新网页或点击按钮)</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-if=&quot;loading===2&quot;&gt;</span><br><span class="line">        &lt;div v-if=&quot;decodedImages.length&quot;&gt;</span><br><span class="line">          &lt;div v-for=&quot;(img, index) in decodedImages&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;img&quot; alt=&quot;image&quot; /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-if=&quot;loading===3&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;milky&quot;&gt;AI绘画调用失败T_T&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DrawingView&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      src: &#x27;https://img2.imgtp.com/2024/03/17/3qkbcd2h.png&#x27;,</span><br><span class="line">      textarea: &#x27;&#x27;,</span><br><span class="line">      loading: &#x27;0&#x27;,</span><br><span class="line">      decodedImages: [],</span><br><span class="line">      prompt: &#x27;lovely girl&#x27;,</span><br><span class="line">      step: &#x27;&#x27;,</span><br><span class="line"></span><br><span class="line">      options: [&#123;</span><br><span class="line">        value: &#x27;mixProV4.Cqhm.safetensors&#x27;,</span><br><span class="line">        label: &#x27;经典模型&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value: &#x27;Anime_Art_SDXL.safetensors&#x27;,</span><br><span class="line">        label: &#x27;优美动漫风格&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value: &#x27;majicMIX realistic_v6.safetensors&#x27;,</span><br><span class="line">        label: &#x27;写真人物&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value: &#x27;Counterfeit-V2.5_v30.safetensors&#x27;,</span><br><span class="line">        label: &#x27;丰富二次元&#x27;</span><br><span class="line">      &#125;],</span><br><span class="line">      value: &#x27;&#x27;,</span><br><span class="line">      options2: [&#123;</span><br><span class="line">        value2: &#x27;Euler a&#x27;,</span><br><span class="line">        label2: &#x27;Euler a(默认推荐)&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value2: &#x27;Euler&#x27;,</span><br><span class="line">        label2: &#x27;Euler&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value2: &#x27;LMS&#x27;,</span><br><span class="line">        label2: &#x27;LMS&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        value2: &#x27;DPM++ 2M&#x27;,</span><br><span class="line">        label2: &#x27;DPM++ 2M&#x27;</span><br><span class="line">      &#125;],</span><br><span class="line"></span><br><span class="line">      options3: [&#123;</span><br><span class="line">        step: &#x27;10&#x27;,</span><br><span class="line">        label3: &#x27;10&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        step: &#x27;20&#x27;,</span><br><span class="line">        label3: &#x27;20&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        step: &#x27;30&#x27;,</span><br><span class="line">        label3: &#x27;30&#x27;</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        step: &#x27;40&#x27;,</span><br><span class="line">        label3: &#x27;40&#x27;</span><br><span class="line">      &#125;],</span><br><span class="line">      height: &#x27;512&#x27;,</span><br><span class="line">      width: &#x27;512&#x27;,</span><br><span class="line">      value2: &#x27;&#x27;,</span><br><span class="line">      shape: [&#123;</span><br><span class="line">        height: 512,</span><br><span class="line">        width: 512,</span><br><span class="line">        label3: &quot;1 : 1(正方形)&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        height: 1485,</span><br><span class="line">        width: 810,</span><br><span class="line">        label3: &quot;16 : 9(电脑屏幕)&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        height: 512,</span><br><span class="line">        width: 1024,</span><br><span class="line">        label3: &quot;1 : 2(手机屏幕)&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        height: 750,</span><br><span class="line">        width: 1000,</span><br><span class="line">        label3: &quot;3 : 4(小红书)&quot;</span><br><span class="line">      &#125;,&#123;</span><br><span class="line">        height: 1440,</span><br><span class="line">        width: 2560,</span><br><span class="line">        label3: &quot;2k (价格昂贵少用...)&quot;</span><br><span class="line">      &#125;],</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    requestImage() &#123;</span><br><span class="line">      console.log(&quot;开始发送请求&quot;);</span><br><span class="line">      this.loading=1;</span><br><span class="line">      //TODO 设置阿里云绘画地址</span><br><span class="line">      axios.post(&quot;http://你的阿里云sd绘画接口&quot;, &#123;</span><br><span class="line">        &quot;prompt&quot;: this.prompt,</span><br><span class="line">        &quot;step&quot;: 10,</span><br><span class="line">        &quot;height&quot;: this.height,</span><br><span class="line">        &quot;width&quot;: this.width,</span><br><span class="line">        &quot;override_settings&quot;: &#123;</span><br><span class="line">          &quot;sd_model_checkpoint&quot;: this.value,</span><br><span class="line">          // &quot;sd_model_checkpoint&quot;: &quot;majicMIX realistic_v6.safetensors&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          &quot;Authorization&quot;: &quot;Basic Og==&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(response =&gt; &#123;</span><br><span class="line">        console.log(response.status);</span><br><span class="line">        this.loading = 2;</span><br><span class="line">        this.decodeImages(response.data.images); // 解码并展示图像数据</span><br><span class="line">        this.costMoney();</span><br><span class="line">      &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">        this.loading = 3;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    decodeImages(images) &#123;</span><br><span class="line">      const decodedImages = images.map(img =&gt; this.base64Decode(img));</span><br><span class="line">      this.decodedImages = decodedImages;</span><br><span class="line">    &#125;,</span><br><span class="line">    base64Decode(base64) &#123;</span><br><span class="line">      const binaryString = window.atob(base64);</span><br><span class="line">      const len = binaryString.length;</span><br><span class="line">      const bytes = new Uint8Array(len);</span><br><span class="line">      for (let i = 0; i &lt; len; ++i) &#123;</span><br><span class="line">        bytes[i] = binaryString.charCodeAt(i);</span><br><span class="line">      &#125;</span><br><span class="line">      const blob = new Blob([bytes.buffer], &#123; type: &#x27;image/png&#x27; &#125;);</span><br><span class="line">      return URL.createObjectURL(blob); // 将解码后的图像数据转换为URL</span><br><span class="line">    &#125;,</span><br><span class="line">    //未完成的扣费系统</span><br><span class="line">    costMoney()&#123;</span><br><span class="line">      axios.post(&quot;http://localhost:8625/drawing/sd/gpt/text&quot;</span><br><span class="line">      ).then(re =&gt;&#123;</span><br><span class="line">        console.log(re.status)</span><br><span class="line">      &#125;).catch(err =&gt;&#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  setup()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">:deep(.el-textarea) &#123;</span><br><span class="line">  .el-textarea__inner &#123;</span><br><span class="line">    background: var(--bgColor2);</span><br><span class="line">    box-shadow: none;</span><br><span class="line">    max-height: 400px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    font-size: 10px;</span><br><span class="line">    color: var(--textColor2);</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      box-shadow: none;</span><br><span class="line">      background: var(--bgColor2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ::placeholder &#123;</span><br><span class="line">    color: var(--textColor4); /* 将颜色值修改为您想要的占位符文字颜色 */</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /* 兼容性处理 */</span><br><span class="line">  :-ms-input-placeholder &#123;</span><br><span class="line">    color: var(--textColor4); /* 将颜色值修改为您想要的占位符文字颜色 */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h1 span &#123;</span><br><span class="line">  top: 20px; /*字符上下浮动*/</span><br><span class="line">  position: relative;</span><br><span class="line">  animation: loading 0.3s ease 0s infinite alternate; /*引用动画*/</span><br><span class="line">  /* animation: 动画名称 动画时间 动画曲线 何时开始 播放次数 是否反方向;</span><br><span class="line">  alternate:表示动画先正常运行再反方向运行，并持续交替</span><br><span class="line">  infinite:表示无限循环*/</span><br><span class="line">  font-size: 100px;</span><br><span class="line">  color: white;</span><br><span class="line">  text-shadow: 0 1px 0  #CCC,</span><br><span class="line">  0 2px 0 #CCC,</span><br><span class="line">  0 3px 0 #CCC,</span><br><span class="line">  0 4px 0 #CCC,</span><br><span class="line">  0 5px 0 #CCC,</span><br><span class="line">  0 6px 0 #CCC,</span><br><span class="line">  0 7px 0 #CCC,</span><br><span class="line">  0 8px 0 #CCC,</span><br><span class="line">  0 9px 0 #CCC,</span><br><span class="line">  0 10px 10px rgba(0, 0, 0, 0.5);</span><br><span class="line">  /*text-shadow: 水平阴影位置(必须) 垂直阴影位置(必须) 模糊距离(可选) 阴影颜色(可选);</span><br><span class="line">    text-shadow: h-shadow v-shadow blur color; */</span><br><span class="line">&#125;</span><br><span class="line">h1 span:nth-child(2) &#123;</span><br><span class="line">  animation-delay: 0.1s;</span><br><span class="line">&#125;</span><br><span class="line">h1 span:nth-child(3) &#123;</span><br><span class="line">  animation-delay: 0.2s;</span><br><span class="line">&#125;</span><br><span class="line">h1 span:nth-child(4) &#123;</span><br><span class="line">  animation-delay: 0.3s;</span><br><span class="line">&#125;</span><br><span class="line">h1 span:nth-child(5) &#123;</span><br><span class="line">  animation-delay: 0.4s;</span><br><span class="line">&#125;</span><br><span class="line">h1 span:nth-child(6) &#123;</span><br><span class="line">  animation-delay: 0.5s;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes loading &#123;  /* 定义动画*/</span><br><span class="line">  100% &#123;</span><br><span class="line">    top: -20px;  /*字符上下浮动*/</span><br><span class="line">    text-shadow: 0 1px 0 #CCC,</span><br><span class="line">    0 2px 0 #CCC,</span><br><span class="line">    0 3px 0 #CCC,</span><br><span class="line">    0 4px 0 #CCC,</span><br><span class="line">    0 5px 0 #CCC,</span><br><span class="line">    0 6px 0 #CCC,</span><br><span class="line">    0 7px 0 #CCC,</span><br><span class="line">    0 8px 0 #CCC,</span><br><span class="line">    0 9px 0 #CCC,</span><br><span class="line">    0 50px 25px rgba(0, 0, 0, 0.3);</span><br><span class="line">    /*上升的时候阴影要在文字下面一些，所以垂直阴影的位置坐标和模糊距离要大一些*/</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.milky&#123;</span><br><span class="line">  font-size: 80px;   /*设置文字大小*/</span><br><span class="line">  color:#3366FF;  /*设置文字颜色*/</span><br><span class="line">  text-shadow: 0 8px 10px #6699FF;  /*设置文字阴影*/</span><br><span class="line">  font-weight: bolder;  /*设置文字宽度*/</span><br><span class="line">  text-align: center;  /*设置文字居中*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记得修改TODO处的绘画地址哦~</p><p>然后在根目录下cmd运行npm run build即可</p><p>模型选择要自己配置下载的模型哦，默认都有第一个经典模型</p><h2 id="阿里云FC函数计算申请"><a href="#阿里云FC函数计算申请" class="headerlink" title="阿里云FC函数计算申请"></a>阿里云FC函数计算申请</h2><p>在阿里云官网找到FC函数计算：（新人有免费的280元额度）<img src="https://img2.imgtp.com/2024/03/17/zUtJ5ldk.png"></p><p>算了不想写了，看b站教程吧：<a href="https://www.bilibili.com/video/BV19u411x7Bk/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click">https://www.bilibili.com/video/BV19u411x7Bk/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click</a></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo添加live2d模型</title>
      <link href="/2024/03/09/IT%E7%AC%94%E8%AE%B0/hexo%E6%B7%BB%E5%8A%A0live2d%E6%A8%A1%E5%9E%8B/"/>
      <url>/2024/03/09/IT%E7%AC%94%E8%AE%B0/hexo%E6%B7%BB%E5%8A%A0live2d%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>参考文章：<a href="https://blog.csdn.net/cungudafa/article/details/104282643">Hexo（sakura）添加live2d看板动画（可对话，换装互动）_hexo-helper-live2d 对话框-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_62976227/article/details/129364748">Hexo+live2d | 如何把live2d老婆放进自己的博客_l2d.js moc3文件-CSDN博客</a></p><p><a href="https://gitcode.com/xiazeyu/live2d-widget-models/overview">项目概览 - live2d-widget-models - GitCode</a></p><p><a href="https://blog.csdn.net/qq_36239569/article/details/104104894">Hexo添加Live2D看板娘最新教程_hexo live2d-CSDN博客</a></p><p><a href="https://www.bilibili.com/read/cv13728205/?spm_id_from=333.999.0.0">【序】将自制live2d放入自制网页中-对目前网上的网页添加live2d的技术做了一个小整理 - 哔哩哔哩 (bilibili.com)</a></p><p>最开始是有位同学来找我想在hexo博客里添加一个live2d模型，研究了一天，本来想着是弄个自定义的模型，最后还是只能弄个网上现有的模型。不过网上的模型也是挺多的，也可以试试搞搞，先上成果图：</p><p><img src="https://img2.imgtp.com/2024/03/09/lLiRchOt.png"></p><h2 id="普通模型"><a href="#普通模型" class="headerlink" title="普通模型"></a>普通模型</h2><p>首先在博客根目录cmd运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>上面是检查有无已经安装live2d,下面的才是安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>先来个简单的模型，继续输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install live2d-widget-model-shizuku</span><br></pre></td></tr></table></figure><p>然后在根目录配置文件（_config.yml）里添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Live2D看板娘</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="comment">#模板目录，在node_modules里</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-shizuku</span>  </span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span>  <span class="comment">#左右显示</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">300</span> </span><br><span class="line">    <span class="attr">height:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="comment"># 在手机端显示</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span>   </span><br><span class="line">  <span class="attr">rect:</span></span><br><span class="line">    <span class="string">opacity:0.7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后老方法hexo g + hexo s  可以运行查看下效果</p><p>如果你不喜欢这个模型，可以参考这里的模型库：<a href="https://gitcode.com/xiazeyu/live2d-widget-models/overview">项目概览 - live2d-widget-models - GitCode</a>，安装对应的模型后记得修改_config.yml刚刚配置的use: 后面的东西。</p><h2 id="高级模型"><a href="#高级模型" class="headerlink" title="高级模型"></a>高级模型</h2><p>接下来是更高级的模型配置，就是我主页面左边的模型，可以看到它可以换人物和衣服等功能，推荐使用这个高级玩意儿哦，当然你喜欢简洁的话就刚刚的吧。</p><p>如果不想要一边一个这样的样子就删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>下载大神<a href="https://github.com/stevenjoezhang/live2d-widget">优化版live2d-widget</a>；<br>其次， 在<code>主目录\themes\shoka\source</code>目录下新建目录live2d-widget；<br>最后，将下载内容解压到该目录下。</p><p>修改autoload.js文件，将大神路径改为绝对路径<br>说明：这个绝对路径是编译后 <strong>根目录</strong> 位置在<code>themes/sakura/source</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 注意：live2d_path 参数应使用绝对路径</span><br><span class="line">//const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;</span><br><span class="line">const live2d_path = &quot;/live2d-widget/&quot;;</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>修改<code>\MyWeb\themes\sakura\layout\_partial</code>目录下的head.ejs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--自定义看板娘--&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>\MyWeb\_config.yml</code>文末添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span> <span class="comment">##自定义看板娘动画</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>记得注释掉普通模型的yml</p><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。<br>其实看板娘可以侧边隐藏，对样本的修改影响也不大。</p><h2 id="MOC3模型"><a href="#MOC3模型" class="headerlink" title="MOC3模型"></a>MOC3模型</h2><p>想要添加自定义的模型，但是现在的新模型大多数都是moc3格式的了，不再是moc格式了，如果想要添加moc3模型，可以参考这篇文章:</p><p><a href="https://blog.csdn.net/m0_62976227/article/details/129364748">Hexo+live2d | 如何把live2d老婆放进自己的博客_l2d.js moc3文件-CSDN博客</a></p><p><strong>我自己的方法是直接修改public 的index.html 文件了，就不推荐我这种方法了，想要了解的话可以往下面看看</strong></p><p>moc3推荐模型库：<a href="https://github.com/nuke777/AzurLaneL2DViewer">nuke777&#x2F;AzurLaneL2DViewer (github.com)</a></p><p>也可以下载后clone 到自己的本地然后添加自己的模型在assets里。</p><p>index.html里添加:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;theme-color&quot;</span> <span class="attr">content</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;180x180&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/apple-touch-icon.png&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/ico&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;32x32&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/favicon.ico&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-transform&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;Canvas&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;L2dCanvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> config = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">width</span>: <span class="number">800</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: <span class="number">600</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">left</span>: <span class="string">&#x27;0px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bottom</span>: <span class="string">&#x27;0px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">basePath</span>: <span class="string">&#x27;https://cdn.jsdelivr.net/gh/alg-wiki/AzurLaneL2DViewer@gh-pages/assets&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">role</span>: <span class="string">&#x27;bisimai_2&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// background: &#x27;https://cdn.jsdelivr.net/gh/alg-wiki/AzurLaneL2DViewer@gh-pages/assets/bg/bg_church_jp.png&#x27;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">opacity</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mobile</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> v = <span class="keyword">new</span> <span class="title class_">Viewer</span>(config);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应添加就行，比如head的部分就加到head里。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python调用sd绘画接口</title>
      <link href="/2024/03/08/IT%E7%AC%94%E8%AE%B0/python%E8%B0%83%E7%94%A8sd%E7%BB%98%E7%94%BB%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/03/08/IT%E7%AC%94%E8%AE%B0/python%E8%B0%83%E7%94%A8sd%E7%BB%98%E7%94%BB%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>bvipc的接口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode, b64decode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置API的URL</span></span><br><span class="line">url = <span class="string">&quot;https://qwq.bvipc.com/sdapi/v1/txt2img&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 账号和密码用于Basic Auth认证</span></span><br><span class="line">account_id = <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">account_password = <span class="string">&quot;xxxxxxxxxxxx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备Basic Auth的头部</span></span><br><span class="line">credentials = <span class="string">f&quot;<span class="subst">&#123;account_id&#125;</span>:<span class="subst">&#123;account_password&#125;</span>&quot;</span></span><br><span class="line">encoded_credentials = b64encode(credentials.encode(<span class="string">&quot;utf-8&quot;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">auth_header = &#123;</span><br><span class="line">    <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Basic <span class="subst">&#123;encoded_credentials&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据API的要求调整请求数据</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;prompt&quot;</span>: <span class="string">&quot;draw a lovely girly&quot;</span>,</span><br><span class="line">    <span class="string">&quot;steps&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">&quot;width&quot;</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">512</span>,</span><br><span class="line">    <span class="string">&quot;cfg_scale&quot;</span>: <span class="number">7.5</span>,</span><br><span class="line">    <span class="string">&quot;seed&quot;</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;sampler_index&quot;</span>: <span class="string">&quot;Euler a&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求，包含Basic Auth头部和JSON数据</span></span><br><span class="line">response = requests.post(url, data=json.dumps(data), headers=auth_header)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查响应</span></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    response_data = response.json()</span><br><span class="line">    images = response_data.get(<span class="string">&#x27;images&#x27;</span>, [])</span><br><span class="line">    <span class="keyword">for</span> i, image_base64 <span class="keyword">in</span> <span class="built_in">enumerate</span>(images, start=<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 解码Base64编码的图像数据</span></span><br><span class="line">        image_data = b64decode(image_base64)</span><br><span class="line">        <span class="comment"># 为每个图像创建一个文件名</span></span><br><span class="line">        image_filename = <span class="string">f&quot;image_<span class="subst">&#123;i&#125;</span>.png&quot;</span></span><br><span class="line">        <span class="comment"># 将图像数据写入文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(image_filename, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> image_file:</span><br><span class="line">            image_file.write(image_data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;图像已保存为：<span class="subst">&#123;image_filename&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error:&quot;</span>, response.status_code, response.text)</span><br></pre></td></tr></table></figure><p>阿里云sd绘画api接口代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">endpoint = <span class="string">&quot;http://sd.xxxxxxx.cn-hangzhou.fc.devsapp.net&quot;</span></span><br><span class="line">username = <span class="string">&quot;&quot;</span></span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">resp = requests.post(</span><br><span class="line">    <span class="string">&quot;%s/sdapi/v1/txt2img&quot;</span> % endpoint,</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Basic %s&quot;</span> % (</span><br><span class="line">            base64.b64encode((<span class="string">&quot;%s:%s&quot;</span> % (username, password)).encode(<span class="string">&quot;utf-8&quot;</span>)).decode(<span class="string">&quot;utf-8&quot;</span>)),  <span class="comment"># 如果未开启 API 鉴权，可忽略该部分</span></span><br><span class="line">    &#125;,</span><br><span class="line">    json=&#123;</span><br><span class="line">        <span class="string">&quot;prompt&quot;</span>: <span class="string">&quot;a lovely girly，avatar&quot;</span>,<span class="comment">#提示词</span></span><br><span class="line">        <span class="string">&quot;step&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&quot;height&quot;</span>: <span class="number">512</span>,</span><br><span class="line">        <span class="string">&quot;width&quot;</span>: <span class="number">1024</span>,</span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;override_settings&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;sd_model_checkpoint&quot;</span>: <span class="string">&quot;mixProV4.Cqhm.safetensors&quot;</span>,</span><br><span class="line">            <span class="comment"># &quot;sd_model_checkpoint&quot;: &quot;majicMIX realistic_v6.safetensors&quot;,</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp.status_code == <span class="number">200</span>:</span><br><span class="line">    data = resp.json()</span><br><span class="line">    <span class="keyword">for</span> i, img <span class="keyword">in</span> <span class="built_in">enumerate</span>(data[<span class="string">&quot;images&quot;</span>]):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;%s.png&quot;</span> % (i), <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            b = base64.b64decode(img)</span><br><span class="line">            f.write(b)</span><br><span class="line"></span><br><span class="line">    data[<span class="string">&quot;images&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(resp.status_code, resp.text)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶之正则表达式</title>
      <link href="/2024/03/08/IT%E7%AC%94%E8%AE%B0/Python%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/03/08/IT%E7%AC%94%E8%AE%B0/Python%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>text</strong>&#x3D;”asdjasdj124lashasl324hoasgfqwfps45j4543466fhjkhs7897dkhfspfsdfjls67576593d”</p><ul><li><strong>找出字符串中所有数字</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">r&quot;\d&quot;</span>,text)</span><br></pre></td></tr></table></figure><p>输出: [‘1’, ‘2’, ‘4’, ‘3’, ‘2’, ‘4’, ‘4’, ‘5’, ‘4’, ‘5’, ‘4’, ‘3’, ‘4’, ‘6’, ‘6’, ‘7’, ‘8’, ‘9’, ‘7’, ‘6’, ‘7’, ‘5’, ‘7’, ‘6’, ‘5’, ‘9’, ‘3’]</p><ul><li><strong>找出字符串所有连续数字</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(<span class="string">r&quot;\d+&quot;</span>,text)</span><br></pre></td></tr></table></figure><p>输出：[‘124’, ‘324’, ‘45’, ‘4543466’, ‘7897’, ‘67576593’]</p><ul><li><strong>找出所有单个字符</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&quot;\w&quot;</span>,text))</span><br></pre></td></tr></table></figure><p>输出：[‘a’, ‘s’, ‘d’, ‘j’, ‘a’, ‘s’, ‘d’, ‘j’, ‘1’, ‘2’, ‘4’, ‘l’, ‘a’, ‘s’, ‘h’, ‘a’, ‘s’, ‘l’, ‘3’, ‘2’, ‘4’, ‘h’, ‘o’, ‘a’, ‘s’, ‘g’, ‘f’, ‘q’, ‘w’, ‘f’, ‘p’, ‘s’, ‘4’, ‘5’, ‘j’, ‘4’, ‘5’, ‘4’, ‘3’, ‘4’, ‘6’, ‘6’, ‘f’, ‘h’, ‘j’, ‘k’, ‘h’, ‘s’, ‘7’, ‘8’, ‘9’, ‘7’, ‘d’, ‘k’, ‘h’, ‘f’, ‘s’, ‘p’, ‘f’, ‘s’, ‘d’, ‘f’, ‘j’, ‘l’, ‘s’, ‘6’, ‘7’, ‘5’, ‘7’, ‘6’, ‘5’, ‘9’, ‘3’, ‘d’]</p><ul><li><strong>找出长度为n-m的数字</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&quot;\d&#123;1,3&#125;&quot;</span>,text))</span><br></pre></td></tr></table></figure><p>输出：[‘124’, ‘324’, ‘45’, ‘454’, ‘346’, ‘6’, ‘789’, ‘7’, ‘675’, ‘765’, ‘93’]</p><p><strong>text2</strong>&#x3D;”电话1：023-234723947,电话2：0234-823957223,电话3：19812876402,电话3：0642-98346,电话4：21387645609”</p><ul><li><strong>找出指定长度和形状的字符串</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&quot;\d&#123;3,4&#125;-\d&#123;7,8&#125;|1\d&#123;10&#125;&quot;</span>,text2))</span><br></pre></td></tr></table></figure><p>输出：[‘023-23472394’, ‘0234-82395722’, ‘19812876402’]</p><p>这句意思是找出-前面数字长度为3-4且-后面为数字长度为7-8的和1开头且后面位数为10的。“|”这个是“和”的意思</p><p><strong>text3</strong>&#x3D;”barbar carcar harhel”</p><ul><li><strong>找出字符串中相同的字段并以列表元组返回</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.findall(<span class="string">r&quot;(\w&#123;3&#125;)(\1)&quot;</span>,text3))</span><br></pre></td></tr></table></figure><p>输出：[(‘bar’, ‘bar’), (‘car’, ‘car’)]</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPT-SoVITS搭建</title>
      <link href="/2024/03/01/IT%E7%AC%94%E8%AE%B0/GPT-SoVITS%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/03/01/IT%E7%AC%94%E8%AE%B0/GPT-SoVITS%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>图库跑路了所以图片看不了了</strong></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>下载地址：</p><p>GPT-SoVITS开源github发布地址（不会编程的不要下这个，下载楼下的整合包）<br><a href="https://github.com/RVC-Boss/GPT-SoVITS">https://github.com/RVC-Boss/GPT-SoVITS</a><br>训练推理整合包地址：<br><a href="https://pan.baidu.com/s/1OE5qL0KreO-ASHwm6Zl9gA?pwd=mqpi%EF%BC%88%E5%BA%A6%E7%9B%98%E8%A6%81%E6%B0%AA%E8%B6%85%E7%BA%A7%E4%BC%9A%E5%91%98%E6%89%8D%E8%83%BD%E6%BB%A1%E9%80%9F%E4%B8%8B%E8%BD%BD%EF%BC%89">https://pan.baidu.com/s/1OE5qL0KreO-ASHwm6Zl9gA?pwd=mqpi（度盘要氪超级会员才能满速下载）</a><br><a href="https://www.123pan.com/s/5tIqVv-GVRcv.html%EF%BC%88%E5%8F%AF%E6%BB%A1%E9%80%9F%E4%B8%8B%E8%BD%BD%E4%BD%86%E6%98%AF%E8%A6%81%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7%EF%BC%89">https://www.123pan.com/s/5tIqVv-GVRcv.html（可满速下载但是要注册账号）</a><br>云端训练地址<a href="https://www.codewithgpu.com/i/RVC-Boss/GPT-SoVITS/GPT-SoVITS-Official">https://www.codewithgpu.com/i/RVC-Boss/GPT-SoVITS/GPT-SoVITS-Official</a></p><p>—by bilibili 花儿不哭</p><p><strong>这里使用的整合包</strong></p><p>解压后运行根目录下的go-webui.bat</p><p><img src="https://img2.imgtp.com/2024/03/02/CtUI6mNw.png"></p><p>打开后如果提示有风险点击高级并继续运行，会弹出来个命令窗等个一会儿就会自动弹出网页，地址为localhost:9874</p><p>准备一段2分钟左右的录制音频，（要求为纯人声录制，环境噪音尽量没有，目前仅支持中文录音，可以直接在手机里录音，录音格式最好选择wav格式）如果你想训练别人的声音但是有环境噪音，可以使用UVR5-WebUI输出降噪后的音频：</p><p><img src="https://img2.imgtp.com/2024/03/02/SjpB5h48.png"></p><p>点击后加载一段时间，如果自动打开了一个新网页就说明成功了，在这个新网页里面上传音频，模型可以根据网页的文字提示来选择，输出格式就选择比较好的wav吧。输出后在你选择的目标文件夹里。</p><p>之后回到之前的网页，准备开始语音切割，根据要求填就行了：<img src="https://img2.imgtp.com/2024/03/02/zaGYkQj8.png"></p><p>如果发现切割后的音频有20秒以上的可能就需要重新设置参数并切割了</p><p>下一步 打标，先填写参数，输入路径就是刚刚切割好的音频文件夹路径</p><p><img src="https://img2.imgtp.com/2024/03/02/5qnJXyFM.png"></p><p>然后会在目标文件夹输出一个slicer.list文件，点击复制它的文件路径到下一板块：</p><p><img src="https://img2.imgtp.com/2024/03/02/zwHgZXEs.png"></p><p>然后点击”是否开启达标WebUI”，等待它打开，然后就开始修改语音转换的文字有没有错误，或者是有停顿的地方没有逗号等。改完一页后点击上面的Submit Text（保存），然后点Next index（下一页）。每次切换都要点一下Submit Text保存。最后弄好后点击上面的Save File 保存后返回主页面，关闭”是否开启打标WebUI”，将刚刚的修改后的list文件准备好（最好复制到一个地方）</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>请先准备好6gb以上的显存</p><p>（反正可以去试试，配置太低的会报“很遗憾您这没有能用的显卡来支持您训练”或者原因是整合包下的torch版本与我的cuda版本不兼容<br>ps：具有相同问题的朋友可以在整合包下的runtime文件夹运行cmd，输入python.exe -c “import torch; print(torch.cuda.is_available())”<br>若返回结果为False，则是与我相同的问题）</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的故事（2024寒假）</title>
      <link href="/2024/02/24/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%882024%E5%AF%92%E5%81%87%EF%BC%89/"/>
      <url>/2024/02/24/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%882024%E5%AF%92%E5%81%87%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>没错我又来了，2024大二上寒假汇报</p><p>寒假开始，我去了解了下大数据集群，Hadoop，玩了玩发现电脑配置太低了，内存不够玩起卡，也就对虚拟机和linux系统增熟了点儿映像。后面就回去继续搞Java了，微服务项目学成在线，那个项目是真的大，我已经不想写了，写到媒资管理，中途写的时候硬是出现了好多bug，有的时候一个bug卡我两天，不过还是都解决了，主要是虚拟机是我自己配的，不然应该也不会出现那么多bug，还是要对linux操作系统了解更深才行，还有docker这个部署的玩意儿。<br>发现跟着教学视频写还是挺流畅的，但是自己不看教程只看接口文档还是比较难下手的，后面要找实习了找个单体架构项目练练手吧。之后我就重新把我的博客翻新了下，用Hexo+Shoka搭建的，也是花了我近一周的时间，搜索功能和评论啥的研究了半天。过年的那几天就没怎么搞了一直打游戏，偶尔搬运搬运博文到新博客。之后有位英国留学生网友找到我喊我一起做项目，当时我正好也想做项目，弄个《项目导航》的项目，类似知识付费那种，卖的是各种项目的接口和教程，而我们打算弄的项目围绕AIGC进行开发，三人小组团队，还有位负责引流，目前项目已经进入测试状态了，等加些资源，完善bot,备案完就可以正式上线了。希望能成功吧，毕竟是我的第一个合作搞的项目，以前都是个人且没有商用价值的。</p><p>这个寒假也是过得非常累，晚上守店，半夜搞这些，还要打游戏，一天没时间得。</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue知识+调用后端</title>
      <link href="/2024/02/17/IT%E7%AC%94%E8%AE%B0/vue%E7%9F%A5%E8%AF%86+%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/02/17/IT%E7%AC%94%E8%AE%B0/vue%E7%9F%A5%E8%AF%86+%E7%BB%83%E6%89%8B%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p> 创建vue 项目教程:<a href="https://hepingan.top/2024/02/04/%E5%89%8D%E7%AB%AF/%E9%80%9A%E8%BF%87node-js%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/">通过node.js部署vue项目 - 前端 | 练竹园 &#x3D; 何平安 &#x3D; 世界很大，代码连接世界 (hepingan.top)</a></p><p>项目目录介绍：<img src="https://img2.imgtp.com/2024/02/17/GRnBp6y0.png"></p><p>路由就是一个url地址，看App.vue的代码和index.js就知道了</p><ul><li>App.vue是所有页面的入口</li></ul><h2 id="Element-ui"><a href="#Element-ui" class="headerlink" title="Element-ui"></a>Element-ui</h2><p>官网：<a href="https://element.eleme.cn/#/zh-CN/component/installation">组件 | Element</a></p><p>就是一个好看的组件库，不用你自己写css了。</p><p>推荐使用 npm 的方式安装，它能更好地和 <a href="https://webpack.js.org/">webpack</a> 打包工具配合使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure><p><strong>CDN</strong></p><p>目前可以通过 <a href="https://unpkg.com/element-ui/">unpkg.com&#x2F;element-ui</a> 获取到最新版本的资源，在页面上引入 js 和 css 文件即可开始使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引入使用：</p><p>在 main.js 中写入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码便完成了 Element 的引入。需要注意的是，样式文件需要单独引入。</p><h4 id="按需引入"><a href="#按需引入" class="headerlink" title="按需引入"></a>按需引入</h4><p>借助 <a href="https://github.com/QingWei-Li/babel-plugin-component">babel-plugin-component</a>，我们可以只引入需要的组件，以达到减小项目体积的目的。</p><p>首先，安装 babel-plugin-component：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-component -D</span><br></pre></td></tr></table></figure><p>然后，将 .babelrc 修改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="string">&quot;es2015&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;modules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;component&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;libraryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;element-ui&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;styleLibraryName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>接下来，如果你只希望引入部分组件，比如 Button 和 Select，那么需要在 main.js 中写入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">Select</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">Button</span>.<span class="property">name</span>, <span class="title class_">Button</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">Select</span>.<span class="property">name</span>, <span class="title class_">Select</span>);</span><br><span class="line"><span class="comment">/* 或写为</span></span><br><span class="line"><span class="comment"> * Vue.use(Button)</span></span><br><span class="line"><span class="comment"> * Vue.use(Select)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="测试组件"><a href="#测试组件" class="headerlink" title="测试组件"></a>测试组件</h3><p>随便测试个组件，我这里拿个按钮：直接在App.vue里写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>可以在assets里添加一个global.css里面写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>意思就是将默认的样式设置为间距为0且全部默认为盒子</p><p>有了这玩意儿写页面就简单了</p><h2 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h2><p>我学vue单纯只是为了调用我的后端接口，所以才学到这儿的，其实之前也在学校学了vue的，但那个真的是连vue的项目都没教你怎么创建，就叫你vue.js的一些入门语法，太垃圾了，果然IT还是要自学。</p><p><strong>这里以登录接口为例</strong></p><p>在src下新建个utils&#x2F;request.js，里面封装一个请求后端的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router&quot;</span>;</span><br><span class="line"><span class="comment">// import &#123;serverIp&#125; from &quot;../../public/config&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line"><span class="comment">//请求地址</span></span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">`http://localhost:9090`</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">30000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request 拦截器</span></span><br><span class="line"><span class="comment">// 可以自请求发送前对请求做一些处理</span></span><br><span class="line"><span class="comment">// 比如统一加token，对请求参数统一加密</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/json;charset=utf-8&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;user&quot;</span>)) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (user) &#123;</span><br><span class="line">        config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = user.<span class="property">token</span>;  <span class="comment">// 设置请求头</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line"><span class="comment">// 可以在接口响应后统一处理结果</span></span><br><span class="line">request.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = response.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// 如果是返回的文件</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">responseType</span> === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 兼容服务端返回的字符串数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> res === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            res = res ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res) : res</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 当权限验证不通过的时候给出提示</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="string">&#x27;401&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// ElementUI.Message(&#123;</span></span><br><span class="line">            <span class="comment">//     message: res.msg,</span></span><br><span class="line">            <span class="comment">//     type: &#x27;error&#x27;</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span> + error) <span class="comment">// for debug</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记得去修改里面的请求地址</p><p>然后新建个login页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">        style=&quot;margin: 200px auto; background-color: #fff; width: 350px; height: 300px; padding: 20px; border-radius: 10px&quot;&gt;</span><br><span class="line">      &lt;div style=&quot;margin: 20px 0; text-align: center; font-size: 24px&quot;&gt;&lt;b&gt;登 录&lt;/b&gt;&lt;/div&gt;</span><br><span class="line">      &lt;el-form :model=&quot;user&quot; :rules=&quot;rules&quot; ref=&quot;userForm&quot;&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;username&quot;&gt;</span><br><span class="line">          &lt;el-input size=&quot;medium&quot; style=&quot;margin: 10px 0&quot; prefix-icon=&quot;el-icon-user&quot; v-model=&quot;user.username&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;password&quot;&gt;</span><br><span class="line">          &lt;el-input size=&quot;medium&quot; style=&quot;margin: 10px 0&quot; prefix-icon=&quot;el-icon-lock&quot; show-password</span><br><span class="line">                    v-model=&quot;user.password&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item style=&quot;margin: 10px 0; text-align: right&quot;&gt;</span><br><span class="line">          &lt;el-button type=&quot;warning&quot; size=&quot;small&quot; autocomplete=&quot;off&quot; @click=&quot;$router.push(&#x27;/register&#x27;)&quot;&gt;注册&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; autocomplete=&quot;off&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;setRoutes&#125; from &quot;@/router&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;&#125;,</span><br><span class="line">      rules: &#123;</span><br><span class="line">        username: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入用户名&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 3, max: 10, message: &#x27;长度在 3 到 5 个字符&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">        password: [</span><br><span class="line">          &#123;required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27;&#125;,</span><br><span class="line">          &#123;min: 1, max: 20, message: &#x27;长度在 1 到 20 个字符&#x27;, trigger: &#x27;blur&#x27;&#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      this.$refs[&#x27;userForm&#x27;].validate((valid) =&gt; &#123;</span><br><span class="line">        if (valid) &#123;  // 表单校验合法</span><br><span class="line">          this.request.post(&quot;/user/login&quot;, this.user).then(res =&gt; &#123;</span><br><span class="line">            if (res.code === &#x27;200&#x27;) &#123;</span><br><span class="line">              localStorage.setItem(&quot;user&quot;, JSON.stringify(res.data))  // 存储用户信息到浏览器</span><br><span class="line">              localStorage.setItem(&quot;menus&quot;, JSON.stringify(res.data.menus))  // 存储用户信息到浏览器</span><br><span class="line">              // 动态设置当前用户的路由</span><br><span class="line">              setRoutes()</span><br><span class="line">              this.$message.success(&quot;登录成功&quot;)</span><br><span class="line"></span><br><span class="line">              if (res.data.role === &#x27;ROLE_STUDENT&#x27;) &#123;</span><br><span class="line">                this.$router.push(&quot;/front/home&quot;)</span><br><span class="line">              &#125; else &#123;</span><br><span class="line">                this.$router.push(&quot;/&quot;)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">              this.$message.error(res.msg)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  background-image: linear-gradient(to bottom right, #FC466B, #3F5EFB);</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>。。。明天再写</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 捣鼓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SpringMvc登录拦截Hexo博客</title>
      <link href="/2024/02/13/IT%E7%AC%94%E8%AE%B0/SpringMvc%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AAHexo/"/>
      <url>/2024/02/13/IT%E7%AC%94%E8%AE%B0/SpringMvc%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AAHexo/</url>
      
        <content type="html"><![CDATA[<p><strong>图库跑路了所以图片看不了了</strong></p><p><strong>SpringMvC中的MVC是什么？</strong></p><p>MVC是一种<strong>设计模式</strong>，这种模式的理念是将复杂的代码分为三个模式，MVC主要解决表现层的问题。</p><p>浏览器访问表现层（Controller）–&gt;表现层访问业务层–&gt;将数据封装到(Model)–&gt;再通过（View）渲染</p><p>业务逻辑和实现思路：对我的博客想添加一个登录页面，即需要对我博客下的所有地址进行拦截，而这与平时所练的接口拦截差不多，因为登录博客页面也是个get请求。采用JWT令牌进行校验。至于为什么要对我的博客进行拦截，后面我的新项目你就知道答案了awa~</p><p>先用IDEA新建一个项目</p><p><img src="https://img2.imgtp.com/2024/02/13/kNQ4F5pi.png"></p><p><img src="https://img2.imgtp.com/2024/02/13/JYBWJ0TC.png"></p><p>里面创建好如下的目录：</p><p><img src="https://img2.imgtp.com/2024/02/13/qM3YgrHX.png"></p><p>user类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库的话就三个列，id 主键递增，name 和 password</p><p>再在application里配置下自己的数据库地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxx</span></span><br><span class="line">    <span class="attr">url:</span>  <span class="string">jdbc:mysql://localhost:3306/user?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginMapper loginMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String LOGIN_SUCCESS=<span class="string">&quot;登录成功！&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String LOGIN_FAIL=<span class="string">&quot;用户名或密码错误，登录失败&quot;</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...其他处理请求的方法</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;用户名：&#123;&#125;&quot;</span>, user.getName());</span><br><span class="line">        <span class="comment">// 调用Mapper方法，根据用户名查询数据库</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span>loginMapper.login(user);</span><br><span class="line">        <span class="keyword">return</span> u!=<span class="literal">null</span>?LOGIN_SUCCESS: LOGIN_FAIL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Mapper层:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Mapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM users WHERE name = #&#123;name&#125; AND password = #&#123;password&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">login</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接下来就是最关键的jwt令牌和登录拦截了~</strong></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Shoka博客搭建和全功能完善</title>
      <link href="/2024/02/07/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/Hexo-Shoka%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E5%85%A8%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/"/>
      <url>/2024/02/07/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/Hexo-Shoka%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%92%8C%E5%85%A8%E5%8A%9F%E8%83%BD%E5%AE%8C%E5%96%84/</url>
      
        <content type="html"><![CDATA[<p>转载文章：<a href="https://blog.csdn.net/weixin_43642577/article/details/126713252">Hexo+shoka主题+github&#x2F;服务器搭建个人博客-CSDN博客</a></p><p><a href="https://shoka.lostyu.me/tags/Hexo/">标签：Hexo | Yume Shoka &#x3D; 優萌初華 &#x3D; 有夢書架 (lostyu.me)</a></p><p>官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p>shoka主题：<a href="https://shoka.lostyu.me/">https://shoka.lostyu.me/</a></p><p>我的博客：<a href="http://ai.hepingan.top/">http://ai.hepingan.top</a><br>欢迎来参观，也欢迎加友链~</p><h2 id="I、安装"><a href="#I、安装" class="headerlink" title="I、安装"></a>I、安装</h2><blockquote><ol><li><strong>安装node.js和git</strong></li><li><strong>下载Hexo</strong></li></ol></blockquote><ol><li><strong>安装node.js和git</strong></li></ol><p>首先确定自己的node.js和git是否已经安装了。用一下命令检测，未安装<a href="https://so.csdn.net/so/search?q=%E7%99%BE%E5%BA%A6%E4%B8%80%E4%B8%8B&spm=1001.2101.3001.7020">百度一下</a>安装即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br><span class="line">123</span><br></pre></td></tr></table></figure><ol><li><strong>下载Hexo</strong></li></ol><p>看官网：(<strong>记得以管理员运行哦</strong>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h2 id="II、建站"><a href="#II、建站" class="headerlink" title="II、建站"></a>II、建站</h2><blockquote><ol><li><strong>初始化项目 hexo init</strong></li><li><strong>启动服务器 hexo server</strong></li></ol></blockquote><ol><li><strong>初始化项目</strong></li></ol><p>先创建一个文件夹，myblog，进入终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init  <span class="comment">#初始化hexo</span></span><br><span class="line"><span class="comment"># 没有提前创建文件夹可以用下面的命令</span></span><br><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>虽然有报错，但是看大概意思是一开始链接失败，后面重置了成功了。新建了<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>项目的文件目录长这样：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/fa29f5e0a247c884c8771fc8795aaa79.png" alt="img"></p><ol><li><p><strong>启动服务器</strong></p><p>在当前博客目录下运行：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i <span class="comment"># 其实不知道这个是安装什么依赖</span></span><br><span class="line">npm install hexo-deployer-git --save   <span class="comment"># 安装插件</span></span><br><span class="line">hexo server  <span class="comment"># 启动服务器。默认情况下，访问网址为： http://localhost:4000/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里可以不用安装依赖和插件，直接启动服务器也是可以的。</p><p>启动了服务器了，访问下地址：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>长这样，感觉不咋好看。到时候得换成那个少女粉的主题嘻嘻</p><h2 id="III、部署到GitHub"><a href="#III、部署到GitHub" class="headerlink" title="III、部署到GitHub"></a>III、部署到GitHub</h2><blockquote><ol><li><strong>创建个仓库 dabing85.github.io</strong></li><li><strong>安装 hexo-deployer-git 部署插件</strong></li><li><strong>修改_config.yml文件</strong></li><li><strong>代码部署到git并授权</strong></li><li><strong>访问：</strong><code>dabing85.github.io</code></li></ol></blockquote><p>先部署到github吧，后面等备案了部署到自己的服务器上去嘻嘻。应该就是修改一下配置文件就可以了。</p><ol><li><strong>创建个仓库 dabing85.github.io</strong></li><li><strong>安装 hexo-deployer-git 部署插件</strong></li></ol><p>刚刚就安装过了，就是这个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save   <span class="comment"># 安装插件</span></span><br></pre></td></tr></table></figure><ol><li><strong>修改_config.yml文件</strong></li></ol><p>部署推荐用ssh密钥的方式快一些。怎么生成<a href="https://so.csdn.net/so/search?q=%E5%85%AC%E9%92%A5&spm=1001.2101.3001.7020">公钥</a>，可参考：</p><p>配过本机公钥就不用管了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:dabing85/dabing85.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol><li><strong>运行下面几个命令</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g<span class="comment"># 生成静态文件</span></span><br><span class="line">hexo d<span class="comment"># 部署代码到GitHub上，之后会跳出github授权的框</span></span><br></pre></td></tr></table></figure><ol><li><strong>访问：</strong><code>dabing85.github.io</code></li></ol><h2 id="Ⅳ、美化博客"><a href="#Ⅳ、美化博客" class="headerlink" title="Ⅳ、美化博客"></a>Ⅳ、美化博客</h2><blockquote><ol><li>安装需要的依赖插件</li><li>下载主题</li><li>修改&#x2F;_config.yml 配置切换主题</li><li>重新编译发布 hexo clean &amp; hexo deploy</li><li>访问<code>dabing85.github.io</code></li><li>修改对应的配置文件</li></ol></blockquote><p>看上这个少女粉的主题了，橙总介绍的：<a href="https://shoka.lostyu.me/">shoka.lostyu.me</a></p><p>文档说明：<a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/</a></p><p>基本配置: <a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/</a></p><p>页面配置: <a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/display/</a></p><p>依赖插件: <a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/dependents/">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/dependents/</a></p><p>为了可视化，我直接用idea打开mybolg在idea的终止执行命令。也可以看看都添加了些什么文件。</p><h3 id="1-依赖插件安装"><a href="#1-依赖插件安装" class="headerlink" title="1- 依赖插件安装"></a>1- 依赖插件安装</h3><p>参考上方链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-multi-markdown-it --save</span><br><span class="line">npm i hexo-autoprefixer --save</span><br><span class="line">npm i  hexo-algolia --save</span><br><span class="line">npm i hexo-algoliasearch --save</span><br><span class="line">npm i hexo-symbols-count-time --save</span><br><span class="line">npm i hexo-feed --save</span><br></pre></td></tr></table></figure><p><img src="https://image.dabing.cool/image/1655638217584-b2acf7bc-eb29-430c-a973-7e0d6ec57d4c.png" alt="img"></p><p>对应的依赖配置直接复制文档里的内容到 <code>themes/shoka/_config.yml</code>主题配置文件中。这个路径现在还没有，等会下载完主题就有了。</p><h3 id="2-下载主题"><a href="#2-下载主题" class="headerlink" title="2- 下载主题"></a>2- 下载主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</span><br></pre></td></tr></table></figure><p>下载完毕多了这么个文件夹。</p><p>让这个主题起效：<br>修改站点配置文件 <code>/_config.yml </code>，把主题改为 shoka</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">shoka</span></span><br></pre></td></tr></table></figure><p>重新编译部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>访问一下<code>https://dabing85.github.io/</code>呐，长这样：</p><p><img src="https://image.dabing.cool/image/1655640206227-f6aef02a-bf45-4b1d-bbd5-dcf3451a4fc9.png" alt="img"></p><h3 id="3-修改主题配置文件-shoka-config-yml"><a href="#3-修改主题配置文件-shoka-config-yml" class="headerlink" title="3- 修改主题配置文件&#x2F;shoka&#x2F;_config.yml"></a>3- 修改主题配置文件&#x2F;shoka&#x2F;_config.yml</h3><p>参考主题：<a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/</a></p><p>要修改一些图片如头像，可以在<code>\themes\shoka\source\images</code>路径下修改，直接替换，要<strong>同名</strong>！！！</p><p>下面是我的配置文件给大家参考一些，也可能不够完善：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Alternate site name</span></span><br><span class="line"><span class="attr">alternate:</span> <span class="string">Dabing</span></span><br><span class="line"></span><br><span class="line"><span class="attr">open_graph:</span></span><br><span class="line">  <span class="comment">#twitter_id:</span></span><br><span class="line">  <span class="comment">#google_plus:</span></span><br><span class="line">  <span class="comment">#fb_admins:</span></span><br><span class="line">  <span class="comment">#fb_app_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Assets</span></span><br><span class="line"><span class="attr">statics:</span> <span class="string">/</span>    <span class="comment">#/ #//cdn.jsdelivr.net/gh/username/RepositoryName@latest/</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">images</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># themes/shoka/source/images/***</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/apple-touch-icon.png</span></span><br><span class="line">  <span class="comment">#safari_pinned_tab: /logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /browserconfig.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dark Mode</span></span><br><span class="line"><span class="comment"># By default, the page judges whether to turn on the dark mode according to the device settings or user selection</span></span><br><span class="line"><span class="comment"># if `true`, the page will be displayed directly as Dark Mode, unless the user makes another choice</span></span><br><span class="line"><span class="comment"># 夜间模式</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># By default the page will automatically scroll to the last viewed position</span></span><br><span class="line"><span class="comment"># if `false`, automatic positioning will be turned off</span></span><br><span class="line"><span class="comment"># 自动定位 自动定位到上次浏览的位置</span></span><br><span class="line"><span class="attr">auto_scroll:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Whether to show the loading cat</span></span><br><span class="line"><span class="comment"># 是否显示页面加载动漫 就是每次都看到的那个猫猫</span></span><br><span class="line"><span class="attr">loader:</span></span><br><span class="line">  <span class="attr">start:</span> <span class="literal">true</span> <span class="comment"># When entering the page</span></span><br><span class="line">  <span class="attr">switch:</span> <span class="literal">true</span> <span class="comment"># When switching to another page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># click with Firework</span></span><br><span class="line"><span class="comment"># 页面特效 单击页面的烟花效果</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span></span><br><span class="line">    <span class="comment"># - &quot;rgba(255,182,185,.9)&quot;</span></span><br><span class="line">    <span class="comment"># - &quot;rgba(250,227,217,.9)&quot;</span></span><br><span class="line">    <span class="comment"># - &quot;rgba(187,222,214,.9)&quot;</span></span><br><span class="line">    <span class="comment"># - &quot;rgba(138,198,209,.9)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载谷歌字体</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Font options:</span></span><br><span class="line">  <span class="comment"># `external: true` will load this font family from `host` above.</span></span><br><span class="line">  <span class="comment"># `family: Times New Roman`. Without any quotes.</span></span><br><span class="line">  <span class="comment"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Global font settings used for all elements inside &lt;body&gt;.</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Mulish</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for alternate title.</span></span><br><span class="line">  <span class="comment"># 备用字体</span></span><br><span class="line">  <span class="attr">logo:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Fredericka</span> <span class="string">the</span> <span class="string">Great</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">3.5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for site title.</span></span><br><span class="line">  <span class="comment"># 站点字体</span></span><br><span class="line">  <span class="attr">title:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">JP</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">2.5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for headlines (&lt;h1&gt; to &lt;h6&gt;).</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span></span><br><span class="line">    <span class="attr">size:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for posts.</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Font settings for &lt;code&gt; and code blocks.</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Inconsolata</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># project of https://www.iconfont.cn/</span></span><br><span class="line"><span class="comment"># //at.alicdn.com/t/font_1832207_c8i9n1ulxlt.css =&gt; 1832207_c8i9n1ulxlt</span></span><br><span class="line"><span class="attr">iconfont:</span> <span class="string">&quot;1832207_igi8uaupcus&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="string">文章:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">feather</span></span><br><span class="line">    <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">list-alt</span></span><br><span class="line">    <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">    <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line"><span class="comment">#  friends: /friends/ || heart</span></span><br><span class="line"><span class="comment">#  links: /links/ || magic</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon || color`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink,</span></span><br><span class="line"><span class="comment"># secend value is the name of Font icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">github:</span> <span class="string">https://github.com/dabing85</span> <span class="string">||</span> <span class="string">github</span> <span class="string">||</span> <span class="string">&quot;#191717&quot;</span></span><br><span class="line">  <span class="comment">#google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#twitter: https://twitter.com/yourname || twitter || &quot;#00aff0&quot;</span></span><br><span class="line">  <span class="comment">#zhihu: https://www.zhihu.com/people/yourname || zhihu || &quot;#1e88e5&quot;</span></span><br><span class="line">  <span class="comment">#music: https://music.163.com/#/user/home?id=yourid || cloud-music || &quot;#e60026&quot;</span></span><br><span class="line">  <span class="comment">#weibo: https://weibo.com/yourname || weibo || &quot;#ea716e&quot;</span></span><br><span class="line">  <span class="comment">#about: https://about.me/yourname || address-card || &quot;#3b5998&quot;</span></span><br><span class="line">  <span class="comment">#email: mailto:yourname@mail.com || envelope || &quot;#55acd5&quot;</span></span><br><span class="line">  <span class="comment">#facebook: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#youtube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  <span class="comment">#douban: https://www.douban.com/people/yourname/ || douban</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position.</span></span><br><span class="line">  <span class="comment"># position: left</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">  <span class="comment"># Replace the default avatar image and set the url here.</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">avatar.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="attr">widgets:</span></span><br><span class="line">  <span class="comment"># if true, will show random posts</span></span><br><span class="line">  <span class="comment"># 显示随机文章</span></span><br><span class="line">  <span class="attr">random_posts:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># if true, will show recent comments</span></span><br><span class="line">  <span class="comment"># 显示最近评论</span></span><br><span class="line">  <span class="attr">recent_comments:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment"># 页尾全站统计局</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2010</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sakura</span> <span class="string">rotate</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#ffc0cb&quot;</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章界面统计</span></span><br><span class="line"><span class="attr">post:</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 奖励 这里我不需要</span></span><br><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment">#reward:</span></span><br><span class="line"><span class="comment">#  # If true, reward will be displayed in every article by default.</span></span><br><span class="line"><span class="comment">#  enable: true</span></span><br><span class="line"><span class="comment">#  account:</span></span><br><span class="line"><span class="comment">#    wechatpay: /wechatpay.png</span></span><br><span class="line"><span class="comment">#    alipay: /alipay.png</span></span><br><span class="line"><span class="comment">#    paypal: /paypal.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TagCloud settings for tags page.</span></span><br><span class="line"><span class="attr">tagcloud:</span></span><br><span class="line">  <span class="comment"># All values below are same as default, change them by yourself.</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">16</span> <span class="comment"># Minimun font size in px</span></span><br><span class="line">  <span class="attr">max:</span> <span class="number">22</span> <span class="comment"># Maxium font size in px</span></span><br><span class="line">  <span class="attr">start:</span> <span class="string">&quot;#72cecf&quot;</span> <span class="comment"># Start color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">end:</span> <span class="string">&quot;#ffbac3&quot;</span> <span class="comment"># End color (hex, rgba, hsla or color keywords)</span></span><br><span class="line">  <span class="attr">amount:</span> <span class="number">200</span> <span class="comment"># Amount of tags, change it if you have more than 200 tags</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Plugins &amp; Services Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/share-your-work/licensing-types-examples</span></span><br><span class="line"><span class="comment"># Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span></span><br><span class="line"><span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line"><span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment"># deed.zh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Comments</span></span><br><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/amehime/MiniValine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="comment"># 配置你的appId</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="comment"># 配置你的appKey</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">ヽ(○´∀`)ﾉ♪</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mp</span> <span class="comment"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic 文章阅读量统计</span></span><br><span class="line">  <span class="attr">NoRecordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="attr">powerMode:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tagMeta:</span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="string">新朋友</span></span><br><span class="line">    <span class="attr">master:</span> <span class="string">主人</span></span><br><span class="line">    <span class="attr">friend:</span> <span class="string">小伙伴</span></span><br><span class="line">    <span class="attr">investor:</span> <span class="string">金主粑粑</span></span><br><span class="line">  <span class="attr">tagColor:</span></span><br><span class="line">    <span class="attr">master:</span> <span class="string">&quot;var(--color-orange)&quot;</span></span><br><span class="line">    <span class="attr">friend:</span> <span class="string">&quot;var(--color-aqua)&quot;</span></span><br><span class="line">    <span class="attr">investor:</span> <span class="string">&quot;var(--color-pink)&quot;</span></span><br><span class="line">  <span class="attr">tagMember:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="comment"># - hash of master@email.com</span></span><br><span class="line">      <span class="comment"># - hash of master2@email.com</span></span><br><span class="line">    <span class="attr">friend:</span></span><br><span class="line">      <span class="comment"># - hash of friend@email.com</span></span><br><span class="line">      <span class="comment"># - hash of friend2@email.com</span></span><br><span class="line">    <span class="attr">investor:</span></span><br><span class="line">      <span class="comment"># - hash of investor1@email.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bgm 背景音乐</span></span><br><span class="line"><span class="attr">audio:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">列表1</span></span><br><span class="line">    <span class="attr">list:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">https://music.163.com/#/playlist?id=2943811283</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">https://music.163.com/#/playlist?id=2297706586</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">列表2</span></span><br><span class="line">    <span class="attr">list:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">https://music.163.com/#/playlist?id=2031842656</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># random image api</span></span><br><span class="line"><span class="comment"># 随机图库</span></span><br><span class="line"><span class="attr">image_server:</span> <span class="comment"># &quot;https://acg.xydwz.cn/api/api.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Algolia Search</span></span><br><span class="line"><span class="comment"># For more information: https://www.algolia.com</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">hits:</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/amehime/hexo-renderer-multi-markdown-it</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Quicklink Support</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/GoogleChromeLabs/quicklink</span></span><br><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="comment"># Custom a time in milliseconds by which the browser must execute prefetching.</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="comment"># Default (true) will attempt to use the fetch() API if supported (rather than link[rel=prefetch]).</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># For more flexibility you can add some patterns (RegExp, Function, or Array) to ignores.</span></span><br><span class="line">  <span class="comment"># See: https://github.com/GoogleChromeLabs/quicklink#custom-ignore-patterns</span></span><br><span class="line">  <span class="attr">ignores:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># analytics &amp; SEO Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="comment"># &lt;app_id&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Baidu transformation on mobile devices.</span></span><br><span class="line"><span class="attr">disable_baidu_transformation:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line"><span class="attr">google_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster</span></span><br><span class="line"><span class="attr">bing_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line"><span class="attr">yandex_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO.</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 渲染md文件</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span> <span class="comment"># 渲染器设置</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">false</span> <span class="comment"># 过滤 HTML 标签</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">true</span> <span class="comment"># 使用 &#x27;/&#x27; 来闭合单标签 （比如 &lt;br /&gt;）。</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span> <span class="comment"># 转换段落里的 &#x27;\n&#x27; 到 &lt;br&gt;。</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span> <span class="comment"># 将类似 URL 的文本自动转换为链接。</span></span><br><span class="line">    <span class="attr">typographer:</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span></span><br><span class="line">  <span class="attr">plugins:</span> <span class="comment"># markdown-it 插件设置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-toc-and-anchor</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">options:</span> <span class="comment"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></span><br><span class="line">          <span class="attr">tocClassName:</span> <span class="string">&#x27;toc&#x27;</span></span><br><span class="line">          <span class="attr">anchorClassName:</span> <span class="string">&#x27;anchor&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">markdown-it-multimd-table</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="attr">multiline:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">rowspan:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">headerless:</span> <span class="literal">true</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">./markdown-it-furigana</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="attr">fallbackParens:</span> <span class="string">&quot;()&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">plugin:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">./markdown-it-spoiler</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">options:</span></span><br><span class="line">          <span class="attr">title:</span> <span class="string">&quot;你知道得太多了&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># minify 配置，压缩css/js/html</span></span><br><span class="line"><span class="attr">minify:</span></span><br><span class="line">  <span class="attr">html:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span> <span class="comment"># 排除 hexo-feed 用到的模板文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**/json.ejs&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**/atom.ejs&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**/rss.ejs&#x27;</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**/*.min.css&#x27;</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">mangle:</span></span><br><span class="line">      <span class="attr">toplevel:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">output:</span></span><br><span class="line">    <span class="attr">compress:</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;**/*.min.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码高亮</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">autoprefixer:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;*.min.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局搜索</span></span><br><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">appId:</span>  <span class="comment">#Your appId</span></span><br><span class="line">  <span class="attr">apiKey:</span>  <span class="comment">#Your apiKey</span></span><br><span class="line">  <span class="attr">adminApiKey:</span>  <span class="comment">#Your adminApiKey</span></span><br><span class="line">  <span class="attr">chunkSize:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&quot;&quot;</span> <span class="comment">#&quot;shoka&quot;</span></span><br><span class="line">  <span class="attr">fields:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">title</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">path</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">categories</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">content:strip:truncate,0,2000</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">gallery</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">photos</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">java,git,springcloud</span> <span class="comment">#站点关键词，用 “,” 分隔</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">&quot;-date&quot;</span></span><br><span class="line">  <span class="attr">tag_dir:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">category_dir:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">rss:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">&quot;themes/shoka/layout/_alternate/rss.ejs&quot;</span></span><br><span class="line">    <span class="attr">output:</span> <span class="string">&quot;rss.xml&quot;</span></span><br><span class="line">  <span class="attr">atom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">&quot;themes/shoka/layout/_alternate/atom.ejs&quot;</span></span><br><span class="line">    <span class="attr">output:</span> <span class="string">&quot;atom.xml&quot;</span></span><br><span class="line">  <span class="attr">jsonFeed:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">&quot;themes/shoka/layout/_alternate/json.ejs&quot;</span></span><br><span class="line">    <span class="attr">output:</span> <span class="string">&quot;feed.json&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#! ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">#! DO NOT EDIT THE FOLLOWING `vendors` SETTINGS</span></span><br><span class="line"><span class="comment">#! UNLESS YOU KNOW WHAT YOU ARE DOING</span></span><br><span class="line"><span class="comment">#! Script dependencies will be combined with jsDelivr (cdn.jsdelivr.net)</span></span><br><span class="line"><span class="comment">#! ---------------------------------------------------------------</span></span><br><span class="line"><span class="attr">vendors:</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="attr">katex:</span> <span class="string">npm/katex@0.12.0/dist/katex.min.css</span></span><br><span class="line">    <span class="attr">comment:</span> <span class="string">css/comment.css</span></span><br><span class="line">    <span class="attr">fancybox:</span> <span class="string">combine/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css,npm/justifiedGallery@3.8.1/dist/css/justifiedGallery.min.css</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="attr">pace:</span> <span class="string">npm/pace-js@1.0.2/pace.min.js</span></span><br><span class="line">    <span class="attr">pjax:</span> <span class="string">npm/pjax@0.2.8/pjax.min.js</span></span><br><span class="line">    <span class="attr">fetch:</span> <span class="string">npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js</span></span><br><span class="line">    <span class="attr">anime:</span> <span class="string">npm/animejs@3.2.0/lib/anime.min.js</span></span><br><span class="line">    <span class="attr">algolia:</span> <span class="string">npm/algoliasearch@4/dist/algoliasearch-lite.umd.js</span></span><br><span class="line">    <span class="attr">instantsearch:</span> <span class="string">npm/instantsearch.js@4/dist/instantsearch.production.min.js</span></span><br><span class="line">    <span class="attr">lazyload:</span> <span class="string">npm/lozad@1/dist/lozad.min.js</span></span><br><span class="line">    <span class="attr">quicklink:</span> <span class="string">npm/quicklink@2/dist/quicklink.umd.js</span></span><br><span class="line">    <span class="attr">fancybox:</span> <span class="string">combine/npm/jquery@3.5.1/dist/jquery.min.js,npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js,npm/justifiedGallery@3.8.1/dist/js/jquery.justifiedGallery.min.js</span></span><br><span class="line">    <span class="attr">valine:</span> <span class="string">gh/amehime/MiniValine@4.2.2-beta10/dist/MiniValine.min.js</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="string">npm/katex@0.12.0/dist/contrib/copy-tex.min.js</span></span><br><span class="line">    <span class="attr">chart:</span> <span class="string">npm/frappe-charts@1.5.0/dist/frappe-charts.min.iife.min.js</span></span><br></pre></td></tr></table></figure><h3 id="4-修改全局配置文件-config-yml"><a href="#4-修改全局配置文件-config-yml" class="headerlink" title="4-修改全局配置文件 _config.yml"></a>4-修改全局配置文件 _config.yml</h3><p>参考官网：<a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><p>要说明一下的分类和标签的配置：</p><p><img src="https://image.dabing.cool/image/1655788779816-0938393b-2931-4d4a-94e3-9bad58aef34a.png" alt="img"></p><p>基本照着官网来就好，没啥要改的。我的给参考一下。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;不在能知，乃在能行&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;欢迎来到大冰的笔记空间~这里主要会记录编程学习笔记🌸&#x27;</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Dabing-He</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://example.com</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title/</span>  <span class="comment">#:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="comment"># 这里配置分类和标签</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span> </span><br><span class="line"><span class="attr">tag_map:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span></span><br><span class="line"><span class="attr">updated_option:</span> <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">shoka</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:dabing85/dabing85.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>再来一遍三连 hexo clean 、hexo generate、hexo deploy 即可</p><h2 id="V、其他"><a href="#V、其他" class="headerlink" title="V、其他"></a>V、其他</h2><h3 id="1-要写一篇文章："><a href="#1-要写一篇文章：" class="headerlink" title="1- 要写一篇文章："></a>1- 要写一篇文章：</h3><p>如我要写一篇文章，我就这么写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: SpringCloud2020</span><br><span class="line">date: 2022/04/30 20:46:25</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 微服务</span><br><span class="line">tags:</span><br><span class="line"><span class="section">- 微服务</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">balabala......</span><br></pre></td></tr></table></figure><p>或者在根目录下cmd输入hexo new “标题”</p><p><strong>分类</strong></p><p>在你的根目录 &#x2F;source&#x2F;_post&#x2F;hexo&#x2F; 下放一张该分类的封面图，它就会自动在首页显示这个分类了。</p><p><img src="https://image.dabing.cool/image/image-20221021113905502.png"></p><h3 id="2-jsdelivr-被墙"><a href="#2-jsdelivr-被墙" class="headerlink" title="2- jsdelivr 被墙"></a>2- jsdelivr 被墙</h3><p>我在shoka评论区找到的，评论内容如下：</p><p>您好，我这边大概去了解了一下，这个问题应该是与 jsdelivr 被墙有关，可参考 <a href="https://github.com/amehime/hexo-theme-shoka/issues/65">关于jsdeliver在国内的ICP许可证被吊销 #65</a> 里的讨论，以及 <a href="https://blog.liq2.com/article/768b74a2">jsDelivr静态文件CDN加速失效之后解决方案</a> 这一博客的评论区。我目前采取的解决方案是：</p><ul><li>修改 \themes\shoka\source\js_app 路径下的 utils.js 文件：将 cdn.jsdelivr.net 替换成 fastly.jsdelivr.net</li><li>修改 \themes\shoka\scripts\helpers 路径下的 asset.js 文件：将 cdn.jsdelivr.net 替换成 fastly.jsdelivr.net</li><li>修改 shoka 主题 _config.yml 文件（如果没有在博客根目录新增 _config.shoka.yml 文件的话）中的 statics 设置，输入完整的 fastly.jsdelivr 静态文件网址，即，设置为 <a href="https://fastly.jsdelivr.net/gh/%E4%BD%A0%E7%9A%84github%E7%94%A8%E6%88%B7%E5%90%8D/%E5%8D%9A%E5%AE%A2%E5%AF%B9%E5%BA%94%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D@latest/">https://fastly.jsdelivr.net/gh/你的github用户名/博客对应的仓库名@latest/</a> ，例如我的设置：<a href="https://fastly.jsdelivr.net/gh/jiankychen/jiankychen.github.io@latest/">https://fastly.jsdelivr.net/gh/jiankychen/jiankychen.github.io@latest/</a> （注：我不太确定 \themes\shoka\source\js_app 路径下 global.js 文件中的 var statics &#x3D; CONFIG.statics.indexOf(‘&#x2F;&#x2F;‘) &gt; 0 ? CONFIG.statics : CONFIG.root 这一行代码的逻辑，为了确保我们在 _config.yml 中设置的 statics 能够奏效，所以我在设置 _config.yml 的 statics 时加上了 https: 这一前缀，以确保 CONFIG.statics.indexOf(‘&#x2F;&#x2F;‘) &gt; 0 为 true ）</li><li>如果您配置了 valine 评论系统，则还需要将 <a href="https://fastly.jsdelivr.net/gh/amehime/MiniValine@4.2.2-beta10/dist/">https://fastly.jsdelivr.net/gh/amehime/MiniValine@4.2.2-beta10/dist/</a> 中的 MiniValine.min.js 下载到本地并做一定的修改，同时修改 shoka 主题 _config.yml 文件的 valine: js&#x2F;MiniValine.min.js 这一项设置，这一部分工作我暂时也还没能解决（目前我的 valine 评论系统仍需翻墙才能加载出来），所以无法为您提供更详细的修改建议。</li></ul><p>附注：jsdelivr 缓存刷新较慢，据说可能要 24 小时左右，所以，按照上述操作进行修改后，可能需耐心等待 jsdelivr 缓存刷新后才能 正常访问博客 ，或者也可以查找有关 刷新 jsdelivr 缓存 的资料进一步解决。</p><h2 id="Ⅵ、添加站内搜索功能"><a href="#Ⅵ、添加站内搜索功能" class="headerlink" title="Ⅵ、添加站内搜索功能"></a>Ⅵ、添加站内搜索功能</h2><p>参考文章：<a href="https://lemonman.cn/Shoka%E4%B8%BB%E9%A2%98%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2/">Hexo Shoka 主题本地搜索 - shoka - hexo | Lemonman’s Blog &#x3D; 南風未起</a></p><p>推荐使用站内搜索方式，也有另一种使用algolia搜索：<a href="https://blog.csdn.net/m0_45234510/article/details/116885792">https://blog.csdn.net/m0_45234510/article/details/116885792</a></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>本地搜索通过 hexo-generator-searchdb 插件实现，需要先安装插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure><h3 id="修改文件配置"><a href="#修改文件配置" class="headerlink" title="修改文件配置"></a>修改文件配置</h3><h4 id="修改page-is"><a href="#修改page-is" class="headerlink" title="修改page.is"></a>修改page.is</h4><p>shoka&#x2F;source&#x2F;js&#x2F;_app&#x2F;page.js 中 localSearch() 修改后的文件如下，将整个 localSearch 复制到主题的 shoka&#x2F;source&#x2F;js&#x2F;_app&#x2F;page.js 中即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> localSearch = <span class="keyword">function</span>(<span class="params">pjax</span>) &#123;</span><br><span class="line">  <span class="comment">// 参考 hexo next 主题的配置方法</span></span><br><span class="line">  <span class="comment">// 参考 https://qiuyiwu.github.io/2019/01/25/Hexo-LocalSearch/ 博文</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span> === <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!siteSearch) &#123;</span><br><span class="line">    siteSearch = <span class="variable constant_">BODY</span>.<span class="title function_">createChild</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;search&#x27;</span>,</span><br><span class="line">      <span class="attr">innerHTML</span>: <span class="string">&#x27;&lt;div class=&quot;inner&quot;&gt;&lt;div class=&quot;header&quot;&gt;&lt;span class=&quot;icon&quot;&gt;&lt;i class=&quot;ic i-search&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;div class=&quot;search-input-container&quot;&gt;&lt;input class=&quot;search-input&quot;autocompvare=&quot;off&quot;placeholder=&quot;&#x27;</span>+<span class="variable constant_">LOCAL</span>.<span class="property">search</span>.<span class="property">placeholder</span>+<span class="string">&#x27;&quot;spellcheck=&quot;false&quot;type=&quot;text&quot;id=&quot;local-search-input&quot;&gt;&lt;/div&gt;&lt;span class=&quot;close-btn&quot;&gt;&lt;i class=&quot;ic i-times-circle&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;results&quot;id=&quot;search-results&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;div id=&quot;search-stats&quot;&gt;&lt;/div&gt;&lt;div id=&quot;search-hits&quot;&gt;&lt;/div&gt;&lt;div id=&quot;search-pagination&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> isFetched = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> datas;</span><br><span class="line">  <span class="keyword">var</span> isXml = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> current_page = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> pageSize = <span class="built_in">parseInt</span>(<span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span>.<span class="property">pageSize</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">isNaN</span>(pageSize)) pageSize = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> total_pages = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> max_page_on_show = <span class="number">7</span>; <span class="comment">// 一次最多显示 7 个页码</span></span><br><span class="line">  <span class="keyword">var</span> start_page = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> end_page = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> resultItems = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// search DB path</span></span><br><span class="line">  <span class="keyword">var</span> searchPath = <span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span>.<span class="property">path</span>;</span><br><span class="line">  <span class="keyword">if</span> (searchPath.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    searchPath = <span class="string">&#x27;search.xml&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (searchPath.<span class="title function_">endsWith</span>(<span class="string">&#x27;json&#x27;</span>)) &#123;</span><br><span class="line">    isXml = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> input = $(<span class="string">&#x27;.search-input&#x27;</span>); <span class="comment">// document.querySelector(&#x27;.search-input&#x27;);</span></span><br><span class="line">  <span class="keyword">const</span> resultContent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search-hits&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> paginationContent = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search-pagination&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getIndexByWord = <span class="keyword">function</span>(<span class="params">word, text, caseSensitive</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span>.<span class="property">unescape</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">      div.<span class="property">innerText</span> = word;</span><br><span class="line">      word = div.<span class="property">innerHTML</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> wordLen = word.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (wordLen === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> startPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> position = [];</span><br><span class="line">    <span class="keyword">var</span> index = [];</span><br><span class="line">    <span class="keyword">if</span> (!caseSensitive) &#123;</span><br><span class="line">      text = text.<span class="title function_">toLowerCase</span>();</span><br><span class="line">      word = word.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((position = text.<span class="title function_">indexOf</span>(word, startPosition)) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      index.<span class="title function_">push</span>(&#123;<span class="attr">position</span>:position, <span class="attr">word</span>:word&#125;);</span><br><span class="line">      startPosition = position + wordLen;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Merge hits into slices</span></span><br><span class="line">  <span class="keyword">const</span> mergeIntoSlice = <span class="keyword">function</span>(<span class="params">start, end, index, searchText</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = index[index.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> position = item.<span class="property">position</span>;</span><br><span class="line">    <span class="keyword">var</span> word = item.<span class="property">word</span>;</span><br><span class="line">    <span class="keyword">var</span> hits = [];</span><br><span class="line">    <span class="keyword">var</span> searchTextCountInSlice = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (position + word.<span class="property">length</span> &lt;= end &amp;&amp; index.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (word === searchText) &#123;</span><br><span class="line">        searchTextCountInSlice++;</span><br><span class="line">      &#125;</span><br><span class="line">      hits.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">position</span>:position,</span><br><span class="line">        <span class="attr">length</span>: word.<span class="property">length</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> wordEnd = position + word.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Move to next position of hit</span></span><br><span class="line">      index.<span class="title function_">pop</span>();</span><br><span class="line">      <span class="keyword">while</span> (index.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">        item = index[index.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">        position = item.<span class="property">position</span>;</span><br><span class="line">        word = item.<span class="property">word</span>;</span><br><span class="line">        <span class="keyword">if</span> (wordEnd &gt; position) &#123;</span><br><span class="line">          index.<span class="title function_">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">hits</span>:hits,</span><br><span class="line">      <span class="attr">start</span>:start,</span><br><span class="line">      <span class="attr">end</span>:end,</span><br><span class="line">      <span class="attr">searchTextCount</span>: searchTextCountInSlice</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Highlight title and content</span></span><br><span class="line">  <span class="keyword">const</span> highlightKeyword = <span class="keyword">function</span>(<span class="params">text, slice</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> prevEnd = slice.<span class="property">start</span>;</span><br><span class="line">    slice.<span class="property">hits</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">hit</span>)  &#123;</span><br><span class="line">      result += text.<span class="title function_">substring</span>(prevEnd, hit.<span class="property">position</span>);</span><br><span class="line">      <span class="keyword">var</span> end = hit.<span class="property">position</span> + hit.<span class="property">length</span>;</span><br><span class="line">      result += <span class="string">&#x27;&lt;mark&gt;&#x27;</span>+ text.<span class="title function_">substring</span>(hit.<span class="property">position</span>, end)+<span class="string">&#x27;&lt;/mark&gt;&#x27;</span>;</span><br><span class="line">      prevEnd = end;</span><br><span class="line">    &#125;);</span><br><span class="line">    result += text.<span class="title function_">substring</span>(prevEnd, slice.<span class="property">end</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> pagination = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> addPrevPage = <span class="keyword">function</span>(<span class="params">current_page</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> classContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> numberContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (current_page === <span class="number">0</span>) &#123;</span><br><span class="line">        classContent = <span class="string">&#x27;#search-pagination pagination-item disabled-item&#x27;</span>;</span><br><span class="line">        numberContent = <span class="string">&#x27;&lt;span class=&quot;#search-pagination page-number&quot;&gt;&lt;i class=&quot;ic i-angle-left&quot;&gt;&lt;/i&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        classContent = <span class="string">&#x27;#search-pagination pagination-item&#x27;</span>;</span><br><span class="line">        numberContent = <span class="string">&#x27;&lt;a class=&quot;#search-pagination page-number&quot; aria-label=&quot;Prev&quot; href=&quot;#&quot;&gt;&lt;i class=&quot;ic i-angle-left&quot;&gt;&lt;/i&gt;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> prevPage = <span class="string">&#x27;&lt;li class=&quot;&#x27;</span>+ classContent +<span class="string">&#x27;&quot; id=&quot;prev-page&quot;&gt;&#x27;</span>+ numberContent+<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> prevPage;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> addNextPage = <span class="keyword">function</span>(<span class="params">current_page</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> classContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> numberContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> ((current_page + <span class="number">1</span>) === total_pages) &#123;</span><br><span class="line">        classContent = <span class="string">&#x27;#search-pagination pagination-item disabled-item&#x27;</span>;</span><br><span class="line">        numberContent = <span class="string">&#x27;&lt;span class=&quot;#search-pagination page-number&quot;&gt;&lt;i class=&quot;ic i-angle-right&quot;&gt;&lt;/i&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        classContent = <span class="string">&#x27;#search-pagination pagination-item&#x27;</span>;</span><br><span class="line">        numberContent = <span class="string">&#x27;&lt;a class=&quot;#search-pagination page-number&quot;aria-label=&quot;Next&quot;href=&quot;#&quot;&gt;&lt;i class=&quot;ic i-angle-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> nextPage = <span class="string">&#x27;&lt;li class=&quot;&#x27;</span> + classContent +<span class="string">&#x27;&quot;id=&quot;next-page&quot;&gt;&#x27;</span>+ numberContent +<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> nextPage;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> addPage = <span class="keyword">function</span>(<span class="params">index, current_page</span>)  &#123;</span><br><span class="line">      <span class="keyword">var</span> classContent = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> numberContent = <span class="string">&#x27;&lt;a class=&quot;#search-pagination page-number&quot;aria-label=&quot;&#x27;</span>+ (index + <span class="number">1</span>) +<span class="string">&#x27;&quot;href=&quot;#&quot;&gt;&#x27;</span>+(index+<span class="number">1</span>)+<span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">if</span> (index === current_page) &#123;</span><br><span class="line">        classContent = <span class="string">&#x27;#search-pagination pagination-item current&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        classContent = <span class="string">&#x27;#search-pagination pagination-item&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> page = <span class="string">&#x27;&lt;li class=&quot;&#x27;</span>+classContent+<span class="string">&#x27;&quot; id=&quot;page-&#x27;</span>+(index + <span class="number">1</span>)+<span class="string">&#x27;&quot;&gt;&#x27;</span>+numberContent+<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> addPaginationEvents = <span class="keyword">function</span>(<span class="params">start_page, end_page</span>)  &#123;</span><br><span class="line">      <span class="keyword">if</span> (total_pages &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> onPrevPageClick = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current_page &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          current_page -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (current_page &lt; start_page) &#123;</span><br><span class="line">          start_page = current_page;</span><br><span class="line">          end_page = <span class="title class_">Math</span>.<span class="title function_">min</span>(end_page, start_page + max_page_on_show);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">pagination</span>();</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> onNextPageClick = <span class="keyword">function</span>(<span class="params">event</span>)  &#123;</span><br><span class="line">        <span class="keyword">if</span> ((current_page + <span class="number">1</span>) &lt; total_pages) &#123;</span><br><span class="line">          current_page += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (current_page &gt; end_page) &#123;</span><br><span class="line">          end_page = current_page;</span><br><span class="line">          start_page = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, end_page - max_page_on_show);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">pagination</span>();</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> onPageClick = <span class="keyword">function</span>(<span class="params">event</span>)  &#123;</span><br><span class="line">        <span class="keyword">var</span> page_number = <span class="built_in">parseInt</span>(event.<span class="property">target</span>.<span class="property">ariaLabel</span>);</span><br><span class="line">        current_page = page_number - <span class="number">1</span>; <span class="comment">// note minus 1 here</span></span><br><span class="line">        <span class="title function_">pagination</span>();</span><br><span class="line">      &#125;;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">var</span> prevPage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;prev-page&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span>(prevPage != <span class="literal">null</span>)prevPage.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onPrevPageClick);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">var</span> nextPage = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;next-page&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span>(nextPage != <span class="literal">null</span>) nextPage.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onNextPageClick);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = start_page; i &lt; end_page; i += <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> page = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;page-&#x27;</span>+(i + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(page != <span class="literal">null</span>)page.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onPageClick);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    paginationContent.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>; <span class="comment">// clear</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">var</span> begin_index = <span class="title class_">Math</span>.<span class="title function_">min</span>(current_page * pageSize, resultItems.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">var</span> end_index = <span class="title class_">Math</span>.<span class="title function_">min</span>(begin_index + pageSize, resultItems.<span class="property">length</span>);</span><br><span class="line"></span><br><span class="line">    resultContent.<span class="property">innerHTML</span> = resultItems.<span class="title function_">slice</span>(begin_index, end_index).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;<span class="keyword">return</span> result.<span class="property">item</span>&#125;).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">    start_page = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">0</span>, total_pages - max_page_on_show);</span><br><span class="line">    end_page = start_page + <span class="title class_">Math</span>.<span class="title function_">min</span>(total_pages, max_page_on_show);</span><br><span class="line">    <span class="keyword">var</span> pageContent = <span class="string">&#x27;&lt;div class=&quot;#search-pagination&quot;&gt;&#x27;</span>;</span><br><span class="line">    pageContent += <span class="string">&#x27;&lt;div class=&quot;#search-pagination pagination&quot;&gt;&#x27;</span>;</span><br><span class="line">    pageContent += <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (total_pages &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// add prev page arrow, when no prev page not selectable</span></span><br><span class="line">      pageContent += <span class="title function_">addPrevPage</span>(current_page);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = start_page; i &lt; end_page; i += <span class="number">1</span>) &#123;</span><br><span class="line">        pageContent += <span class="title function_">addPage</span>(i, current_page);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// add next page arrow, when no next page not selectable</span></span><br><span class="line">      pageContent += <span class="title function_">addNextPage</span>(current_page);</span><br><span class="line">    &#125;</span><br><span class="line">    pageContent += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span><br><span class="line">    pageContent += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    pageContent += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    paginationContent.<span class="property">innerHTML</span> = pageContent;</span><br><span class="line">    <span class="title function_">addPaginationEvents</span>(start_page, end_page);</span><br><span class="line">    resultContent.<span class="property">scrollTop</span> = <span class="number">0</span>;  <span class="comment">// scroll to top</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">pjax</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">pjax</span>.<span class="title function_">refresh</span>(resultContent);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> inputEventFunction = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isFetched) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Data not fetched.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> searchText = input.<span class="property">value</span>.<span class="title function_">trim</span>().<span class="title function_">toLowerCase</span>();</span><br><span class="line">    <span class="keyword">var</span> keywords = searchText.<span class="title function_">split</span>(<span class="regexp">/[-\s]+/</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (keywords.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      keywords.<span class="title function_">push</span>(searchText);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    resultItems = [];</span><br><span class="line">    <span class="keyword">if</span> (searchText.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// Perform local searching</span></span><br><span class="line">      datas.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">var</span> categories = index.<span class="property">categories</span>, title=index.<span class="property">title</span>, content=index.<span class="property">content</span>, url=index.<span class="property">url</span>;</span><br><span class="line">        <span class="keyword">var</span> titleInLowerCase = title.<span class="title function_">toLowerCase</span>();</span><br><span class="line">        <span class="keyword">var</span> contentInLowerCase = content.<span class="title function_">toLowerCase</span>();</span><br><span class="line">        <span class="keyword">var</span> indexOfTitle = [];</span><br><span class="line">        <span class="keyword">var</span> indexOfContent = [];</span><br><span class="line">        <span class="keyword">var</span> searchTextCount = <span class="number">0</span>;</span><br><span class="line">        keywords.<span class="title function_">forEach</span>( <span class="keyword">function</span>(<span class="params">keyword</span>) &#123;</span><br><span class="line">          indexOfTitle = indexOfTitle.<span class="title function_">concat</span>(<span class="title function_">getIndexByWord</span>(keyword, titleInLowerCase, <span class="literal">false</span>));</span><br><span class="line">          indexOfContent = indexOfContent.<span class="title function_">concat</span>(<span class="title function_">getIndexByWord</span>(keyword, contentInLowerCase, <span class="literal">false</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Show search results</span></span><br><span class="line">        <span class="keyword">if</span> (indexOfTitle.<span class="property">length</span> &gt; <span class="number">0</span> || indexOfContent.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> hitCount = indexOfTitle.<span class="property">length</span> + indexOfContent.<span class="property">length</span>;</span><br><span class="line">          <span class="comment">// Sort index by position of keyword</span></span><br><span class="line">          [indexOfTitle, indexOfContent].<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">index</span>)  &#123;</span><br><span class="line">            index.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">itemLeft, itemRight</span>)  &#123;</span><br><span class="line">              <span class="keyword">if</span> (itemRight.<span class="property">position</span> !== itemLeft.<span class="property">position</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> itemRight.<span class="property">position</span> - itemLeft.<span class="property">position</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">return</span> itemLeft.<span class="property">word</span>.<span class="property">length</span> - item.<span class="property">word</span>.<span class="property">length</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> slicesOfTitle = [];</span><br><span class="line">          <span class="keyword">if</span> (indexOfTitle.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp = <span class="title function_">mergeIntoSlice</span>(<span class="number">0</span>, title.<span class="property">length</span>, indexOfTitle, searchText);</span><br><span class="line">            searchTextCount += tmp.<span class="property">searchTextCountInSlice</span>;</span><br><span class="line">            slicesOfTitle.<span class="title function_">push</span>(tmp);</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">var</span> slicesOfContent = [];</span><br><span class="line">          <span class="keyword">while</span> (indexOfContent.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> item = indexOfContent[indexOfContent.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> position = item.<span class="property">position</span>;</span><br><span class="line">            <span class="keyword">var</span> word = item.<span class="property">word</span>;</span><br><span class="line">            <span class="comment">// Cut out 100 characters</span></span><br><span class="line">            <span class="keyword">var</span> start = position - <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">var</span> end = position + <span class="number">30</span>;</span><br><span class="line">            <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">              start = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (end &lt; position + word.<span class="property">length</span>) &#123;</span><br><span class="line">              end = position + word.<span class="property">length</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (end &gt; content.<span class="property">length</span>) &#123;</span><br><span class="line">              end = content.<span class="property">length</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> tmp = <span class="title function_">mergeIntoSlice</span>(start, end, indexOfContent, searchText);</span><br><span class="line">            searchTextCount += tmp.<span class="property">searchTextCountInSlice</span>;</span><br><span class="line">            slicesOfContent.<span class="title function_">push</span>(tmp);</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="comment">// Sort slices in content by search text&#x27;s count and hits&#x27; count</span></span><br><span class="line">          slicesOfContent.<span class="title function_">sort</span>( <span class="keyword">function</span>(<span class="params">sliceLeft, sliceRight</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sliceLeft.<span class="property">searchTextCount</span> !== sliceRight.<span class="property">searchTextCount</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> sliceRight.<span class="property">searchTextCount</span> - sliceLeft.<span class="property">searchTextCount</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sliceLeft.<span class="property">hits</span>.<span class="property">length</span> !== sliceRight.<span class="property">hits</span>.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> sliceRight.<span class="property">hits</span>.<span class="property">length</span> - sliceLeft.<span class="property">hits</span>.<span class="property">length</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sliceLeft.<span class="property">start</span> - sliceRight.<span class="property">start</span>;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Select top N slices in content</span></span><br><span class="line">          <span class="keyword">var</span> upperBound = <span class="built_in">parseInt</span>(<span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span>.<span class="property">pageSize</span>, <span class="number">10</span>);</span><br><span class="line">          <span class="keyword">if</span> (upperBound &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            slicesOfContent = slicesOfContent.<span class="title function_">slice</span>(<span class="number">0</span>, upperBound);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="keyword">var</span> resultItem = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          resultItem += <span class="string">&#x27;&lt;div class=&quot;#search-hits item&quot;&gt;&#x27;</span>;</span><br><span class="line">          <span class="comment">// resultItem += &#x27;&lt;div class=&quot;#search-hits&quot;&gt;&#x27;;</span></span><br><span class="line">          <span class="comment">// resultItem += &#x27;&lt;ol class=&quot;item&quot;&gt;&#x27;</span></span><br><span class="line">          resultItem += <span class="string">&#x27;&lt;li&gt;&#x27;</span></span><br><span class="line">          <span class="comment">// resultItem += &#x27;&lt;li&gt;&#x27;;</span></span><br><span class="line">          <span class="keyword">var</span> cats = categories !== <span class="literal">undefined</span> ? <span class="string">&#x27;&lt;span&gt;&#x27;</span> + categories.<span class="title function_">join</span>(<span class="string">&#x27;&lt;i class=&quot;ic i-angle-right&quot;&gt;&lt;/i&gt;&#x27;</span>) + <span class="string">&#x27;&lt;/span&gt;&#x27;</span> : <span class="string">&#x27;&lt;span&gt;No categories&lt;/span&gt;&#x27;</span>;</span><br><span class="line">          resultItem += <span class="string">&#x27;&lt;a href=&quot;&#x27;</span>+url+<span class="string">&#x27;&quot;&gt;&#x27;</span> + cats;</span><br><span class="line">          <span class="keyword">if</span> (slicesOfTitle.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// resultItem += &#x27;&lt;li&gt;&lt;a href=&quot;&#x27;+url&#125;&quot;&gt;&#x27;+highlightKeyword(title, slicesOfTitle[0])&#125;&lt;/a&gt;&#x27;;</span></span><br><span class="line">            resultItem += <span class="string">&#x27;&lt;b&gt;&#x27;</span>+<span class="title function_">highlightKeyword</span>(title, slicesOfTitle[<span class="number">0</span>])+<span class="string">&#x27;&lt;/b&gt;&lt;br&gt;&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// resultItem += &#x27;&lt;li&gt;&lt;a href=&quot;&#x27;+url&#125;&quot;&gt;&#x27;+title&#125;&lt;/a&gt;&#x27;;</span></span><br><span class="line">            resultItem += <span class="string">&#x27;&lt;b&gt;&#x27;</span>+title+<span class="string">&#x27;&lt;/b&gt;&lt;br&gt;&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          slicesOfContent.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">slice</span>)  &#123;</span><br><span class="line">            <span class="keyword">return</span> resultItem += <span class="string">&#x27;&lt;li class=&quot;#search-hits subitem&quot;&gt;&#x27;</span>+<span class="title function_">highlightKeyword</span>(content, slice)+<span class="string">&#x27; ...&lt;/li&gt;&#x27;</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="comment">// resultItem += &#x27;&lt;/li&gt;&#x27;;</span></span><br><span class="line">          resultItem += <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">          resultItem += <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">          <span class="comment">// resultItem += &#x27;&lt;/ol&gt;&#x27;;</span></span><br><span class="line">          resultItem += <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">          resultItems.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">item</span>: resultItem,</span><br><span class="line">            id  : resultItems.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">hitCount</span>:hitCount,</span><br><span class="line">            <span class="attr">searchTextCount</span>:searchTextCount</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (keywords.<span class="property">length</span> === <span class="number">1</span> &amp;&amp; keywords[<span class="number">0</span>] === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      resultContent.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div id=&quot;no-result&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resultItems.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      resultContent.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div id=&quot;no-result&quot;&gt;&lt;i&gt;&lt;/i&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resultItems.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">resultLeft, resultRight</span>)  &#123;</span><br><span class="line">        <span class="keyword">if</span> (resultLeft.<span class="property">searchTextCount</span> !== resultRight.<span class="property">searchTextCount</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> resultRight.<span class="property">searchTextCount</span> - resultLeft.<span class="property">searchTextCount</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (resultLeft.<span class="property">hitCount</span> !== resultRight.<span class="property">hitCount</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> resultRight.<span class="property">hitCount</span> - resultLeft.<span class="property">hitCount</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultRight.<span class="property">id</span> - resultLeft.<span class="property">id</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Do pagination</span></span><br><span class="line">    total_pages = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(resultItems.<span class="property">length</span> / pageSize);</span><br><span class="line">    <span class="title function_">pagination</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> fetchData = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="variable constant_">CONFIG</span>.<span class="property">root</span> + searchPath)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;<span class="keyword">return</span> response.<span class="title function_">text</span>()&#125; )</span><br><span class="line">      .<span class="title function_">then</span>( <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="comment">// Get the contents from search data</span></span><br><span class="line">        isFetched = <span class="literal">true</span>;</span><br><span class="line">        datas = isXml ? [<span class="keyword">new</span> <span class="title class_">DOMParser</span>().<span class="title function_">parseFromString</span>(res, <span class="string">&#x27;text/xml&#x27;</span>).<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;entry&#x27;</span>)].<span class="title function_">map</span>( <span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            title  : element.<span class="title function_">querySelector</span>(<span class="string">&#x27;title&#x27;</span>).<span class="property">textContent</span>,</span><br><span class="line">            <span class="attr">content</span>: element.<span class="title function_">querySelector</span>(<span class="string">&#x27;content&#x27;</span>).<span class="property">textContent</span>,</span><br><span class="line">            url    : element.<span class="title function_">querySelector</span>(<span class="string">&#x27;url&#x27;</span>).<span class="property">textContent</span></span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;) : <span class="title class_">JSON</span>.<span class="title function_">parse</span>(res);</span><br><span class="line">        <span class="comment">// Only match articles with not empty titles</span></span><br><span class="line">        datas = datas.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;<span class="keyword">return</span> data.<span class="property">title</span>&#125; ).<span class="title function_">map</span>( <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">          data.<span class="property">title</span> = data.<span class="property">title</span>.<span class="title function_">trim</span>();</span><br><span class="line">          data.<span class="property">content</span> = data.<span class="property">content</span> ? data.<span class="property">content</span>.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">&#x27;&#x27;</span>) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          data.<span class="property">url</span> = <span class="built_in">decodeURIComponent</span>(data.<span class="property">url</span>).<span class="title function_">replace</span>(<span class="regexp">/\/&#123;2,&#125;/g</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">          <span class="keyword">return</span> data;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// Remove loading animation</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;search-hits&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;i&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">        <span class="title function_">inputEventFunction</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span>.<span class="property">preload</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fetch data.&quot;</span>);</span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span>.<span class="property">trigger</span> === <span class="string">&#x27;auto&#x27;</span>) &#123;</span><br><span class="line">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, inputEventFunction);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.search-icon&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, inputEventFunction);</span><br><span class="line">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>,<span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">inputEventFunction</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle and trigger popup window</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.popup-trigger&#x27;</span>).<span class="title function_">forEach</span>( <span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)  &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.search-pop-overlay&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;search-active&#x27;</span>);</span><br><span class="line">      input.<span class="title function_">focus</span>();</span><br><span class="line">      <span class="keyword">if</span> (!isFetched) <span class="title function_">fetchData</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle and trigger popup window</span></span><br><span class="line">  $.<span class="title function_">each</span>(<span class="string">&#x27;.search&#x27;</span>, <span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>;</span><br><span class="line">      <span class="title function_">transition</span>(siteSearch, <span class="string">&#x27;shrinkIn&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          $(<span class="string">&#x27;.search-input&#x27;</span>).<span class="title function_">focus</span>();</span><br><span class="line">        &#125;) <span class="comment">// transition.shrinkIn</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Monitor main search box</span></span><br><span class="line">  <span class="keyword">const</span> onPopupClose = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="title function_">transition</span>(siteSearch, <span class="number">0</span>); <span class="comment">// &quot;transition.shrinkOut&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  siteSearch.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span> === siteSearch) &#123;</span><br><span class="line">      <span class="title function_">onPopupClose</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">&#x27;.close-btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onPopupClose);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pjax:success&#x27;</span>, onPopupClose);</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&#x27;Escape&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">onPopupClose</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="修改-script-js"><a href="#修改-script-js" class="headerlink" title="修改 script.js"></a>修改 script.js</h4><p>shoka&#x2F;scripts&#x2F;generaters&#x2F;script.js 中主要是读取配置,找到config.algolia的配置，大概在45行：<img src="https://img2.imgtp.com/2024/02/07/UtqNiQ90.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...........  <span class="comment">// 省略若干代码</span></span><br><span class="line"><span class="keyword">if</span>(config.<span class="property">algolia</span>) &#123;</span><br><span class="line">    siteConfig.<span class="property">search</span> = &#123;</span><br><span class="line">      appID    : config.<span class="property">algolia</span>.<span class="property">appId</span>,</span><br><span class="line">      apiKey   : config.<span class="property">algolia</span>.<span class="property">apiKey</span>,</span><br><span class="line">      <span class="attr">indexName</span>: config.<span class="property">algolia</span>.<span class="property">indexName</span>,</span><br><span class="line">      hits     : theme.<span class="property">search</span>.<span class="property">hits</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 以下为需要添加的代码</span></span><br><span class="line"><span class="keyword">if</span>(config.<span class="property">search</span>) &#123;</span><br><span class="line">    siteConfig.<span class="property">localSearch</span> = &#123;</span><br><span class="line">      <span class="attr">enable</span>: config.<span class="property">search</span>.<span class="property">enable</span>,</span><br><span class="line">      <span class="attr">path</span>: config.<span class="property">search</span>.<span class="property">path</span>,</span><br><span class="line">      <span class="attr">field</span>: config.<span class="property">search</span>.<span class="property">field</span>,</span><br><span class="line">      <span class="attr">format</span>: config.<span class="property">search</span>.<span class="property">format</span>,</span><br><span class="line">      <span class="attr">limit</span>: config.<span class="property">search</span>.<span class="property">limit</span>,</span><br><span class="line">      <span class="attr">content</span>: config.<span class="property">search</span>.<span class="property">content</span>,</span><br><span class="line">      <span class="attr">unescape</span>: config.<span class="property">search</span>.<span class="property">unescape</span>,</span><br><span class="line">      <span class="attr">preload</span>:  config.<span class="property">search</span>.<span class="property">preload</span>,</span><br><span class="line">      <span class="attr">trigger</span>: config.<span class="property">search</span>.<span class="property">trigger</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: config.<span class="property">search</span>.<span class="property">pageSize</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其实有了这条命令就可以把page.js里的const algoliaSearch的部分给删了…占内存qwq</p><h4 id="修改pjax-js"><a href="#修改pjax-js" class="headerlink" title="修改pjax.js"></a>修改pjax.js</h4><p>shoka&#x2F;source&#x2F;js&#x2F;_app&#x2F;pjax.js 中是启动搜索功能的部分，这里在两个配置都有的情况下默认使用本地搜索而不是 Algolia。修改代码位置大约在125行位置或者直接搜素algoliaSearch(pjax)将它删掉并替换成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable constant_">CONFIG</span>.<span class="property">localSearch</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">localSearch</span>(pjax)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable constant_">CONFIG</span>.<span class="property">search</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">algoliaSearch</span>(pjax)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p> 最后在 hexo 配置（最外层的 _config.yml ）中添加 search 配置，就大功告成了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.json</span> <span class="comment"># search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">preload:</span>  <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">&quot;auto&quot;</span> </span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><p>然后重新运行即可</p><h2 id="Ⅶ、添加博客评论模块"><a href="#Ⅶ、添加博客评论模块" class="headerlink" title="Ⅶ、添加博客评论模块"></a>Ⅶ、添加博客评论模块</h2><p>原文链接：无后端评论系统valine的配置参考：<a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p><p>登录leancloud：<a href="https://www.leancloud.cn/">LeanCloud</a>，进入后需完成实名认证和邮箱认证才可使用</p><h3 id="获取APP-ID-和-APP-Key"><a href="#获取APP-ID-和-APP-Key" class="headerlink" title="获取APP ID 和 APP Key"></a>获取APP ID 和 APP Key</h3><p>进入<a href="https://leancloud.cn/dashboard/applist.html#/apps">控制台</a>后点击左下角<a href="https://leancloud.cn/dashboard/applist.html#/newapp">创建应用</a>：</p><p><img src="https://i.loli.net/2019/06/21/5d0c995c86fac81746.jpg" alt="img"></p><p>应用创建好以后，进入刚刚创建的应用，选择左下角的<code>设置</code>&gt;<code>应用Key</code>，然后就能看到你的<code>APP ID</code>和<code>APP Key</code>了：</p><p><img src="https://i.loli.net/2019/06/21/5d0c997a60baa24436.jpg" alt="img"></p><h3 id="安全域名"><a href="#安全域名" class="headerlink" title="安全域名"></a>安全域名</h3><p>为了你的数据安全，请设置自己的<code>安全域名</code>：</p><p><img src="https://i.loli.net/2019/06/21/5d0c995bddd4f99219.jpg" alt="设置安全域名"></p><p>更多信息请查看<a href="https://valine.js.org/configuration.html">配置项</a>。</p><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><p>在根目录下添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="comment">#Your_appId</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="comment">#Your_appkey</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">ヽ(○´∀`)ﾉ♪</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mp</span> <span class="comment"># Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># 文章访问量统计</span></span><br><span class="line">  <span class="attr">NoRecordIP:</span> <span class="literal">false</span> <span class="comment"># 不记录 IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="attr">powerMode:</span> <span class="literal">true</span> <span class="comment"># 默认打开评论框输入特效</span></span><br><span class="line">  <span class="attr">tagMeta:</span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="string">新朋友</span></span><br><span class="line">    <span class="attr">master:</span> <span class="string">主人</span></span><br><span class="line">    <span class="attr">friend:</span> <span class="string">小伙伴</span></span><br><span class="line">    <span class="attr">investor:</span> <span class="string">金主粑粑</span></span><br><span class="line">  <span class="attr">tagColor:</span></span><br><span class="line">    <span class="attr">master:</span> <span class="string">&quot;var(--color-orange)&quot;</span></span><br><span class="line">    <span class="attr">friend:</span> <span class="string">&quot;var(--color-aqua)&quot;</span></span><br><span class="line">    <span class="attr">investor:</span> <span class="string">&quot;var(--color-pink)&quot;</span></span><br><span class="line">  <span class="attr">tagMember:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="comment"># - hash of master@email.com</span></span><br><span class="line">      <span class="comment"># - hash of master2@email.com</span></span><br><span class="line">    <span class="attr">friend:</span></span><br><span class="line">      <span class="comment"># - hash of friend@email.com</span></span><br><span class="line">      <span class="comment"># - hash of friend2@email.com</span></span><br><span class="line">    <span class="attr">investor:</span></span><br><span class="line">      <span class="comment"># - hash of investor1@email.com</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>tag 标签显示在评论者名字的后面，默认是 tagMeta.visitor 对应的值。 在 tagMeta 和 tagColor 中，除了 visitor 这个 key 不能修改外，其他 key 都可以换一换，但需要保证一致性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tagMeta:</span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="string">游客</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="string">管理员</span></span><br><span class="line">    <span class="attr">waifu:</span> <span class="string">我老婆</span></span><br><span class="line">  <span class="attr">tagColor:</span></span><br><span class="line">    <span class="attr">visitor:</span> <span class="string">&quot;#855194&quot;</span></span><br><span class="line">    <span class="attr">admin:</span> <span class="string">&quot;#a77c59&quot;</span></span><br><span class="line">    <span class="attr">waifu:</span> <span class="string">&quot;#ed6ea0&quot;</span></span><br><span class="line">  <span class="attr">tagMember:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="comment"># - hash of admin@email.com</span></span><br><span class="line">    <span class="attr">waifu:</span></span><br><span class="line">      <span class="comment"># - hash of waifu@email.com</span></span><br></pre></td></tr></table></figure><p>在文章 Front Matter 中也可以配置上述参数，访问该文章页面时，将覆盖全局配置。 尤其可以用来配置一个特殊的 placeholder。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">&quot;点击评论本文~&quot;</span></span><br></pre></td></tr></table></figure><p>评论通知与管理工具建议使用这个 Valine-Admin。 注意 SITE_URL 需要以 &#x2F; 结尾。 如果某一篇文章需要关闭评论功能，则在文章 Front Matter 中配置： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: xxx</span><br><span class="line">comment: false</span><br></pre></td></tr></table></figure><p>更多配置请跳转原文：<a href="https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/">Step.2 基本配置 - Theme Shoka Documentation - 二进制杂谈 - 计算机科学 | Yume Shoka &#x3D; 優萌初華 &#x3D; 有夢書架 (lostyu.me)</a></p><h2 id="Ⅷ、域名解析github-page"><a href="#Ⅷ、域名解析github-page" class="headerlink" title="Ⅷ、域名解析github page"></a>Ⅷ、域名解析github page</h2><blockquote><ol><li>买域名 ✔</li><li>域名备案 ✔</li><li>解析域名 见下</li><li>到github page设置自定义域名 见下</li></ol></blockquote><p><strong>第三步，域名解析</strong>：记录类型CNAME，记录值写：你的github名.github.io</p><p><img src="https://image.dabing.cool/image/1656126371608-7c89ca76-dddd-46a4-a6d5-8a1843af2388.png"></p><p><strong>第四步</strong>：到github找到<code>你的github名.github.io</code>仓库，setting，找到github pages，添加上你的域名即可。</p><p>等个十几分钟就去访问下你的博客看看咯。我的 <a href="https://blog.dabing.cool/">blog.dabing.cool</a></p><p><img src="https://image.dabing.cool/image/1656126177215-71010ed0-7373-4947-806a-fcefe95094ea.png"></p><h2 id="Ⅸ、使用Github-Action自动部署hexo到GitHub-pages"><a href="#Ⅸ、使用Github-Action自动部署hexo到GitHub-pages" class="headerlink" title="Ⅸ、使用Github Action自动部署hexo到GitHub pages"></a>Ⅸ、使用Github Action自动部署hexo到GitHub pages</h2><p>这里默认你把上面的都做好了~</p><blockquote><p>1、github创建一个私人仓库，用于存放hexo的源代码 – 配置私钥</p><p>2、github上的youname.github.io是存放hexo的静态网页文件 – 配置公钥</p><p>3、配置工作流：.github&#x2F;workflows&#x2F;deploy.yml</p></blockquote><p>我踩太多坑了，可以参考这个做：<a href="https://www.bilibili.com/read/cv10016062/">利用GitHub Actions 自动部署 Hexo博客 全自动运行</a></p><p>我的配置文件这里贴一下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Action 的名字</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Auto</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># 触发条件1：main 分支收到 push 后执行任务。</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="comment"># 触发条件2：手动按钮</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里放环境变量,需要替换成你自己的</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="comment"># Hexo 编译后使用此 git 用户部署到 github 仓库</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">dabing85</span></span><br><span class="line">  <span class="comment"># Hexo 编译后使用此 git 邮箱部署到 github 仓库</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="number">2261617090</span><span class="string">@qq.com</span></span><br><span class="line">  <span class="comment"># Hexo 编译后要部署的 github 仓库</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_REPO:</span> <span class="string">dabing85/dabing85.github.io</span></span><br><span class="line">  <span class="comment"># Hexo 编译后要部署到的分支</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  # Hexo 编译后使用此 gitee 用户部署到gitee仓库</span></span><br><span class="line"><span class="comment">#  GITEE_USER: wbsu2003</span></span><br><span class="line"><span class="comment">#  # Hexo 编译后要部署的 gitee 仓库</span></span><br><span class="line"><span class="comment">#  GITEE_DEPLOY_REPO: wbsu2003/wbsu2003</span></span><br><span class="line"><span class="comment">#  # Hexo 编译后要部署到的分支</span></span><br><span class="line"><span class="comment">#  GITEE_DEPLOY_BRANCH: master</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">  <span class="attr">GIT_SOURCE_REPO:</span> <span class="string">git@github.com:dabing85/dabing85.github.io.git</span></span><br><span class="line">  <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line"><span class="comment">#  GITEE_DESTINATION_REPO: git@gitee.com:wbsu2003/wbsu2003.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-18.04</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">12.</span><span class="string">x</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.GIT_DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_KEY&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan -t rsa github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;$GIT_USER&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;$GIT_EMAIL&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span>        <span class="comment"># 根据你安装的组件进行安装</span></span><br><span class="line"><span class="comment">#          npm i hexo-renderer-multi-markdown-it --save</span></span><br><span class="line"><span class="comment">#          npm i hexo-autoprefixer --save</span></span><br><span class="line"><span class="comment">#          npm i  hexo-algolia --save</span></span><br><span class="line"><span class="comment">#          npm i hexo-algoliasearch --save</span></span><br><span class="line"><span class="comment">#          npm i hexo-symbols-count-time --save</span></span><br><span class="line"><span class="comment">#          npm i hexo-feed --save --egacy-peer-deps</span></span><br><span class="line"><span class="comment">#          hexo-deployer-git --save</span></span><br><span class="line">        <span class="comment"># 复制中文语言包，解决菜单英文的问题</span></span><br><span class="line"><span class="comment">#               cp zh-CN.yml node_modules/hexo-theme-next/languages/</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="comment"># 以下为发布到gitee</span></span><br><span class="line"><span class="comment">#      - name: Sync to Gitee</span></span><br><span class="line"><span class="comment">#        uses: wearerequired/git-mirror-action@master</span></span><br><span class="line"><span class="comment">#        env:</span></span><br><span class="line"><span class="comment">#          # 直接使用了 HEXO_DEPLOY_PRI</span></span><br><span class="line"><span class="comment">#          SSH_PRIVATE_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125;</span></span><br><span class="line"><span class="comment">#        with:</span></span><br><span class="line"><span class="comment">#          # GitHub 源仓库地址</span></span><br><span class="line"><span class="comment">#          source-repo: $&#123;&#123; env.GIT_SOURCE_REPO &#125;&#125;</span></span><br><span class="line"><span class="comment">#          # Gitee 目标仓库地址</span></span><br><span class="line"><span class="comment">#          destination-repo: $&#123;&#123; env.GITEE_DESTINATION_REPO &#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#      - name: Build Gitee Pages</span></span><br><span class="line"><span class="comment">#        uses: yanglbme/gitee-pages-action@main</span></span><br><span class="line"><span class="comment">#        with:</span></span><br><span class="line"><span class="comment">#          # 你的 Gitee 用户名</span></span><br><span class="line"><span class="comment">#          gitee-username: $&#123;&#123; env.GITEE_USER &#125;&#125;</span></span><br><span class="line"><span class="comment">#          # 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line"><span class="comment">#          gitee-password: $&#123;&#123; secrets.GITEE_PASSWORD &#125;&#125;</span></span><br><span class="line"><span class="comment">#          # 你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></span><br><span class="line"><span class="comment">#          gitee-repo: $&#123;&#123; env.GITEE_DEPLOY_REPO &#125;&#125;</span></span><br><span class="line"><span class="comment">#          # 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></span><br><span class="line"><span class="comment">#          branch: $&#123;&#123; env.GITEE_DEPLOY_BRANCH &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>评论邮箱提醒功能：<a href="https://blog.dabing.cool/hexo/Valine-Admin/">使用Valine-Admin实现评论邮件提醒 - Hexo | Dabing &#x3D; &#x3D; 笔记空间</a></p><h2 id="Ⅹ、一些坑（不全）"><a href="#Ⅹ、一些坑（不全）" class="headerlink" title="Ⅹ、一些坑（不全）"></a>Ⅹ、一些坑（不全）</h2><p>遇到的坑也没全填平，这里总结一下一些坑：</p><ol><li><strong>问题： Hexo 使用 Github Actions 自动发布至 Github Pages 时,生成的 html 页面空白,没有css&#x2F;js等文件。</strong></li></ol><p><strong>原因:</strong> 由于主题是 git clone 下来的,主题目录下生成了 .git 目录,导致和 hexo 根目录下 .git 冲突了,commit 时没有把主题 push 上去导致的。</p><p><strong>解决办法：</strong> 删掉主题下的.git文件夹，重新提交，目的是把next主题文件夹提交上去（删掉.git文件夹后git commit依然没有提交上，需要把next文件夹剪切出来后git add&amp;&amp;git commit &amp;&amp;git push后，再把next文件夹拷贝回来，再git add&amp;&amp;git commit &amp;&amp;git push就可以提交成功了）</p><p>注：这里如果用idea的可视化按键不行（反正我的不行）。就在idea终端打命令。按着上面的来就行。我这里做一下记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git status  <span class="comment"># 查看有没有未添加的文件夹，</span></span><br><span class="line">git add themes/shoka/   <span class="comment"># shoka是我的主题</span></span><br><span class="line">git commit -m <span class="string">&quot;shoka主题内容&quot;</span>  </span><br><span class="line">git remote add origin git@github.com:dabing85/hexoBlog.git  <span class="comment"># 我是重新搭建的，这里才关联远程仓库，origin是远程仓库名字</span></span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>2.<strong>问题：</strong> 安装插件依赖失败，说啥解析失败，<strong>npm ERR! code ERESOLVE</strong></p><p><img src="https://img-blog.csdnimg.cn/img_convert/377edf796993eabd1149ae971e9d506d.png" alt="img"></p><p><strong>解决:</strong> 后面添加 –egacy-peer-deps</p><p><strong>参考链接:</strong> <a href="https://blog.csdn.net/m0_51969330/article/details/119186416">https://blog.csdn.net/m0_51969330/article/details/119186416</a></p><ol><li><strong>问题：</strong><a href="https://stackoverflow.com/questions/49475492/npm-install-error-code-ebadplatform"><strong>npm install error (code EBADPLATFORM)</strong></a> <strong>表示没有平台支持安装fsevents</strong></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/7f107c674b2c2fcc32b8f453f5c06e8f.png" alt="img"></p><p><strong>解决：</strong><a href="https://stackoverflow.com/questions/49475492/npm-install-error-code-ebadplatform">npm install error (code EBADPLATFORM)</a></p><p>这里我是只删除了package-lock.json就行了，但是还是做了警告。</p><ol><li><strong>问题：自动部署后，github pages上的自定义域名也会被抹掉.</strong></li></ol><p><strong>解决:</strong> <a href="https://blog.csdn.net/fake_hydra/article/details/82414965">https://blog.csdn.net/fake_hydra/article/details/82414965</a></p><p>即：在source目录下建一个CNAME文件，没有后缀，里面写你的域名即可。</p><h2 id="XI、部署到服务器"><a href="#XI、部署到服务器" class="headerlink" title="XI、部署到服务器"></a>XI、部署到服务器</h2><p>参考链接：<a href="https://blog.csdn.net/qq_38679881/article/details/122730065">将Hexo搭建到自己的服务器上</a></p><p>服务器（Linux）我是全按照上面的博客来的，没啥问题。</p><p>到客户端（Windows）我是新建了一个hexoBlog文件夹，但是内容全部复制以前github的源码，所以github上的还是起效的。</p><p>直接复制有些要注意的是：</p><ol><li><p>最好删除.git文件（这里的.git是原来github远程仓库的）</p></li><li><p>.idea文件夹的内容有些文件需要改，因为里面记的是原来项目的模块</p><p>下面几个文件内容的项目名改成现在的，不放心可以每个都看一下替换一下。</p></li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/20da6a02481c63e589afd7f58c1ba5ef.png" alt="image-20220813201936397"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/42453af0853d">GitHub Actions部署Hexo小结</a></p><p><a href="https://blog.csdn.net/wbsu2004/article/details/122661116">用GitHub Actions自动部署Hexo</a></p><p><a href="https://www.bilibili.com/read/cv10016062/">利用GitHub Actions 自动部署 Hexo博客 全自动运行</a></p><p><a href="https://blog.csdn.net/qq_38679881/article/details/122730065">将Hexo搭建到自己的服务器上</a></p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git从入门到入土</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/git%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/git%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>git是世界上最先进的分布式版本控制系统！</p><p>版本控制，可以在开发的过程中用于管理我们的文件，目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术，而git就可以完成这些。</p><h2 id="三种版本控制方法"><a href="#三种版本控制方法" class="headerlink" title="三种版本控制方法"></a><strong>三种版本控制方法</strong></h2><p><strong>1、本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS。</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830010509130-1770229663.png" alt="img"></p><p><strong>2、集中版本控制  SVN</strong></p><p>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830010533011-1732321785.png" alt="img"></p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p><p><strong>3、分布式版本控制 Git</strong></p><p>每个人都拥有全部的代码！安全隐患！</p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><p>不会因为服务器损坏或者网络问题，造成不能工作的情况！</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830010609343-1838299690.png" alt="img"></p><p>git安装镜像网站：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">CNPM Binaries Mirror (npmmirror.com)</a></p><p>安装好git后会有三个程序：</p><p><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD：</strong>Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><h2 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h2><p>平时一定要多使用这些基础的命令！</p><p>1）、cd : 改变目录。</p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）、pwd : 显示当前所在的目录路径。</p><p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！</span><br></pre></td></tr></table></figure><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端&#x2F;清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><p>15）、#表示注释</p><h2 id="三个区域"><a href="#三个区域" class="headerlink" title="三个区域"></a>三个区域</h2><p>Git本地有三个工作区域：工作目录（Working Directory）、暂存区(Stage&#x2F;Index)、资源库(Repository或Git Directory)。如果在加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830014107578-81459083.png" alt="img"></p><ul><li>Workspace：工作区，就是你平时存放项目代码的地方</li><li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>git的工作流程一般是这样的：</p><p>１、在工作目录中添加、修改文件；</p><p>２、将需要进行版本管理的文件放入暂存区域；</p><p>３、将暂存区域的文件提交到git仓库。</p><p>因此，git管理的文件有三种状态：已修改（modified）,已暂存（staged）,已提交(committed)</p><p>工作流程图：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830014527445-321493806.png" alt="img"></p><p> <strong>操作git从gitee的开源项目里克隆&#x2F;下载文件</strong></p><p>先cd 目录，这就是你要下载文件的文件夹地址，然后输入git clone <a href="https://xxx/">https://xxx</a></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830020258174-2048646358.png" alt="img"></p><p> 在当前目录下创建git代码库：git init，然后查看所有文件的状态：git status </p><p>然后将当前目录下的所有文件添加到暂存区:git add .  ，再查看所有文件状态就可以看到新的绿色状态了。</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830021452228-582547864.png" alt="img"></p><p> IDEA项目中有个.gitignore文件，里面就是git添加命令时不添加到库里面的东西，忽略的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为注释</span></span><br><span class="line">*.txt        <span class="comment">#忽略所有 .txt结尾的文件,这样的话上传就不会被选中！</span></span><br><span class="line">!lib.txt     <span class="comment">#但lib.txt除外</span></span><br><span class="line">/temp        <span class="comment">#仅忽略项目根目录下的TODO文件,不包括其它目录temp</span></span><br><span class="line">build/       <span class="comment">#忽略build/目录下的所有文件</span></span><br><span class="line">doc/*.txt    <span class="comment">#会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</span></span><br></pre></td></tr></table></figure><p>像我的苍穹外卖：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230830021804060-540686763.png" alt="img"></p><h2 id="使用码云"><a href="#使用码云" class="headerlink" title="使用码云"></a>使用码云</h2><p>github 是有墙的，比较慢，在国内的话，我们一般使用 gitee ，公司中有时候会搭建自己的gitlab服务器。</p><p>登录进去完善个人资料后找到SSH密钥，在C盘打开PC用户文件夹，新建.ssh文件夹，在里面运行git bush，输入ssh-keygen -t rsa，然后一直回车，也可以设置你的密码。这时这个文件夹就生成了两个文件，一个带pub的时共有的，另一个是私有的，将pub的密钥复制到刚刚的网页上</p><p><strong>新建仓库</strong></p><p>许可证：开源是否可以随意转载，开源但是不能商业使用，不能转载，…  限制！，一般选择GPL 3.0或2.0</p><p> 初始化可以选择各种要求，跟着看就行。</p><h2 id="IDEA集成git"><a href="#IDEA集成git" class="headerlink" title="IDEA集成git"></a><strong>IDEA集成git</strong></h2><p>添加远程的git，直接将远程git里面的全部文件复制到添加的项目文件夹中。然后项目里会出现红色的文件，这就是没有提交的文件，点击上面的提交选择全部，然后输入些备注，接着就直接 push到远程仓库，根据提示来就行，或者直接在终端操作之前学的git命令。</p><h2 id="GIT分支"><a href="#GIT分支" class="headerlink" title="GIT分支"></a>GIT分支</h2><p>分支在GIT中相对较难，分支就是科幻电影里面的平行宇宙，如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，我们就需要处理一些问题了！</p><p> git分支中常用指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支git branch</span><br><span class="line"># 列出所有远程分支git branch -r</span><br><span class="line"># 新建一个分支，但依然停留在当前分支git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支git checkout -b [branch]</span><br><span class="line"># 合并指定分支到当前分支$ git merge [branch]</span><br><span class="line"># 删除分支$ git branch -d [branch-name]</span><br><span class="line"># 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>企业级微服务大项目实战《学成在线》【四】（媒资管理模块）</title>
      <link href="/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E5%9B%9B%E3%80%91%EF%BC%88%E5%AA%92%E8%B5%84%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%EF%BC%89/"/>
      <url>/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E5%9B%9B%E3%80%91%EF%BC%88%E5%AA%92%E8%B5%84%E7%AE%A1%E7%90%86%E6%A8%A1%E5%9D%97%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>！！！移步我的老博客：<a href="https://www.cnblogs.com/hepingan/p/18002463">企业级微服务大项目实战《学成在线》【四】（媒资管理模块） - 何平安 - 博客园</a>！！！</strong></p><p>封面为啥要用苍穹外卖，想纪念下下以前的项目，不知道现在还跑得起来不哈哈哈哈~</p><h1 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h1><p><strong>大部分都是源文档的东西，懒得写了~</strong></p><p><strong>流程：</strong></p><p>课程图片上传至分布式文件系统，在课程信息中保存课程图片路径，如下流程：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309205459875.png" alt="image-20230309205459875"></p><p>1、前端进入上传图片界面</p><p>2、上传图片，请求媒资管理服务。</p><p>3、媒资管理服务将图片文件存储在MinIO。</p><p>4、媒资管理记录文件信息到数据库。</p><p>5、保存课程信息，在内容管理数据库保存图片地址。</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309205533505.png" alt="image-20230309205533505"></p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>首先在minio配置bucket，bucket名称为：mediafiles，并设置bucket的权限为公开。</p><p>在nacos配置中minio的相关信息，进入media-service-dev.yaml:</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309212926866.png" alt="image-20230309212926866"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://localhost:9000</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">bucket:</span></span><br><span class="line">    <span class="attr">files:</span> <span class="string">mediafiles</span></span><br><span class="line">    <span class="attr">videofiles:</span> <span class="string">video</span></span><br></pre></td></tr></table></figure><p>在media-service工程编写minio的配置类：</p><p>MinIO配置属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/9 21:31</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOProperties</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Minio配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/9 21:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MinIOProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MinIOProperties minIOProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span> 初始化MinIO客户端,并且交给spring管理</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> io.minio.MinioClient</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span>: 2023/3/9 21:36</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(<span class="string">&quot;http://localhost:9000&quot;</span>)</span><br><span class="line">                .credentials(<span class="string">&quot;minioadmin&quot;</span>, <span class="string">&quot;minioadmin&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p>根据需求分析，下边进行接口定义，此接口定义为一个通用的上传文件接口，可以上传图片或其它文件。</p><p>首先分析接口：</p><p>请求地址：&#x2F;media&#x2F;upload&#x2F;coursefile</p><p>请求参数：</p><p>Content-Type: multipart&#x2F;form-data;boundary&#x3D;…..</p><p>FormData: filedata&#x3D;??</p><p>响应参数：文件信息，如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a16da7a132559daf9e1193166b3e7f52&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyId&quot;</span><span class="punctuation">:</span> <span class="number">1232141425</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001001&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/testbucket/2022/09/12/a16da7a132559daf9e1193166b3e7f52.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a16da7a132559daf9e1193166b3e7f52&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/testbucket/2022/09/12/a16da7a132559daf9e1193166b3e7f52.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timelength&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-09-12T21:57:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;changeDate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auditStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auditMind&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileSize&quot;</span><span class="punctuation">:</span> <span class="number">248329</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在media-model定义上传响应模型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.model.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xuecheng.media.model.po.MediaFiles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 上传文件响应结果类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/9 21:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadFileResultDto</span> <span class="keyword">extends</span> <span class="title class_">MediaFiles</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义接口如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * @param upload     表单数据</span><br><span class="line">     * @param folder     文件夹名-非必须</span><br><span class="line">     * @param objectName 文件名-非必须</span><br><span class="line">     * @return com.xuecheng.media.model.dto.UploadFileResultDto</span><br><span class="line">     * @description 文件上传</span><br><span class="line">     * @author: woldier</span><br><span class="line">     * @date: 2023/3/9 22:09</span><br><span class="line">     */</span><br><span class="line">    @ApiOperation(&quot;文件上传&quot;)</span><br><span class="line">    @RequestMapping(value = &quot;/upload/coursefile&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span><br><span class="line">    // 定义请求url与可消费的文件操作content-type类型</span><br><span class="line">    public UploadFileResultDto upload(</span><br><span class="line">            @RequestPart(&quot;filedata&quot;) MultipartFile upload,</span><br><span class="line">            @RequestParam(value = &quot;folder&quot;, required = false) String folder,</span><br><span class="line">            @RequestParam(value = &quot;objectName&quot;, required = false) String objectName) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><p>首先在minio配置bucket，bucket名称为：mediafiles，并设置bucket的权限为公开。</p><p>在nacos配置中minio的相关信息，进入media-service-dev.yaml:</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309212926866.png" alt="image-20230309212926866"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://localhost:9000</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">bucket:</span></span><br><span class="line">    <span class="attr">files:</span> <span class="string">mediafiles</span></span><br><span class="line">    <span class="attr">videofiles:</span> <span class="string">video</span></span><br></pre></td></tr></table></figure><p>在media-service工程编写minio的配置类：</p><p>MinIO配置属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/9 21:31</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOProperties</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Minio配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/9 21:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MinIOProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MinIOProperties minIOProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span> 初始化MinIO客户端,并且交给spring管理</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> io.minio.MinioClient</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span>: 2023/3/9 21:36</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(<span class="string">&quot;http://localhost:9000&quot;</span>)</span><br><span class="line">                .credentials(<span class="string">&quot;minioadmin&quot;</span>, <span class="string">&quot;minioadmin&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口定义-1"><a href="#接口定义-1" class="headerlink" title="接口定义"></a>接口定义</h3><p>根据需求分析，下边进行接口定义，此接口定义为一个通用的上传文件接口，可以上传图片或其它文件。</p><p>首先分析接口：</p><p>请求地址：&#x2F;media&#x2F;upload&#x2F;coursefile</p><p>请求参数：</p><p><strong>Content-Type:</strong> multipart&#x2F;form-data;boundary&#x3D;…..</p><p>FormData: <strong>filedata&#x3D;??</strong></p><p>响应参数：文件信息，如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a16da7a132559daf9e1193166b3e7f52&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyId&quot;</span><span class="punctuation">:</span> <span class="number">1232141425</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001001&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/testbucket/2022/09/12/a16da7a132559daf9e1193166b3e7f52.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a16da7a132559daf9e1193166b3e7f52&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/testbucket/2022/09/12/a16da7a132559daf9e1193166b3e7f52.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timelength&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-09-12T21:57:18&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;changeDate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auditStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auditMind&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileSize&quot;</span><span class="punctuation">:</span> <span class="number">248329</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在media-model定义上传响应模型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.model.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xuecheng.media.model.po.MediaFiles;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 上传文件响应结果类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/9 21:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadFileResultDto</span> <span class="keyword">extends</span> <span class="title class_">MediaFiles</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义接口如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> upload     表单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folder     文件夹名-非必须</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName 文件名-非必须</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.xuecheng.media.model.dto.UploadFileResultDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 文件上传</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2023/3/9 22:09</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/upload/coursefile&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">    <span class="comment">// 定义请求url与可消费的文件操作content-type类型</span></span><br><span class="line">    <span class="keyword">public</span> UploadFileResultDto <span class="title function_">upload</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestPart(&quot;filedata&quot;)</span> MultipartFile upload,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;folder&quot;, required = false)</span> String folder,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;objectName&quot;, required = false)</span> String objectName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>controller层中我们需要将文件暂存在本地,让后将临时文件的地址放进服务层方法参数中</p><h3 id="接口开发"><a href="#接口开发" class="headerlink" title="接口开发"></a>接口开发</h3><p><strong>DAO开发</strong></p><p>根据需求分析DAO层实现向media_files表插入一条记录，使用media_files表生成的mapper即可。</p><p><strong>Service开发</strong></p><p>为了使代码更具有可读性，我们创建了两个枚举工具类，用于区分数据库字段值</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230310165611318.png" alt="image-20230310165611318"></p><p>可以看到我们操作mediaFile表时需要用到这两种字段，因此我们使用枚举简化</p><p>在meida-model的dto包下创建如下两个枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.model.dto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 媒体资源类型枚举</span></span><br><span class="line"><span class="comment"> * [&#123;&quot;code&quot;:&quot;001001&quot;,&quot;desc&quot;:&quot;图片&quot;&#125;,&#123;&quot;code&quot;:&quot;001002&quot;,&quot;desc&quot;:&quot;视频&quot;&#125;,&#123;&quot;code&quot;:&quot;001003&quot;,&quot;desc&quot;:&quot;其它&quot;&#125;]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/10 15:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">MediaResourceType</span> &#123;</span><br><span class="line">    IMAGE(<span class="string">&quot;001001&quot;</span>,<span class="string">&quot;图片&quot;</span>),</span><br><span class="line">    VIDEO(<span class="string">&quot;001002&quot;</span>,<span class="string">&quot;视频&quot;</span>),</span><br><span class="line">    OTHER(<span class="string">&quot;001003&quot;</span>,<span class="string">&quot;其它&quot;</span>)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    MediaResourceType(String code, String description) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.model.dto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 审核状态</span></span><br><span class="line"><span class="comment"> * [&#123;&quot;code&quot;:&quot;002001&quot;,&quot;desc&quot;:&quot;审核未通过&quot;&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;&quot;code&quot;:&quot;002002&quot;,&quot;desc&quot;:&quot;未审核&quot;&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;&quot;code&quot;:&quot;002003&quot;,&quot;desc&quot;:&quot;审核通过&quot;&#125;]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/10 14:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">MediaAuditStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">    NOT_Approved(<span class="string">&quot;002001&quot;</span>,<span class="string">&quot;审核未通过&quot;</span>),</span><br><span class="line"></span><br><span class="line">    Not_Audited(<span class="string">&quot;002002&quot;</span>,<span class="string">&quot;未审核&quot;</span>),</span><br><span class="line">    Approved(<span class="string">&quot;002003&quot;</span>,<span class="string">&quot;审核通过&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">     MediaAuditStatus(String code, String description)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.description = description;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外由于我们操作的数据表有公共字段，updateTime，createTime。因此我们可以加入一个mp的自动填充功能。</p><p>在media-service的config包下创建如下类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> * Mybatis-Plus 配置</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.xuecheng.media.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新的分页插件</span></span><br><span class="line"><span class="comment"> * 需要设置 MybatisConfiguration#useDeprecatedExecutor = false</span></span><br><span class="line"><span class="comment"> * 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line"><span class="keyword">return</span> interceptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service方法需要提供一个更加通用的保存文件的方法。</p><p>定义请求参数类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.media.model.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文件上传通用参数dto,这里的大部分都来自与 MediaFiles</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/9 22:14</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadFileParamsDto</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String filename;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件content-type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String contentType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件类型（文档，音频，视频）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fileType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long fileSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备注</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String remark;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义service方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">com.xuecheng.media.service.MediaFileService</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> companyId           公司ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadFileParamsDto 上传文件参数类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> LocalFilePath       要上传的文件其本地路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.xuecheng.media.model.dto.UploadFileResultDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2023/3/10 13:36</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UploadFileResultDto <span class="title function_">uploadFile</span><span class="params">(Long companyId, UploadFileParamsDto uploadFileParamsDto, String LocalFilePath)</span> <span class="keyword">throws</span> XueChengPlusException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span> 将上传的文件插入数据库 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> companyId </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadFileParamsDto </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> com.xuecheng.media.model.po.MediaFiles </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: woldier </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span>: 2023/3/10 16:42</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">     MediaFiles <span class="title function_">insertMediaFile2DB</span><span class="params">(Long companyId, UploadFileParamsDto uploadFileParamsDto, String md5, String bucket,String objectName)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">com.xuecheng.media.service.impl.MediaFileServiceImpl</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> companyId           公司ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadFileParamsDto 上传文件参数类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localFilePath       要上传的文件其本地路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.xuecheng.media.model.dto.UploadFileResultDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2023/3/10 13:36</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UploadFileResultDto <span class="title function_">uploadFile</span><span class="params">(Long companyId, UploadFileParamsDto uploadFileParamsDto, String localFilePath)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1.上传文件到minio ，文件路径为 /&#123;桶名&#125;/&#123;年&#125;/&#123;月&#125;/&#123;日&#125;/</span></span><br><span class="line"><span class="comment">         * 2.插入数据库</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        <span class="comment">/*通过扩展名获取媒体资源类型*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> getMimeType(uploadFileParamsDto.getFilename());</span><br><span class="line">        <span class="comment">/*组装文件基路径*/</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">basePath</span> <span class="operator">=</span> LocalDate.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd/&quot;</span>));</span><br><span class="line">        <span class="comment">/*由于Minio中同一天的数据保存位置都在同一个文件夹下,为了防止重名现象,不能用原文件名,应该用md5值加后缀*/</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> uploadFileParamsDto.getFilename().lastIndexOf(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="comment">//文件后缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileSuffix</span> <span class="operator">=</span> uploadFileParamsDto.getFilename().substring(index);</span><br><span class="line">        <span class="comment">//文件md5值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> getMd5(localFilePath);</span><br><span class="line">        <span class="comment">//拼接得到Minio存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> basePath + md5 + fileSuffix;</span><br><span class="line">        <span class="comment">//上传到minio</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">minIOUpload</span> <span class="operator">=</span> minIOUpload(localFilePath, mimeType, fileBucket, objectName);</span><br><span class="line">        <span class="keyword">if</span> (!minIOUpload) XueChengPlusException.cast(<span class="string">&quot;MinIO上传出错&quot;</span>);</span><br><span class="line">        <span class="comment">//上传到数据库</span></span><br><span class="line">        <span class="type">MediaFiles</span> <span class="variable">files</span> <span class="operator">=</span> insertMediaFile2DB(companyId, uploadFileParamsDto, md5, fileBucket, objectName);</span><br><span class="line"><span class="comment">//        MediaFileService proxy = (MediaFileService)AopContext.currentProxy();</span></span><br><span class="line"><span class="comment">//        MediaFiles files = proxy.insertMediaFile2DB(companyId, uploadFileParamsDto, md5, fileBucket,objectName);</span></span><br><span class="line">        <span class="comment">//结果为空表示上传失败</span></span><br><span class="line">        <span class="keyword">if</span> (files == <span class="literal">null</span>) XueChengPlusException.cast(<span class="string">&quot;文件上传后保存信息到数据库失败&quot;</span>);</span><br><span class="line">        <span class="type">UploadFileResultDto</span> <span class="variable">uploadFileResultDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadFileResultDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(files, uploadFileResultDto);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uploadFileResultDto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> companyId           公司id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadFileParamsDto 上传参数信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5                 md5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket              桶</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName          对象名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.xuecheng.media.model.po.MediaFiles</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 插入数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2023/3/10 15:21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> MediaFiles <span class="title function_">insertMediaFile2DB</span><span class="params">(Long companyId, UploadFileParamsDto uploadFileParamsDto, String md5, String bucket, String objectName)</span> &#123;</span><br><span class="line">        <span class="comment">/*添加数据库之前,根据md5查询该文件是否已经存在*/</span></span><br><span class="line">        <span class="type">MediaFiles</span> <span class="variable">files</span> <span class="operator">=</span> mediaFilesMapper.selectById(md5);</span><br><span class="line">        <span class="keyword">if</span> (files == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*生成数据库entity*/</span></span><br><span class="line">            <span class="type">MediaFiles</span> <span class="variable">mediaFiles</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MediaFiles</span>();</span><br><span class="line">            BeanUtils.copyProperties(uploadFileParamsDto, mediaFiles);</span><br><span class="line">            <span class="comment">//设置uploadFileParamsDto中不存在的部分</span></span><br><span class="line">            <span class="comment">//设置id</span></span><br><span class="line">            mediaFiles.setId(md5);</span><br><span class="line">            <span class="comment">//机构id</span></span><br><span class="line">            mediaFiles.setCompanyId(companyId);</span><br><span class="line">            <span class="comment">//bucket</span></span><br><span class="line">            mediaFiles.setBucket(bucket);</span><br><span class="line">            <span class="comment">//存储路径</span></span><br><span class="line">            mediaFiles.setFilePath(objectName);</span><br><span class="line">            <span class="comment">//file_id</span></span><br><span class="line">            mediaFiles.setFileId(md5);</span><br><span class="line">            <span class="comment">//url</span></span><br><span class="line">            mediaFiles.setUrl(<span class="string">&quot;/&quot;</span> + bucket + <span class="string">&quot;/&quot;</span> + objectName);</span><br><span class="line">            <span class="comment">//上传时间,更新时间自动设置</span></span><br><span class="line">            <span class="comment">//文件状态</span></span><br><span class="line">            mediaFiles.setStatus(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            <span class="comment">//审核状态</span></span><br><span class="line">            mediaFiles.setAuditStatus(MediaAuditStatus.Approved.getCode());</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> mediaFilesMapper.insert(mediaFiles);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (insert &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;向数据库保存文件失败,bucket:&#123;&#125;,objectName&#123;&#125;&quot;</span>, fileBucket, objectName);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> mediaFiles;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> files;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getMd5</span><span class="params">(String localFilePath)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md5 = DigestUtils.md5Hex(Files.newInputStream(<span class="keyword">new</span> <span class="title class_">File</span>(localFilePath).toPath()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;md5计算时出错&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> md5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 带后缀文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 根据文件后缀名获取MimeType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2023/3/10 13:55</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getMimeType</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileName == <span class="literal">null</span>) fileName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">ContentInfo</span> <span class="variable">contentInfo</span> <span class="operator">=</span> ContentInfoUtil.findExtensionMatch(fileName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> MediaType.APPLICATION_OCTET_STREAM_VALUE;</span><br><span class="line">        <span class="keyword">if</span> (contentInfo != <span class="literal">null</span>) mimeType = contentInfo.getMimeType();</span><br><span class="line">        <span class="keyword">return</span> mimeType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> localFilePath 本地文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileType      文件类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucket        桶名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 上传文件到MinIO的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2023/3/10 13:33</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">minIOUpload</span><span class="params">(String localFilePath, String fileType, String bucket, String objectName)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*上传*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.uploadObject(</span><br><span class="line">                    UploadObjectArgs.builder()</span><br><span class="line">                            .bucket(bucket)  <span class="comment">//桶</span></span><br><span class="line">                            .object(objectName) <span class="comment">// 对象名,在桶下存储的文件</span></span><br><span class="line">                            .filename(localFilePath)  <span class="comment">//指定本地文件路径</span></span><br><span class="line">                            .contentType(fileType) <span class="comment">//设置媒体文件类型</span></span><br><span class="line">                            .build()</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;文件上传到MinIO出错,buckcet:&#123;&#125;,path:&#123;&#125;,error:&#123;&#125;&quot;</span>, bucket, objectName, e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="接口代码完善"><a href="#接口代码完善" class="headerlink" title="接口代码完善"></a>接口代码完善</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> upload     表单数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> folder     文件夹名-非必须</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> objectName 文件名-非必须</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> com.xuecheng.media.model.dto.UploadFileResultDto</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@description</span> 文件上传</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span>: woldier</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@date</span>: 2023/3/9 22:09</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/upload/coursefile&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)</span></span><br><span class="line">   <span class="comment">// 定义请求url与可消费的文件操作content-type类型</span></span><br><span class="line">   <span class="keyword">public</span> UploadFileResultDto <span class="title function_">upload</span><span class="params">(</span></span><br><span class="line"><span class="params">           <span class="meta">@RequestPart(&quot;filedata&quot;)</span> MultipartFile upload,</span></span><br><span class="line"><span class="params">           <span class="meta">@RequestParam(value = &quot;folder&quot;, required = false)</span> String folder,</span></span><br><span class="line"><span class="params">           <span class="meta">@RequestParam(value = &quot;objectName&quot;, required = false)</span> String objectName)</span> <span class="keyword">throws</span> IOException, XueChengPlusException &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       *对接受到的文件进行处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">/*产生一个临时文件*/</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">tempFile</span> <span class="operator">=</span> File.createTempFile(<span class="string">&quot;minio&quot;</span>, <span class="string">&quot;temp&quot;</span>);</span><br><span class="line">       <span class="comment">/*将请求中的表单数据拷贝到临时文件中*/</span></span><br><span class="line">       upload.transferTo(tempFile);</span><br><span class="line">       <span class="comment">/*获取绝对路径*/</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> tempFile.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       *对上传参数进行处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//上传文件参数类</span></span><br><span class="line">       <span class="type">UploadFileParamsDto</span> <span class="variable">uploadFileParamsDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadFileParamsDto</span>();</span><br><span class="line">       <span class="comment">//原始文件名称</span></span><br><span class="line">       uploadFileParamsDto.setFilename(upload.getOriginalFilename());</span><br><span class="line">       <span class="comment">//文件大小</span></span><br><span class="line">       uploadFileParamsDto.setFileSize(upload.getSize());</span><br><span class="line">       <span class="comment">//文件类型</span></span><br><span class="line">       uploadFileParamsDto.setFileType(MediaResourceType.IMAGE.getCode());</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 公司id获取</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">       <span class="comment">//TODO 硬编码公司id</span></span><br><span class="line">       <span class="type">Long</span> <span class="variable">companyId</span> <span class="operator">=</span> <span class="number">123456789L</span>;</span><br><span class="line"></span><br><span class="line">       <span class="type">UploadFileResultDto</span> <span class="variable">uploadFileResultDto</span> <span class="operator">=</span> mediaFileService.uploadFile(companyId, uploadFileParamsDto, absolutePath);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*删除临时文件*/</span></span><br><span class="line">       tempFile.deleteOnExit();</span><br><span class="line">       <span class="keyword">return</span> uploadFileResultDto;</span><br></pre></td></tr></table></figure><h3 id="service事务代码优化"><a href="#service事务代码优化" class="headerlink" title="service事务代码优化"></a>service事务代码优化</h3><p>上边的service方法优化后并测试通过，现在思考关于uploadFile方法的是否应该开启事务。</p><p>目前是在uploadFile方法上添加@Transactional，当调用uploadFile方法前会开启数据库事务，如果上传文件过程时间较长那么数据库的事务持续时间就会变长，这样数据库链接释放就慢，最终导致数据库链接不够用。</p><p>我们只将addMediaFilesToDb方法添加事务控制即可,uploadFile方法上的@Transactional注解去掉。(上小节代码已经时这样做的)</p><p>但是现在的问题是,controller调用的service方法upload没用加入事务注解,相当于在service中一个没有事务的方法调用了另一个事务方法,事务不生效</p><p>下边分析原因：</p><p>如果在uploadFile方法上添加@Transactional注解，代理对象执行此方法前会开启事务，如下图：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230310170730673.png" alt="image-20230310170730673"></p><p>如果在uploadFile方法上没有@Transactional注解，代理对象执行此方法前</p><p>不进行事务控制，如下图：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230310170810020.png" alt="image-20230310170810020"></p><p>现在在addMediaFilesToDb方法上添加@Transactional注解，也不会进行事务是因为并不是通过代理对象执行的addMediaFilesToDb方法。为了判断在uploadFile方法中去调用addMediaFilesToDb方法是否是通过代理对象去调用，我们可以打断点跟踪。</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230310170826985.png" alt="image-20230310170826985"></p><p>我们发现在uploadFile方法中去调用addMediaFilesToDb方法不是通过代理对象去调用。</p><p>如何解决呢？通过代理对象去调用addMediaFilesToDb方法即可解决。</p><p>我们先获取代理对象,然后调用代理对象的insertMediaFile2DB方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MediaFileService</span> <span class="variable">proxy</span> <span class="operator">=</span> (MediaFileService)AopContext.currentProxy();</span><br><span class="line"><span class="type">MediaFiles</span> <span class="variable">files</span> <span class="operator">=</span> proxy.insertMediaFile2DB(companyId, uploadFileParamsDto, md5, fileBucket,objectName);</span><br></pre></td></tr></table></figure><p>但是只修改这个代码启动会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot find current proxy: Set &#x27;exposeProxy&#x27; property on Advised to &#x27;true&#x27; to make it available, and ensure that AopContext.currentProxy() is invoked in the same thread as the AOP invocation context.</span><br></pre></td></tr></table></figure><p>我们需要在启动类下加入注解并且设置exposeProxy属性,除此之外可能的报错原因是没有加入包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@EnableAspectJAutoProxy(exposeProxy = true)</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以在代码中插入数据库后除0模拟错误,看一下是否进行了数据库回归,经过测试可以发现进行了回滚</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230310172853142.png" alt="image-20230310172853142"></p><h3 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 上传文件</span></span><br><span class="line">POST &#123;&#123;gateway_host&#125;&#125;/media//upload/coursefile</span><br><span class="line">Content-Type: multipart/form-data; boundary=WebAppBoundary</span><br><span class="line"></span><br><span class="line">--WebAppBoundary</span><br><span class="line">Content-Disposition: form-data;name=<span class="string">&quot;filedata&quot;</span>; filename=<span class="string">&quot;123.jpg&quot;</span></span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt; d:/123.jpg</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">POST http<span class="punctuation">:</span><span class="comment">//localhost:63010/media//upload/coursefile</span></span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">transfer-encoding<span class="punctuation">:</span> chunked</span><br><span class="line">Content-Type<span class="punctuation">:</span> application/json</span><br><span class="line">Date<span class="punctuation">:</span> Fri<span class="punctuation">,</span> <span class="number">10</span> Mar <span class="number">2023</span> <span class="number">08</span><span class="punctuation">:</span><span class="number">33</span><span class="punctuation">:</span><span class="number">46</span> GMT</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8a58662af30ace3e83f629a10ddd8662&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyId&quot;</span><span class="punctuation">:</span> <span class="number">123456789</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;companyName&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;filename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;001001&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mediafiles&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;filePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023/03/10/8a58662af30ace3e83f629a10ddd8662.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8a58662af30ace3e83f629a10ddd8662&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/mediafiles/2023/03/10/8a58662af30ace3e83f629a10ddd8662.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createDate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;changeDate&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;remark&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auditStatus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;002003&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;auditMind&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fileSize&quot;</span><span class="punctuation">:</span> <span class="number">9778</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="上传视频"><a href="#上传视频" class="headerlink" title="上传视频"></a>上传视频</h1>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学成在线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级微服务大项目实战《学成在线》【三】（Nacos,Gateway,Minio环境搭建）</title>
      <link href="/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E4%B8%89%E3%80%91%EF%BC%88Nacos-Gateway-Minio%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%89/"/>
      <url>/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E4%B8%89%E3%80%91%EF%BC%88Nacos-Gateway-Minio%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>**！！！图片已过期，换我的老博客浏览：<a href="https://www.cnblogs.com/hepingan/p/18000450">企业级微服务大项目实战《学成在线》【三】（Nacos,Gateway,Minio环境搭建） - 何平安 - 博客园</a>**！！！</p><h1 id="Nacos网关配置"><a href="#Nacos网关配置" class="headerlink" title="Nacos网关配置"></a>Nacos网关配置</h1><h2 id="服务器环境配置"><a href="#服务器环境配置" class="headerlink" title="服务器环境配置"></a>服务器环境配置</h2><p><strong>注意下面的环境配置是针对远程服务器或自己搭建的虚拟机的，默认资料的虚拟机可以不用看！！！</strong></p><p>先拉取1.4.1的镜像并启动：</p><p>docker pull nacos&#x2F;nacos-server:1.4.1</p><p>docker run –env MODE&#x3D;standalone –name nacos -d -p 8848:8848 nacos&#x2F;nacos-server:1.4.1</p><p>进入nacos配置文件：</p><p>docker exec -it nacos bash</p><p>配置MySQL：</p><p>spring.datasource.platform&#x3D;mysql</p><p>db.num&#x3D;1</p><p>db.url.0&#x3D;jdbc:mysql:&#x2F;&#x2F;xxxxxxxx:3306&#x2F;nacos?characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true</p><p>db.user&#x3D;root</p><p>db.password&#x3D;123456</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><strong>先总结下：配置的时候确实很麻烦，但是以后要修改的时候还是挺好修改的。</strong></p><p>在内容管理模块的接口工程、系统管理模块的接口工程中添加如下依赖，还有需要调用http请求的模块也要引入，<strong>引入后记得刷新Maven！！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>先登录并访问：<a href="https://gitee.com/link?target=http://ip:8848/nacos/">http://ip:8848/nacos/</a></p><p>账号密码：nacos&#x2F;nacos</p><p>登录成功，点击左侧菜单“命名空间”进入命名空间管理界面，</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308162543252.png" alt="image-20230308162543252"></p><p>点击“新建命名空间”，填写命名空间的相关信息。如下图：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308162554064.png" alt="image-20230308162554064"></p><p>使用相同的方法再创建“测试环境”、”生产环境”的命名空间。</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308162608472.png" alt="image-20230308162608472"></p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308162612150.png" alt="image-20230308162612150"></p><p>在系统管理的接口工程的配置文件中配置如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#微服务配置</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: system-service</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: 192.168.101.65:8848</span><br><span class="line">      discovery:</span><br><span class="line">        namespace: dev</span><br><span class="line">        group: xuecheng-plus-project</span><br></pre></td></tr></table></figure><p>在内容管理的接口工程的配置文件中配置如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: content-service</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: 192.168.101.65:8848</span><br><span class="line">      discovery:</span><br><span class="line">        namespace: dev</span><br><span class="line">        group: xuecheng-plus-project</span><br></pre></td></tr></table></figure><h3 id="content-api-content-service配置"><a href="#content-api-content-service配置" class="headerlink" title="content-api&#x2F;content-service配置"></a>content-api&#x2F;content-service配置</h3><p>在Nacos页面新建一个配置如下：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202402/3018339-20240202003654551-1585881175.png" alt="img"></p><p>再在pom坐标里引入config的依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>再在content-api的yml里编写配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#微服务配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">content-api</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">47.109</span><span class="number">.74</span><span class="number">.83</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">xuecheng-plus-project</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">xuecheng-plus-project</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="attr">refresh-enabled:</span> <span class="literal">true</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">profiles:</span></span><br><span class="line">      <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#环境名</span></span><br></pre></td></tr></table></figure><p>数据库的配置就可以去掉了，</p><p>通过dataid找到具体的配置文件，dataid有三部分组成，</p><p>比如：content-service-dev.yaml配置文件 由（content-service）-（dev）. (yaml)三部分组成</p><p>content-service：第一部分，它是在application.yaml中配置的应用名，即spring.application.name的值。</p><p>dev：第二部分，它是环境名，通过spring.profiles.active指定，</p><p>Yaml: 第三部分，它是配置文件 的后缀，目前nacos支持properties、yaml等格式类型，本项目选择yaml格式类型。</p><p>所以在content-service工程 的test目录中添加bootstrap.yaml进行单元测试，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: content-service</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: remote.centos.com:8848</span><br><span class="line">      discovery:</span><br><span class="line">        namespace: dev #命名空间，可随意取与spring.profile不一定一致</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">      config:</span><br><span class="line">        namespace: dev  #命名空间，可随意取与spring.profile不一定一致</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">        file-extension: yaml</span><br><span class="line">        refresh-enabled: true</span><br><span class="line"></span><br><span class="line">#profiles默认为dev</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p>在内容管理模块的接口工程和service工程、系统管理的接口工程和service工程配置依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>配置完成，运行content-service工程 的单元测试文件，能否正常测试。</p><p>通过运行观察控制台打印出下边的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NacosRestTemplate.java:476] - HTTP method: POST, url: http://192.168.101.65:8848/nacos/v1/cs/configs/listener, body: &#123;Listening-Configs=content-service.yaml?xuecheng-plus-project??dev?content-service-dev.yaml?xuecheng-plus-project?88459b1483b8381eccc2ef462bd59182?dev?content-service?xuecheng-plus-project??dev?, tenant=dev&#125;</span><br></pre></td></tr></table></figure><p><strong>配置content-api</strong></p><p>以相同的方法配置content-api工程的配置文件，在nacos中的开发环境中配置content-api-dev.yaml，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /content # 服务访问根路径</span><br><span class="line">  port: 63040</span><br><span class="line"># 日志文件配置路径</span><br><span class="line">logging:</span><br><span class="line">  config: classpath:log4j2-dev.xml</span><br><span class="line"># swagger 文档配置</span><br><span class="line">swagger:</span><br><span class="line">  title: &quot;学成在线内容管理系统&quot;</span><br><span class="line">  description: &quot;内容系统管理系统对课程相关信息进行业务管理数据&quot;</span><br><span class="line">  base-package: com.xuecheng.content</span><br><span class="line">  enabled: true</span><br><span class="line">  version: 1.0.0</span><br></pre></td></tr></table></figure><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308214237689.png" alt="image-20230308214237689"></p><p>在content-api工程 的本地配置bootstrap.yaml，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#微服务配置</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: content-api</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: remote.centos.com:8848</span><br><span class="line">      discovery:</span><br><span class="line">        namespace: dev #命名空间 (与profile.active有区别配置文件的拉取不是根据命名空间来拼接的)</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">      config:</span><br><span class="line">        namespace: dev</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">        file-extension: yaml</span><br><span class="line">        refresh-enabled: true</span><br><span class="line">        extension-configs:</span><br><span class="line">          - data-id: content-service-$&#123;spring.profiles.active&#125;.yaml</span><br><span class="line">            group: xuecheng-plus-project</span><br><span class="line">            refresh: true</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p>注意：因为api接口工程依赖了service工程 的jar，所以这里使用extension-configs扩展配置文件 的方式引用service工程所用到的配置文件。</p><p>如果添加多个扩展文件，继续在下添加即可，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">extension-configs:</span><br><span class="line">          - data-id: content-service-$&#123;spring.profiles.active&#125;.yaml</span><br><span class="line">            group: xuecheng-plus-project</span><br><span class="line">            refresh: true</span><br><span class="line">          - data-id: 填写文件 dataid</span><br><span class="line">            group: xuecheng-plus-project</span><br><span class="line">            refresh: true        </span><br></pre></td></tr></table></figure><p>启动content-api工程，查询控制台是否打印出了请求nacos的日志，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[NacosRestTemplate.java:476] - HTTP method: POST, url: http://192.168.101.65:8848/nacos/v1/cs/configs/listener</span><br></pre></td></tr></table></figure><p>并使用Httpclient测试课程查询接口是否可以正常查询。</p><p><strong>公用配置</strong></p><p>还有一个优化的点是如何在nacos中配置项目的公用配置呢？</p><p>nacos提供了shared-configs可以引入公用配置。</p><p>在content-api中配置了swagger，所有的接口工程 都需要配置swagger，这里就可以将swagger的配置定义为一个公用配置，哪个项目用引入即可。</p><p>单独在xuecheng-plus-common分组下创建xuecheng-plus的公用配置，进入nacos的开发环境，添加swagger-dev.yaml公用配置</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308215015982.png" alt="image-20230308215015982"></p><p>删除<code>content-api-dev.yaml</code>中对swagger的配置。</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308215550366.png" alt="image-20230308215550366"></p><p>项目使用shared-configs可以引入公用配置。在接口工程的本地配置文件 中引入公用配置(其他配置类似,这里忽略了log4j的配置过程)，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#微服务配置</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: content-api</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: remote.centos.com:8848</span><br><span class="line">      discovery:</span><br><span class="line">        namespace: dev #命名空间 (与profile.active有区别配置文件的拉取不是根据命名空间来拼接的)</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">      config:</span><br><span class="line">        namespace: dev</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">        file-extension: yaml</span><br><span class="line">        refresh-enabled: true</span><br><span class="line">        extension-configs:</span><br><span class="line">          - data-id: content-service-$&#123;spring.profiles.active&#125;.yaml</span><br><span class="line">            group: xuecheng-plus-project</span><br><span class="line">            refresh: true</span><br><span class="line">        shared-configs:</span><br><span class="line">          - data-id: swagger-$&#123;spring.profiles.active&#125;.yaml</span><br><span class="line">            group: xuecheng-plus-common</span><br><span class="line">            refresh: true</span><br><span class="line">          - data-id: logging-$&#123;spring.profiles.active&#125;.yaml</span><br><span class="line">            group: xuecheng-plus-common</span><br><span class="line">            refresh: true</span><br><span class="line"></span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p>配置完成，重启content-api接口工程，访问<a href="https://gitee.com/link?target=http://localhost:63040/content/swagger-ui.html">http://localhost:63040/content/swagger-ui.html</a> 查看swagger接口文档是否可以正常访问，查看控制台log4j2日志输出是否正常。</p><h5 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h5><p>到目前为止已将所有微服务的配置统一在nacos进行配置，用到的配置文件有本地的配置文件 bootstrap.yaml和nacos上的配置文件，引入配置文件的形式有：</p><p>1、通过dataid方式引入</p><p>2、以扩展配置文件方式引入</p><p>3、以共享配置文件 方式引入</p><p>下边测试这几种配置文件方式的优先级。</p><p>我们使用内容管理服务中的配置文件，首先在共享配置文件 swagger-dev.yaml中配置四个配置项，如下：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309134210974.png" alt="image-20230309134210974"></p><p>配置完成发布。</p><p>下边在content-api工程的启动类中添加如下代码读取这四个配置项的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class ContentApplication &#123;</span><br><span class="line"></span><br><span class="line">   @Value(&quot;$&#123;test_config.a&#125;&quot;)</span><br><span class="line">   String a;</span><br><span class="line">   @Value(&quot;$&#123;test_config.b&#125;&quot;)</span><br><span class="line">   String b;</span><br><span class="line">   @Value(&quot;$&#123;test_config.c&#125;&quot;)</span><br><span class="line">   String c;</span><br><span class="line">   @Value(&quot;$&#123;test_config.d&#125;&quot;)</span><br><span class="line">   String d;</span><br><span class="line"></span><br><span class="line">   @Bean</span><br><span class="line">   public Integer getTest()&#123;</span><br><span class="line">      System.out.println(&quot;a=&quot;+a);</span><br><span class="line">      System.out.println(&quot;b=&quot;+b);</span><br><span class="line">      System.out.println(&quot;c=&quot;+c);</span><br><span class="line">      System.out.println(&quot;d=&quot;+d);</span><br><span class="line">      return new Integer(1);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      SpringApplication.run(ContentApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动content-api工程，在return new Integer(1);处打断点，运行到断点处，如下：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309134251802.png" alt="image-20230309134251802"></p><p>这说明已经成功读取到 四个配置项的值。</p><p>下边在content-api工程的扩展配置文件 conent-service-dev.yaml中配置三个配置项，如下：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309135407678.png" alt="image-20230309135407678"></p><p>再次重启content-api工程，在return new Integer(1);处打断点，运行到断点处，如下：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309135419829.png" alt="image-20230309135419829"></p><p>从结果可以看出，扩展配置文件比共享配置文件优先级高。</p><p>下边继续content-api-dev.yaml中配置两个配置项，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_config:</span><br><span class="line">  a: 4a</span><br><span class="line">  b: 4b</span><br><span class="line">  c: 4c</span><br><span class="line">  d: 4d</span><br></pre></td></tr></table></figure><p>再次重启内容管理接口工程，在return new Integer(1);处打断点，运行到断点处，如下：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309135654218.png" alt="image-20230309135654218"></p><p>这说明本地配置文件配置的内容没有起作用，原因是nacos配置文件中的相同的配置项覆盖了本地的配置项。</p><p>到这可以总结各各配置文件 的优先级：项目应用名配置文件 &gt; 扩展配置文件 &gt; 共享配置文件 &gt; 本地配置文件。</p><p>有时候我们在测试程序时直接在本地加一个配置进行测试，这时我们想让本地最优先，可以在nacos配置文件 中配置如下即可实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line"> cloud:</span><br><span class="line">  config:</span><br><span class="line">    override-none: true</span><br></pre></td></tr></table></figure><p>再次重启content-api工程，在return new Integer(1);处打断点，运行到断点处，如下：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309135741633.png" alt="image-20230309135741633"></p><p>可以看出此时本地配置最优先</p><p>除此之外,我们一般不会带本地配置写入到bootstrap.yml中而是通过jvm参数</p><p>如我们要启动两个服务进行调试,那么端口号就不能一致,因此我们可以通过添加jvm参数指定端口号:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dserver.port=8088</span><br></pre></td></tr></table></figure><p>如我们现在向启动两个content服务</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309145108805.png" alt="image-20230309145108805"></p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309145353006.png" alt="image-20230309145353006"></p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309145419800.png" alt="image-20230309145419800"></p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309145613692.png" alt="image-20230309145613692"></p><h5 id="4-2-2-6-导入配置文件"><a href="#4-2-2-6-导入配置文件" class="headerlink" title="4.2.2.6 导入配置文件"></a>4.2.2.6 导入配置文件</h5><p>课程资料中提供了系统用的所有配置文件nacos_config_export.zip，下边将nacos_config_export.zip导入nacos。</p><p>进入具体的命名空间，点击“导入配置”</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309140250256.png" alt="image-20230309140250256"></p><p>打开导入窗口</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309140325306.png" alt="image-20230309140325306"></p><p>相同的配置跳过覆盖配置。</p><p>点击“上传文件”选择nacos_config_export.zip开始导入。</p><p> <strong>远程服务器</strong>的记得修改rabbitmq-dev的ip地址~</p><h2 id="搭建Gateway"><a href="#搭建Gateway" class="headerlink" title="搭建Gateway"></a>搭建Gateway</h2><p>本项目使用Spring Cloud Gateway作为网关，下边创建网关工程。</p><p>新建一个网关工程。</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309141037907.png" alt="image-20230309141037907"></p><p>项目结构如下</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309141934603.png" alt="image-20230309141934603"></p><p>添加依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--网关--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--服务发现中心--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">     &lt;!-- 排除 Spring Boot 依赖的日志包冲突 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring Boot 集成 log4j2 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><p>配置网关的bootstrap.yaml配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#微服务配置</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gateway</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: 192.168.101.65:8848</span><br><span class="line">      discovery:</span><br><span class="line">        namespace: $&#123;spring.profiles.active&#125;</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">      config:</span><br><span class="line">        namespace: $&#123;spring.profiles.active&#125;</span><br><span class="line">        group: xuecheng-plus-project</span><br><span class="line">        file-extension: yaml</span><br><span class="line">        refresh-enabled: true</span><br><span class="line">        shared-configs:</span><br><span class="line">          - data-id: logging-$&#123;spring.profiles.active&#125;.yaml</span><br><span class="line">            group: xuecheng-plus-common</span><br><span class="line">            refresh: true</span><br><span class="line">  profiles:</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p>在nacos上配置网关路由策略：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309141606145.png" alt="image-20230309141606145"></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="minio"><a href="#minio" class="headerlink" title="minio"></a>minio</h1><p>一个分布式存储数据的东西啦，如果学过大数据的话就应该知道Hadoop，里面的底层就是HDFS,模式为主从结构，而minio则是相反的去中心化模式，下面是官方点的介绍：</p><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>本项目采用MinIO构建分布式文件系统，MinIO 是一个非常轻量的服务,可以很简单的和其他应用的结合使用，它兼容亚马逊 S3 云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等。</p><p>它一大特点就是轻量，使用简单，功能强大，支持各种平台，单个文件最大5TB，兼容 Amazon S3接口，提供了 Java、Python、GO等多版本SDK支持。</p><p>官网：<a href="https://gitee.com/link?target=https://min.io">https://min.io</a></p><p>中文：<a href="https://gitee.com/link?target=https://www.minio.org.cn/%EF%BC%8Chttp://docs.minio.org.cn/docs/">https://www.minio.org.cn/，http://docs.minio.org.cn/docs/</a></p><p>MinIO集群采用去中心化共享架构，每个结点是对等关系，通过Nginx可对MinIO进行负载均衡访问。</p><p>去中心化有什么好处？</p><p>在大数据领域，通常的设计理念都是无中心和分布式。Minio分布式模式可以帮助你搭建一个高可用的对象存储服务，你可以使用这些存储设备，而不用考虑其真实物理位置。</p><p>它将分布在不同服务器上的多块硬盘组成一个对象存储服务。由于硬盘分布在不同的节点上，分布式Minio避免了单点故障。如下图：</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230309164159781.png" alt="image-20230309164159781"></p><p>Minio使用纠删码技术来保护数据，它是一种恢复丢失和损坏数据的数学算法，它将数据分块冗余的分散存储在各各节点的磁盘上，所有的可用磁盘组成一个集合，上图由8块硬盘组成一个集合，当上传一个文件时会通过纠删码算法计算对文件进行分块存储，除了将文件本身分成4个数据块，还会生成4个校验块，数据块和校验块会分散的存储在这8块硬盘上。</p><p>使用纠删码的好处是即便丢失一半数量（N&#x2F;2）的硬盘，仍然可以恢复数据。 比如上边集合中有4个以内的硬盘损害仍可保证数据恢复，不影响上传和下载，如果多于一半的硬盘坏了则无法恢复。</p><h2 id="远程服务器部署minio"><a href="#远程服务器部署minio" class="headerlink" title="远程服务器部署minio"></a><strong>远程服务器部署minio</strong></h2><p><strong>老师默认的虚拟是有minio环境的，这里是其它服务器或自搭虚拟机的方法~</strong></p><p>先拉取镜像，可以在后面加上版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><p>二、创建挂载目录</p><p>1 宿主机与容器挂载映射</p><table><thead><tr><th>宿主机位置</th><th>容器位置</th></tr></thead><tbody><tr><td>&#x2F;data&#x2F;minio&#x2F;config</td><td>&#x2F;data</td></tr><tr><td>&#x2F;data&#x2F;minio&#x2F;data</td><td>&#x2F;root&#x2F;.minio</td></tr></tbody></table><p>2 挂载命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/minio/config</span><br><span class="line">mkdir -p /data/minio/data</span><br></pre></td></tr></table></figure><p>三、运行MinIO</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 -p 9090:9090 --name minio \</span><br><span class="line">-d --restart=always \</span><br><span class="line">-e &quot;MINIO_ACCESS_KEY=admin&quot; \</span><br><span class="line">-e &quot;MINIO_SECRET_KEY=admin123456&quot; \</span><br><span class="line">-v /data/minio/data:/data \</span><br><span class="line">-v /data/minio/config:/root/.minio \minio/minio \</span><br><span class="line">server /data --console-address &quot;:9090&quot;</span><br></pre></td></tr></table></figure><blockquote><p>命令参数解释：<br>-d :后台启动<br>-p :端口映射<br>-name :为这个容器取一个名字<br>-e :设置环境变量<br>-v :文件挂载位置<br>–console-address “:9090” :选择静态端口号，这里注意下控制台端口号不能和静态端口号一样</p></blockquote><p>目前的docker容器：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202402/3018339-20240202055724430-392625930.png" alt="img"></p><p>四、查看MinIO是否启动成功</p><ul><li>打开 <code>http://ip:9090</code></li><li>密码为上面设置的admin admin123456</li></ul><h2 id="项目文件配置"><a href="#项目文件配置" class="headerlink" title="项目文件配置"></a>项目文件配置</h2><p>在media-service的pom里添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>登进去网页直接创建一个bucket，然后将其访问仅限改成public，不然等下测试类访问不到：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202402/3018339-20240202060911339-1759773817.png" alt="img"></p><p>直接搞个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.M</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试minio的sdk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/2/17 11:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span></span><br><span class="line">            MinioClient.builder()</span><br><span class="line">                    .endpoint(<span class="string">&quot;http://xx.xx.xx.xx:9000&quot;</span>)</span><br><span class="line">                    .credentials(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin123456&quot;</span>)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_upload</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过扩展名得到媒体资源类型 mimeType</span></span><br><span class="line">        <span class="comment">//根据扩展名取出mimeType</span></span><br><span class="line">        <span class="type">ContentInfo</span> <span class="variable">extensionMatch</span> <span class="operator">=</span> ContentInfoUtil.findExtensionMatch(<span class="string">&quot;.mp4&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">mimeType</span> <span class="operator">=</span> MediaType.APPLICATION_OCTET_STREAM_VALUE;<span class="comment">//通用mimeType，字节流</span></span><br><span class="line">        <span class="keyword">if</span>(extensionMatch!=<span class="literal">null</span>)&#123;</span><br><span class="line">            mimeType = extensionMatch.getMimeType();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件的参数信息</span></span><br><span class="line">        <span class="type">UploadObjectArgs</span> <span class="variable">uploadObjectArgs</span> <span class="operator">=</span> UploadObjectArgs.builder()</span><br><span class="line">                .bucket(<span class="string">&quot;testbucket&quot;</span>)<span class="comment">//桶</span></span><br><span class="line">                .filename(<span class="string">&quot;D:\\develop\\upload\\1.mp4&quot;</span>) <span class="comment">//指定本地文件路径</span></span><br><span class="line"><span class="comment">//                .object(&quot;1.mp4&quot;)//对象名 在桶下存储该文件</span></span><br><span class="line">                .object(<span class="string">&quot;test/01/1.mp4&quot;</span>)<span class="comment">//对象名 放在子目录下</span></span><br><span class="line">                .contentType(mimeType)<span class="comment">//设置媒体文件类型</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传文件</span></span><br><span class="line">        minioClient.uploadObject(uploadObjectArgs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除文件</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_delete</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//RemoveObjectArgs</span></span><br><span class="line">        <span class="type">RemoveObjectArgs</span> <span class="variable">removeObjectArgs</span> <span class="operator">=</span> RemoveObjectArgs.builder().bucket(<span class="string">&quot;testbucket&quot;</span>).object(<span class="string">&quot;1.mp4&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除文件</span></span><br><span class="line">        minioClient.removeObject(removeObjectArgs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询文件 从minio中下载</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test_getFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">GetObjectArgs</span> <span class="variable">getObjectArgs</span> <span class="operator">=</span> GetObjectArgs.builder().bucket(<span class="string">&quot;testbucket&quot;</span>).object(<span class="string">&quot;test/01/1.mp4&quot;</span>).build();</span><br><span class="line">        <span class="comment">//查询远程服务获取到一个流对象</span></span><br><span class="line">        <span class="type">FilterInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> minioClient.getObject(getObjectArgs);</span><br><span class="line">        <span class="comment">//指定输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\develop\\upload\\1a.mp4&quot;</span>));</span><br><span class="line">        IOUtils.copy(inputStream,outputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验文件的完整性对文件的内容进行md5</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\develop\\upload\\1.mp4&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">source_md5</span> <span class="operator">=</span> DigestUtils.md5Hex(fileInputStream1);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\develop\\upload\\1a.mp4&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">local_md5</span> <span class="operator">=</span> DigestUtils.md5Hex(fileInputStream);</span><br><span class="line">        <span class="keyword">if</span>(source_md5.equals(local_md5))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;下载成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看注释就看得懂了，可以修改下一些参数然后自己测试下，是没问题的。</p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学成在线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级微服务大项目实战《学成在线》【二】(课程相关接口)</title>
      <link href="/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E4%BA%8C%E3%80%91-%E8%AF%BE%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%8E%A5%E5%8F%A3/"/>
      <url>/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E4%BA%8C%E3%80%91-%E8%AF%BE%E7%A8%8B%E7%9B%B8%E5%85%B3%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p><strong>！！！移步我的老博客：<a href="https://www.cnblogs.com/hepingan/p/17981502">企业级微服务大项目实战《学成在线》【二】(课程相关接口) - 何平安 - 博客园</a>！！！</strong></p><p><strong>下面正式开始开发！</strong></p><p><strong>对了我的笔记肯定不会把全部代码都打上去，我会挑一些技术点进行阐述。</strong></p><p><strong>补充下为啥要叫DTO，PO啥的：</strong></p><p><strong>DTO</strong>:前端给后端传递的数据</p><p><strong>VO</strong>:后端给前端传递的数据</p><p><strong>DO</strong>:数据库表结构</p><p><strong>PO</strong>:数据库表结构到JAVA的映射类</p><h1 id="课程信息"><a href="#课程信息" class="headerlink" title="课程信息"></a><strong>课程信息</strong></h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a><strong>查询</strong></h2><p>开发习惯从底层开始，所以就从DAO层（mapper层）开始写，再写service。</p><p>先在content-service写个测试类，配置和包看黑马的去。介绍下以前学过的分页查询插件courseBaseMapper,实质上就是在sql语句上加上limit等语句，可以看下测试类的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseBaseMapperTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CourseBaseMapper courseBaseMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCourse</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">courseBase</span> <span class="operator">=</span> courseBaseMapper.selectById(<span class="number">18</span>);</span><br><span class="line">        Assertions.assertNotNull(courseBase);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ctrl点击selectById就可以看到这个插件的底层实现原理。然后是分页查询的全部代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCourse</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">courseBase</span> <span class="operator">=</span> courseBaseMapper.selectById(<span class="number">18</span>);</span><br><span class="line">        Assertions.assertNotNull(courseBase);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页查询</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PageParams</span> <span class="variable">pageParams</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">PageParams</span>();</span><br><span class="line">        pageParams.setPageNo(<span class="number">1L</span>);</span><br><span class="line">        pageParams.setPageSize(<span class="number">10L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">QueryCourseParamsDto</span> <span class="variable">courseParamsDto</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">QueryCourseParamsDto</span>();</span><br><span class="line">        courseParamsDto.setCourseName(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        LambdaQueryWrapper&lt;CourseBase&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//在sql中拼接course_base.name like &#x27;%值%&#x27;</span></span><br><span class="line">        queryWrapper.like(StringUtils.isNotEmpty(courseParamsDto.getCourseName()),CourseBase::getName,courseParamsDto.getCourseName());</span><br><span class="line">        <span class="comment">//根据课程审核状态查询</span></span><br><span class="line">        queryWrapper.eq(StringUtils.isNotEmpty(courseParamsDto.getAuditStatus()),CourseBase::getAuditStatus,courseParamsDto.getAuditStatus());</span><br><span class="line"></span><br><span class="line">        Page&lt;CourseBase&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">        Page&lt;CourseBase&gt; pageResult = courseBaseMapper.selectPage(page, queryWrapper);</span><br><span class="line">        PageResult&lt;CourseBase&gt; tPageResult = <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(pageResult.getRecords(),pageResult.getTotal(),pageParams.getPageNo(),pageParams.getPageSize());</span><br><span class="line">        System.out.println(tPageResult);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行出来拿到断点有结果就成了：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240124052950614-469568137.png" alt="img"></p><p> 大概流程就是利用LambdaQueryWrapper那个插件然后一直利用参数查询所需要的结果，一步一步装填数据，最终以PageResult的形式返回就行。</p><p>然后说一下根据课程状态进行查询，在实际开发中一般会以代码来代替课程状态的中文，也是为了方便修改和规范，所以有个xc2.0_system的dictionary的数据库表就拿来表示对应关系：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240124182055306-1832049081.png" alt="img"></p><p> 直接在刚刚的代码下加一个条件：courseParamsDto.setAuditStatus(“202004”);</p><p>接下来就来测试接口，在默认文件里api模块下有个Controller类里面接口是写好的，然后就可以运行ContentApplication的springboot启动项，然后浏览器输入localhost:63040&#x2F;content&#x2F;swagger-ui.html,然后测试一下有数据就成功。还有个HttpClient插件接口测试，可以去下载搜一下，postman也可以。像我的就比较推荐httpclient直接就在idea里测试：<img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240125011128042-1654034248.png" alt="img"></p><p>它还可以设置环境，在api-test下创建一个env.json文件，里面编写：</p><p>{<br> “dev”: {<br>  “access_token”: “”,<br>  “gateway_host”: “localhost:63010”,<br>  “content_host”: “localhost:63040”,<br>  “system_host”: “localhost:63110”,<br>  “media_host”: “localhost:63050”,<br>  “search_host”: “localhost:63080”,<br>  “auth_host”: “localhost:63070”,<br>  “checkcode_host”: “localhost:63075”,<br>  “learning_host”: “localhost:63020”<br> }<br>}</p><p>然后再在http里将localhost:63040换成NaN</p><h2 id="前后端联调"><a href="#前后端联调" class="headerlink" title="前后端联调"></a>前后端联调</h2><p>解压打开前端文件这里用idea打开，然后去设置里配置npm和node的位置，打开根目录下的package.json ,运行serve的（idea它有），或者右键package.json选择查看npm脚本找到serve运行。对了如果运行失败，大概率是你的node版本与该项目的node文件版本不一致，两种办法，一是卸载项目里的node_moudels,再cnpm install安装自己版本的node文件，二是你自己更换node版本，这里是16.17.0，但是我用了第一种方法发现运行是没问题，但是一直报错，可能版本不同有些语法也不同吧哈哈哈，还是用第二种吧。</p><p>这里推荐另一个插件nvm，可以管理node的版本：<a href="https://blog.csdn.net/qq_33745371/article/details/109039414">windows下node更换版本（简单操作）_node版本更改-CSDN博客</a>，有了它想切换哪个版本就切换。推荐我这样做，算是第三种方法吧qwq</p><p>将资料的system文件导入java项目中，复制api的resourse到service并修改下数据库的连接地址。</p><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><p>在浏览器通过<a href="http://localhost:8601/%E5%9C%B0%E5%9D%80%E8%AE%BF%E9%97%AE%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E3%80%82">http://localhost:8601/地址访问前端工程。</a></p><p>chrome浏览器报错如下：</p><p>Access to XMLHttpRequest at ‘<a href="http://localhost:63110/system/dictionary/all">http://localhost:63110/system/dictionary/all</a>‘ from origin ‘<a href="http://localhost:8601/">http://localhost:8601</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p><p>firefox浏览器报错如下：</p><p>已拦截跨源请求：同源策略禁止读取位于 <a href="http://localhost:63110/system/dictionary/all">http://localhost:63110/system/dictionary/all</a> 的远程资源。（原因：CORS 头缺少 ‘Access-Control-Allow-Origin’）。状态码：200。</p><p>提示：从<a href="http://localhost:8601/">http://localhost:8601</a>访问<a href="http://localhost:63110/system/dictionary/all%E8%A2%ABCORS">http://localhost:63110/system/dictionary/all被CORS</a> policy阻止，因为没有Access-Control-Allow-Origin 头信息。CORS全称是 cross origin resource share 表示跨域资源共享。</p><p>出这个提示的原因是基于浏览器的同源策略，去判断是否跨域请求，同源策略是浏览器的一种安全机制，从一个地址请求另一个地址，如果协议、主机、端口三者全部一致则不属于跨域，否则有一个不一致就是跨域请求。</p><p>比如：</p><p>从<a href="http://localhost:8601/">http://localhost:8601</a> 到  <a href="http://localhost:8602/">http://localhost:8602</a> 由于端口不同，是跨域。</p><p>从<a href="http://192.168.101.10:8601/">http://192.168.101.10:8601</a> 到  <a href="http://192.168.101.11:8601/">http://192.168.101.11:8601</a> 由于主机不同，是跨域。</p><p>从<a href="http://192.168.101.10:8601/">http://192.168.101.10:8601</a> 到  <a href="https://192.168.101.11:8601/">https://192.168.101.10:8601</a> 由于协议不同，是跨域。</p><p>注意：服务器之间不存在跨域请求。</p><p>浏览器判断是跨域请求会在请求头上添加origin，表示这个请求来源哪里。</p><p>比如：</p><p>GET &#x2F; HTTP&#x2F;1.1 Origin: <a href="http://localhost:8601/">http://localhost:8601</a></p><p>服务器收到请求判断这个Origin是否允许跨域，如果允许则在响应头中说明允许该来源的跨域请求，如下：</p><p>Access-Control-Allow-Origin：<a href="http://localhost:8601/">http://localhost:8601</a></p><p>如果允许任何域名来源的跨域请求，则响应如下：</p><p>Access-Control-Allow-Origin：*</p><p>解决跨域的方法：</p><p>1、JSONP</p><p>通过script标签的src属性进行跨域请求，如果服务端要响应内容则首先读取请求参数callback的值，callback是一个回调函数的名称，服务端读取callback的值后将响应内容通过调用callback函数的方式告诉请求方。如下图：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240125023039132-1335727729.png" alt="img">2、添加响应头</p><p>服务端在响应头添加 Access-Control-Allow-Origin：*</p><p>3、通过nginx代理跨域</p><p>由于服务端之间没有跨域，浏览器通过nginx去访问跨域地址。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240125023051826-1778141590.png" alt="img"></p><p>1）浏览器先访问<a href="http://192.168.101.10:8601/">http://192.168.101.10:8601</a> nginx提供的地址，进入页面</p><p>2）此页面要跨域访问<a href="http://192.168.101.11:8601/">http://192.168.101.11:8601</a> ，不能直接跨域访问<a href="http://www.baidu.com:8601/">http://www.baidu.com:8601</a> ，而是访问nginx的一个同源地址，比如：<a href="http://192.168.101.11:8601/api">http://192.168.101.11:8601/api</a> ，通过<a href="http://192.168.101.11:8601/api">http://192.168.101.11:8601/api</a> 的代理去访问<a href="http://www.baidu.com:8601/">http://www.baidu.com:8601</a>。</p><p>这样就实现了跨域访问。</p><p>浏览器到<a href="http://192.168.101.11:8601/api">http://192.168.101.11:8601/api</a> 没有跨域</p><p>nginx到<a href="http://www.baidu.com:8601/">http://www.baidu.com:8601</a>通过服务端通信，没有跨域。</p><p>我们准备使用方案2解决跨域问题。在内容管理的api工程config包下编写GlobalCorsConfig.java，</p><p>或直接从课程资料&#x2F;项目工程下拷贝，</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.system.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 跨域过虑器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.M</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/9/7 11:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 允许跨域调用的过滤器</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">   <span class="comment">//允许白名单域名进行跨域调用</span></span><br><span class="line">   config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">   <span class="comment">//允许跨越发送cookie</span></span><br><span class="line">   config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">//放行全部原始头信息</span></span><br><span class="line">   config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">   <span class="comment">//允许所有请求方法跨域调用</span></span><br><span class="line">   config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">   <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">   source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>此配置类实现了跨域过虑器，在响应头添加Access-Control-Allow-Origin。</p><p>重启系统管理服务，前端工程可以正常进入<a href="http://localhost:8601/">http://localhost:8601</a>，观察浏览器记录，成功解决跨域。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240125023207746-1212895316.png" alt="img"></p><h2 id="课程分类查询"><a href="#课程分类查询" class="headerlink" title="课程分类查询"></a>课程分类查询</h2><p>先来看看树状查询的sql语句例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> one.id one_id,</span><br><span class="line">       one.label one_lable,</span><br><span class="line">       two.id two_id,</span><br><span class="line">       two.label two_lable</span><br><span class="line"><span class="keyword">from</span> course_category <span class="keyword">one</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> course_category two <span class="keyword">on</span> two.parentid <span class="operator">=</span> one.id</span><br><span class="line"><span class="keyword">where</span> one.parentid <span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>树状数据结构的样子就是数据结构里的树：parentid就是它的父节点</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240127023524759-43047546.png" alt="img"></p><p>为什么选择在mysql中递归而不在java中递归：因为Java每递归一次就要连接一次数据库，性能不好。</p><p>还是根据接口文档给的json参数来写接口，不然传参都不知道传啥。</p><p>这是mapper的sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectTreeNodes&quot; resultType<span class="operator">=</span>&quot;com.xuecheng.content.model.dto.CourseCategoryTreeDto&quot; parameterType<span class="operator">=</span>&quot;string&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">recursive</span> t1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>  course_category p <span class="keyword">where</span>  id<span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> t.<span class="operator">*</span> <span class="keyword">from</span> course_category t <span class="keyword">inner</span> <span class="keyword">join</span> t1 <span class="keyword">on</span> t1.id <span class="operator">=</span> t.parentid</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> t1 <span class="keyword">order</span> <span class="keyword">by</span> t1.id, t1.orderby</span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>主要就是写写sql，这里比较难，其它的都是那三层架构。，然后是最难的service将查的数据整理并返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseCategoryServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CourseCategoryService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CourseCategoryMapper courseCategoryMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CourseCategoryTreeDto&gt; <span class="title function_">queryTreeNodes</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归查询分类信息</span></span><br><span class="line">        List&lt;CourseCategoryTreeDto&gt; treeNodes = courseCategoryMapper.selectTreeNodes(id);</span><br><span class="line">        <span class="comment">//将list转map,以备使用,排除根节点</span></span><br><span class="line">        Map&lt;String, CourseCategoryTreeDto&gt; mapTemp = treeNodes.stream().filter(item-&gt;!id.equals(item.getId())).collect(Collectors.toMap(key -&gt; key.getId(), value -&gt; value, (key1, key2) -&gt; key2));</span><br><span class="line">        <span class="comment">//最终返回的list</span></span><br><span class="line">        List&lt;CourseCategoryTreeDto&gt; categoryTreeDtos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//依次遍历每个元素,排除根节点</span></span><br><span class="line">        treeNodes.stream().filter(item-&gt;!id.equals(item.getId())).forEach(item-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.getParentid().equals(id))&#123;</span><br><span class="line">                categoryTreeDtos.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//找到当前节点的父节点</span></span><br><span class="line">            <span class="type">CourseCategoryTreeDto</span> <span class="variable">courseCategoryTreeDto</span> <span class="operator">=</span> mapTemp.get(item.getParentid());</span><br><span class="line">            <span class="keyword">if</span>(courseCategoryTreeDto!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(courseCategoryTreeDto.getChildrenTreeNodes() ==<span class="literal">null</span>)&#123;</span><br><span class="line">                    courseCategoryTreeDto.setChildrenTreeNodes(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CourseCategoryTreeDto&gt;());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//下边开始往ChildrenTreeNodes属性中放子节点</span></span><br><span class="line">                courseCategoryTreeDto.getChildrenTreeNodes().add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> categoryTreeDtos;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>逻辑性比较强，大概流程就是遍历每个节点，如果有父节点则添加到父节点的list去，有一步的if是判断它的子节点是否为空，为空则创建一个该节点的孩子节点的list，因为默认childrenNodes为null，比如1-1走的流程就是先走过滤器，然后添加到1的子节点上，1-1-1则是看到它的父节点1-1的childrennodes为空先创建一个list，然后再添加到该list下。</p><h2 id="新增课程"><a href="#新增课程" class="headerlink" title="新增课程"></a>新增课程</h2><p>来看看service层的接口吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加课程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> companyId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> CourseBaseInfoDto <span class="title function_">createCourseBase</span><span class="params">(Long companyId,AddCourseDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">/*1.参数合法性校验*/</span></span><br><span class="line">        <span class="comment">//合法性校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dto.getName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;课程名称为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dto.getMt())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;课程分类为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dto.getSt())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;课程分类为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dto.getGrade())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;课程等级为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dto.getTeachmode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;教育模式为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dto.getUsers())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;适应人群为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(dto.getCharge())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;收费规则为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*2.数据封装调用mapper持久化数据*/</span></span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">insertCourseBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CourseBase</span>();</span><br><span class="line">        <span class="comment">//数据拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(dto,insertCourseBase);</span><br><span class="line">        <span class="comment">//设置默认审核状态</span></span><br><span class="line">        insertCourseBase.setAuditStatus(<span class="string">&quot;202002&quot;</span>);</span><br><span class="line">        <span class="comment">//设置默认发布状态</span></span><br><span class="line">        insertCourseBase.setStatus(<span class="string">&quot;203001&quot;</span>);</span><br><span class="line">        <span class="comment">//机构id</span></span><br><span class="line">        insertCourseBase.setCompanyId(companyId);</span><br><span class="line">        <span class="comment">//添加时间</span></span><br><span class="line">        insertCourseBase.setCreateDate(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入课程基本信息表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">insert</span> <span class="operator">=</span> courseBaseMapper.insert(insertCourseBase);</span><br><span class="line">        <span class="keyword">if</span>(insert&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;新增课程基本信息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//todo:向课程营销表保存课程营销信息course_market</span></span><br><span class="line">        <span class="type">CourseMarket</span> <span class="variable">courseMarket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">CourseMarket</span>();</span><br><span class="line">        <span class="comment">//将页面输入的数据拷贝到courseMarket</span></span><br><span class="line">        BeanUtils.copyProperties(dto,courseMarket);</span><br><span class="line">        <span class="comment">//课程id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">courseId</span> <span class="operator">=</span> insertCourseBase.getId();</span><br><span class="line">        courseMarket.setId(courseId);</span><br><span class="line">        <span class="comment">//保存营销信息</span></span><br><span class="line">        saveCourseMarket(courseMarket);</span><br><span class="line">        <span class="comment">//todo:查询课程基本信息及营销信息并返回</span></span><br><span class="line">        <span class="comment">//从数据库查出来</span></span><br><span class="line">        <span class="type">CourseBaseInfoDto</span> <span class="variable">courseBaseInfo</span> <span class="operator">=</span> getCourseBaseInfo(courseId);</span><br><span class="line">        <span class="keyword">return</span> courseBaseInfo;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单独写一个方法保存营销信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">saveCourseMarket</span><span class="params">(CourseMarket courseMarket)</span>&#123;</span><br><span class="line">        <span class="comment">//参数的合法性校验</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">charge</span> <span class="operator">=</span> courseMarket.getCharge();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(charge))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;收费规则不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;201001&quot;</span>.equals(charge)) <span class="comment">//如果为收费课程,扣费规则不能为空</span></span><br><span class="line">            <span class="keyword">if</span>(courseMarket.getPrice() == <span class="literal">null</span> || courseMarket.getPrice().floatValue() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;收费课程价格为空&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span>courseMarket.getId();</span><br><span class="line">        <span class="type">CourseMarket</span> <span class="variable">courseMarket1</span> <span class="operator">=</span>courseMarketMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (courseMarket1 == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//插入数据库</span></span><br><span class="line">            courseMarketMapper.insert(courseMarket);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            BeanUtils.copyProperties(courseMarket,courseMarket1);</span><br><span class="line">            courseMarket1.setId(courseMarket.getId());</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            courseMarketMapper.updateById(courseMarket1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CourseBaseInfoDto <span class="title function_">getCourseBaseInfo</span><span class="params">(<span class="type">long</span> courseId)</span>&#123;</span><br><span class="line">        <span class="comment">/*查询课程*/</span></span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">courseBase</span> <span class="operator">=</span> courseBaseMapper.selectById(courseId);</span><br><span class="line">        <span class="keyword">if</span>(courseBase==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/*查询课程营销信息*/</span></span><br><span class="line">        <span class="type">CourseMarket</span> <span class="variable">courseMarket</span> <span class="operator">=</span> courseMarketMapper.selectById(courseId);</span><br><span class="line">        <span class="comment">/*创建返回的dto*/</span></span><br><span class="line">        <span class="type">CourseBaseInfoDto</span> <span class="variable">courseBaseInfoDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CourseBaseInfoDto</span>();</span><br><span class="line">        BeanUtils.copyProperties(courseBase,courseBaseInfoDto);</span><br><span class="line">        <span class="keyword">if</span>(courseMarket!=<span class="literal">null</span>)</span><br><span class="line">            BeanUtils.copyProperties(courseMarket,courseBaseInfoDto);</span><br><span class="line">        <span class="type">CourseCategory</span> <span class="variable">courseCategoryMt</span> <span class="operator">=</span> courseCategoryMapper.selectById(courseBaseInfoDto.getMt());</span><br><span class="line">        <span class="type">CourseCategory</span> <span class="variable">courseCategorySt</span> <span class="operator">=</span> courseCategoryMapper.selectById(courseBaseInfoDto.getSt());</span><br><span class="line">        courseBaseInfoDto.setMtName(courseCategoryMt.getName());</span><br><span class="line">        courseBaseInfoDto.setStName(courseCategorySt.getName());</span><br><span class="line">        <span class="keyword">return</span> courseBaseInfoDto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤就是先排除有没有必填信息没填，然后再是添加默认信息，以及营销表的检验和插入，最后将插入的课程的基本信息和营销信息并返回,测试参数（记得设置运行环境~）：</p><p>### 课程新增<br>POST &#x2F;content&#x2F;course<br>Content-Type: application&#x2F;json</p><p>{<br>“charge”: “201000”,<br>“price”: 0,<br>“originalPrice”:0,<br>“qq”: “22333”,<br>“wechat”: “223344”,<br>“phone”: “13333333”,<br>“validDays”: 365,<br>“mt”: “1-1”,<br>“st”: “1-1-1”,<br>“name”: “斤斤计较急急急急急急急急急急急急急急急”,<br>“pic”: “”,<br>“teachmode”: “200002”,<br>“users”: “初级人员”,<br>“tags”: “”,<br>“grade”: “204001”,<br>“description”: “怕怕怕怕怕怕怕怕怕怕怕怕怕怕”,<br>“objectives”: “”<br>}</p><p>调试成功的截图：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240128064024496-386238490.png" alt="img"></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>全局异常处理器</p><p>从 Spring 3.0 - Spring 3.2 版本之间，对 Spring 架构和 SpringMVC 的Controller 的异常捕获提供了相应的异常处理。</p><ul><li><p>@ExceptionHandler</p><p>Spring3.0提供的标识在方法上或类上的注解，用来表明方法的处理异常类型。</p></li><li><p>@ControllerAdvice</p><p>Spring3.2提供的新注解，从名字上可以看出大体意思是控制器增强， 在项目中来增强SpringMVC中的Controller。通常和**<code>@ExceptionHandler</code>** 结合使用，来处理SpringMVC的异常信息。</p></li><li><p>@ResponseStatus</p><p>Spring3.0提供的标识在方法上或类上的注解，用状态代码和应返回的原因标记方法或异常类。 调用处理程序方法时，状态代码将应用于HTTP响应。</p></li></ul><p>通过上面的两个注解便可实现微服务端全局异常处理，具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package com.xuecheng.base.exception;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.http.HttpStatus;</span><br><span class="line">import org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line">import org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author woldier</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @description 全局异常处理器</span><br><span class="line"> * @date 2023/3/6 15:18</span><br><span class="line"> **/</span><br><span class="line">@ControllerAdvice</span><br><span class="line">@Slf4j</span><br><span class="line">public class GlobalExceptionHandler &#123;</span><br><span class="line">    /**</span><br><span class="line">    * @description XueChengPlusException.class 异常处理，提取异常信息并且返回</span><br><span class="line">    * @param e</span><br><span class="line">    * @return com.xuecheng.base.exception.RestErrorResponse</span><br><span class="line">    * @author: woldier</span><br><span class="line">    * @date: 2023/3/6 15:22</span><br><span class="line">    */</span><br><span class="line">    @ExceptionHandler(XueChengPlusException.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    @ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR, reason = &quot;业务模块抛出异常&quot;)</span><br><span class="line">    public RestErrorResponse doXueChengPlusException(XueChengPlusException e)&#123;</span><br><span class="line">        return new RestErrorResponse(e.getErrMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">    * @description Exception 异常处理，此异常为未知异常</span><br><span class="line">    * @param e</span><br><span class="line">    * @return com.xuecheng.base.exception.RestErrorResponse</span><br><span class="line">    * @author: woldier</span><br><span class="line">    * @date: 2023/3/6 15:27</span><br><span class="line">    */</span><br><span class="line">    @ExceptionHandler(Exception.class)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    @ResponseStatus(code = HttpStatus.INTERNAL_SERVER_ERROR, reason = &quot;服务器未知异常&quot;)</span><br><span class="line">    public RestErrorResponse doXueChengPlusException(Exception e)&#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        return new RestErrorResponse(CommonError.UNKOWN_ERROR.getErrMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改课程"><a href="#修改课程" class="headerlink" title="修改课程"></a>修改课程</h2><p>介绍下EditCourseDto这个Dto：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> woldier</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 修改课程基本信息所要使用的请求参数dto</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/3/6 19:33</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(value = &quot;EditCourseDto&quot;, description = &quot;修改课程基本信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EditCourseDto</span> <span class="keyword">extends</span> <span class="title class_">AddCourseDto</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(groups = &#123;ValidationGroups.Update.class&#125;,message = &quot;修改课程时id不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;课程名称&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承了AddCourseDto的所有信息并且加了个id属性，大概意思就是修改课程时它的属性跟添加课程时的属性一样不能为空，并且加了个修改课程的id。</p><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> CourseBaseInfoDto <span class="title function_">updateCourseBase</span><span class="params">(Long companyId, EditCourseDto editCourseDto)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="comment">//先查数据库</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span>editCourseDto.getId();</span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">courseBase</span> <span class="operator">=</span>courseBaseMapper.selectById(id);</span><br><span class="line">        <span class="comment">//为空抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (courseBase==<span class="literal">null</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查组织人id是否一样</span></span><br><span class="line">        <span class="keyword">if</span>(!courseBase.getCompanyId().equals(companyId))</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;companyID不一致&quot;</span>);</span><br><span class="line">        <span class="comment">/*更新courseBase信息*/</span></span><br><span class="line">        <span class="comment">/*拷贝*/</span></span><br><span class="line">        BeanUtils.copyProperties(editCourseDto,courseBase);</span><br><span class="line">        courseBase.setChangeDate(LocalDateTime.now());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>courseBaseMapper.updateById(courseBase);</span><br><span class="line">        <span class="keyword">if</span> (i&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;更新失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*更新营销信息*/</span></span><br><span class="line"><span class="comment">//        CourseMarket courseMarket =new CourseMarket();</span></span><br><span class="line"><span class="comment">//        BeanUtils.copyProperties(editCourseDto,courseMarket);</span></span><br><span class="line"><span class="comment">//        courseMarket.setOriginalPrice(editCourseDto.getOriginalPrice().floatValue());</span></span><br><span class="line"><span class="comment">//        courseMarket.setPrice(editCourseDto.getPrice().floatValue());</span></span><br><span class="line"><span class="comment">//        checkCharge(courseMarket.getPrice(),editCourseDto.getCharge());</span></span><br><span class="line"><span class="comment">//        courseMarketService.saveOrUpdate(courseMarket);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*查询封装返回*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getCourseBaseInfo(editCourseDto.getId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很好理解，就是检验companyId和一些属性后再修改。</p><h1 id="课程计划"><a href="#课程计划" class="headerlink" title="课程计划"></a>课程计划</h1><h2 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h2><p>对于录播课程，可以先看看播放列表，它有层级关系，第几章第几节啥的，还有对应视频或文档的信息。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240129224635084-1888465707.png" alt="img"></p><p>可以运行下下面的sql查看对应关系就知道大概关系了：</p><p>select one.id one_id,<br>one.pname one_pname,<br>two.id two_id,<br>two.pname two_pname,<br>tm.media_fileName,<br>tm.media_id<br>from teachplan one<br>inner join teachplan two on two.parentid&#x3D;one.id<br>left join teachplan_media tm on two.id &#x3D; tm.teachplan_id</p><p>where one.parentid&#x3D;0 and one.course_id&#x3D;117<br>order by one.id, two.id;</p><p>就Dao层比较麻烦要一一写，其它的都不难：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 课程分类树型结构查询映射结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;treeNodeResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.xuecheng.content.model.dto.TeachplanDto&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一级数据映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;one_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_parentid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;parentid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_grade&quot;</span> <span class="attr">property</span>=<span class="string">&quot;grade&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_mediaType&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mediaType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_stratTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stratTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_endTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_orderby&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderby&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_courseId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;one_coursePubId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;coursePubId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一级中包含多个二级数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;teachPlanTreeNodes&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.xuecheng.content.model.dto.TeachplanDto&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 二级数据映射 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;two_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_pname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;pname&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_parentid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;parentid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_grade&quot;</span> <span class="attr">property</span>=<span class="string">&quot;grade&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_mediaType&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mediaType&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_stratTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stratTime&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_endTime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endTime&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_orderby&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderby&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_courseId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_coursePubId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;coursePubId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    每一个二级课程计划对应一个媒资信息        --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teachplanMedia&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.xuecheng.content.model.po.TeachplanMedia&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;teachplanMeidaId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;mediaFilename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mediaFilename&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;mediaId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;mediaId&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;teachplanId&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_courseId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;two_coursePubId&quot;</span> <span class="attr">property</span>=<span class="string">&quot;coursePubId&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectTreeNodes&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;treeNodeResultMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        SELECT one.id            one_id,</span><br><span class="line">               one.pname         one_pname,</span><br><span class="line">               one.parentid      one_parentid,</span><br><span class="line">               one.grade         one_grade,</span><br><span class="line">               one.media_type    one_mediaType,</span><br><span class="line">               one.start_time    one_startTime,</span><br><span class="line">               one.end_time      one_endTime,</span><br><span class="line">               one.orderby       one_orderby,</span><br><span class="line">               one.course_id     one_courseId,</span><br><span class="line">               one.course_pub_id one_coursePubId,</span><br><span class="line">               two.id            two_id,</span><br><span class="line">               two.pname         two_pname,</span><br><span class="line">               two.parentid      two_parentid,</span><br><span class="line">               two.grade         two_grade,</span><br><span class="line">               two.media_type    two_mediaType,</span><br><span class="line">               two.start_time    two_stratTime,</span><br><span class="line">               two.end_time      two_endTime,</span><br><span class="line">               two.orderby       two_orderby,</span><br><span class="line">               two.course_id     two_courseId,</span><br><span class="line">               two.course_pub_id two_coursePubId,</span><br><span class="line">               m1.media_fileName mediaFilename,</span><br><span class="line">               m1.id             teachplanMeidaId,</span><br><span class="line">               m1.media_id       mediaId</span><br><span class="line">        FROM teachplan one</span><br><span class="line">                 LEFT JOIN teachplan two ON one.id = two.parentid</span><br><span class="line">                 LEFT JOIN teachplan_media m1 on two.id = m1.teachplan_id</span><br><span class="line">        WHERE one.grade=&quot;1&quot; AND one.course_id = #&#123;courseId&#125;</span><br><span class="line">        ORDER BY one.orderby, two.orderby</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新增-修改"><a href="#新增-修改" class="headerlink" title="新增&#x2F;修改"></a>新增&#x2F;修改</h2><p>补充下关于LambdaQueryWrapper的用法：<a href="https://blog.csdn.net/qlzw1990/article/details/116996422">MyBatis-Plus LambdaQueryWrapper使用说明_mybatisplus lambdaquerywrapper-CSDN博客</a></p><p><strong>数据模型</strong></p><p>1、新增第一级课程计划</p><p>名称默认为：新章名称 [点击修改]</p><p>grade：1</p><p>orderby: 所属课程中同级别下排在最后</p><p>2、新增第二级课程计划</p><p>名称默认为：新小节名称 [点击修改]</p><p>grade：2</p><p>orderby: 所属课程计划中排在最后</p><p>3、修改第一级、第二级课程计划的名称，修改第二级课程计划是否免费</p><p>service:自己看吧何平安懒得写了，有注释的看得懂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加更新课程计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdateTeachPlan</span><span class="params">(SaveTeachplanDto dto)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是更新或者添加节点</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">teachplanId</span> <span class="operator">=</span>dto.getId();</span><br><span class="line">        <span class="keyword">if</span> (teachplanId == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//新增</span></span><br><span class="line">            <span class="type">TeachplanDto</span> <span class="variable">teachplanDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeachplanDto</span>();</span><br><span class="line">            BeanUtils.copyProperties(dto,teachplanDto);</span><br><span class="line">            <span class="comment">//确定排序字段,找到它的同级节点个数，排序字段个数加1 select count(1) from teachplan where course_id =17 and parentid = 268</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">parentid</span> <span class="operator">=</span> dto.getParentid();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">courseid</span> <span class="operator">=</span> dto.getCourseId();</span><br><span class="line">            LambdaQueryWrapper&lt;Teachplan&gt; teachplanLambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            LambdaQueryWrapper&lt;Teachplan&gt; eq = teachplanLambdaQueryWrapper.eq(Teachplan::getCourseId, courseid).eq(Teachplan::getParentid, parentid);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> teachplanMapper.selectCount(eq);</span><br><span class="line">            teachplanDto.setOrderby(count+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            teachplanMapper.insert(teachplanDto);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            <span class="type">Teachplan</span> <span class="variable">teachplan</span> <span class="operator">=</span> teachplanMapper.selectById(teachplanId);</span><br><span class="line">            BeanUtils.copyProperties(dto,teachplan);</span><br><span class="line">            teachplanMapper.updateById(teachplan);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="删除课程计划"><a href="#删除课程计划" class="headerlink" title="删除课程计划"></a>删除课程计划</h2><p>service流程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 1.查询数据库中课程计划</span><br><span class="line">* 查看是否存在不存在抛出异常</span><br><span class="line">* 2.获取课程计划的等级</span><br><span class="line">* 若为章则递归删除其子节点</span><br><span class="line">* 若为节,直接删除,查询是否有媒体信息,有则删除</span><br></pre></td></tr></table></figure><p>service总代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Teachplan</span> <span class="variable">teachplan</span> <span class="operator">=</span> teachplanMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (teachplan == <span class="literal">null</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">grade</span> <span class="operator">=</span> teachplan.getGrade();</span><br><span class="line">        <span class="keyword">if</span> (grade == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.deleteGrade2(id);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;TeachplanDto&gt; teachplanDtos =teachplanMapper.selectTreeNodes(id);</span><br><span class="line">            List&lt;TeachplanDto&gt; teachPlanTreeNodes = teachplanDtos.stream().filter(e -&gt; e.getId().equals(teachplan.getId())).collect(Collectors.toList()).get(<span class="number">0</span>).getTeachPlanTreeNodes();</span><br><span class="line">            teachplanMapper.deleteById(id);</span><br><span class="line">            teachPlanTreeNodes.forEach(e-&gt;<span class="built_in">this</span>.deleteGrade2(e.getId()));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="上下移动课程计划"><a href="#上下移动课程计划" class="headerlink" title="上下移动课程计划"></a>上下移动课程计划</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动课程计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> moveWay</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XueChengPlusException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(Long id, Boolean moveWay)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.根据id查询,若查询为空抛出异常</span></span><br><span class="line"><span class="comment">        2.根据查询得到的courseId以及grade查询到所有的计划根据moveDown选择Asc还是Desc 为True选择Desc</span></span><br><span class="line"><span class="comment">        3.通过filter进行流过滤,过滤条件是元素的order大于/小于本order ,moveDown为True时是大于,为False小于</span></span><br><span class="line"><span class="comment">        4.检查filter后收集的list是否为空empty说明无法移动抛出异常,不为空取出list尾部元素两者交换order然后更新</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*1.根据id查询,若查询为空抛出异常*/</span></span><br><span class="line">        <span class="type">Teachplan</span> <span class="variable">teachplan</span> <span class="operator">=</span> teachplanMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span> (teachplan == <span class="literal">null</span>) XueChengPlusException.cast(<span class="string">&quot;课程计划不存在&quot;</span>);</span><br><span class="line">        <span class="comment">/*2.根据查询得到的courseId以及grade查询到所有的计划根据moveDown选择Asc还是Desc 为True选择Desc*/</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">courseId</span> <span class="operator">=</span> teachplan.getCourseId();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">grade</span> <span class="operator">=</span> teachplan.getGrade();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">orderby</span> <span class="operator">=</span> teachplan.getOrderby();</span><br><span class="line">        LambdaQueryWrapper&lt;Teachplan&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper</span><br><span class="line">                .eq(Teachplan::getCourseId, courseId)</span><br><span class="line">                .eq(Teachplan::getGrade, grade);</span><br><span class="line">        <span class="keyword">if</span> (moveWay)</span><br><span class="line">            lambdaQueryWrapper.orderByDesc(Teachplan::getOrderby);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            lambdaQueryWrapper.orderByAsc(Teachplan::getOrderby);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*通过filter进行流过滤,过滤条件是元素的order大于/小于本order ,moveDown为True时是大于,为False小于 */</span></span><br><span class="line">        List&lt;Teachplan&gt; teachplanList = teachplanMapper.selectList(lambdaQueryWrapper);</span><br><span class="line">        List&lt;Teachplan&gt; teachplanList1 = teachplanList.stream().filter(e -&gt; moveWay ? e.getOrderby() &gt; orderby : e.getOrderby() &lt; orderby).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">/*检查filter后收集的list是否为空empty说明无法移动抛出异常,不为空取出list尾部元素两者交换order然后更新*/</span></span><br><span class="line">        <span class="keyword">if</span> (teachplanList1.isEmpty()) XueChengPlusException.cast(<span class="string">&quot;无法完成该操作&quot;</span>);</span><br><span class="line">        <span class="type">Teachplan</span> <span class="variable">teachplan1</span> <span class="operator">=</span> teachplanList1.get(teachplanList1.size()-<span class="number">1</span>);</span><br><span class="line">        teachplan.setOrderby(teachplan1.getOrderby());</span><br><span class="line">        teachplan1.setOrderby(orderby);</span><br><span class="line">        teachplanMapper.updateById(teachplan);</span><br><span class="line">        teachplanMapper.updateById(teachplan1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="教师管理"><a href="#教师管理" class="headerlink" title="教师管理"></a>教师管理</h2><p>进入教师设置页面后可以点击修改教师信息,或者点击新增教师信息</p><p>这两个业务共用一个接口,通过查看是否传入id来进行区分</p><ul><li>修改时如下</li></ul><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308094018791.png" alt="image-20230308094018791"></p><ul><li>新增时如下</li></ul><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308093951166.png" alt="image-20230308093951166"></p><ol><li>课程教师信息删除</li></ol><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308103041679.png" alt="image-20230308103041679"></p><p><strong>service层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xuecheng.content.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.xuecheng.base.exception.XueChengPlusException;</span><br><span class="line"><span class="keyword">import</span> com.xuecheng.content.mapper.CourseBaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.xuecheng.content.mapper.CourseTeacherMapper;</span><br><span class="line"><span class="keyword">import</span> com.xuecheng.content.model.dto.TeacherSaveOrUpdateDto;</span><br><span class="line"><span class="keyword">import</span> com.xuecheng.content.model.po.CourseTeacher;</span><br><span class="line"><span class="keyword">import</span> com.xuecheng.content.service.CourseTeacherService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CourseTeacherServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;CourseTeacherMapper, CourseTeacher&gt; <span class="keyword">implements</span> <span class="title class_">CourseTeacherService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    CourseBaseMapper courseBaseMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据课程id查询教师</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XueChengPlusException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CourseTeacher&gt; <span class="title function_">listTeacherByCourseId</span><span class="params">(Long courseId)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="keyword">if</span> (courseId == <span class="literal">null</span> || courseId&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程id不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LambdaQueryWrapper&lt;CourseTeacher&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(CourseTeacher::getCourseId,courseId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据课程id查询课程教师信息</span></span><br><span class="line">        List&lt;CourseTeacher&gt; courseTeacherList = <span class="built_in">this</span>.list(lambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span>(courseTeacherList.isEmpty()) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> courseTeacherList;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增/修改教师</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dto</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdateTeacher</span><span class="params">(TeacherSaveOrUpdateDto dto)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 判断dto中是否有id</span></span><br><span class="line"><span class="comment">        2. 有表明是修改,先查询数据看,看对应id是否存在,不存在保存,存在则更新</span></span><br><span class="line"><span class="comment">        3. 无表明是新增,直接update</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span>dto.getId();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">courseId</span> <span class="operator">=</span>dto.getCourseId();</span><br><span class="line">        <span class="comment">//创建数据库对象</span></span><br><span class="line">        <span class="type">CourseTeacher</span> <span class="variable">courseTeacher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CourseTeacher</span>();</span><br><span class="line">        BeanUtils.copyProperties(dto,courseTeacher);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//修改</span></span><br><span class="line">            LambdaQueryWrapper&lt;CourseTeacher&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">            lambdaQueryWrapper.eq(CourseTeacher::getCourseId,courseId);</span><br><span class="line">            <span class="type">CourseTeacher</span> <span class="variable">one</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(lambdaQueryWrapper);</span><br><span class="line">            <span class="keyword">if</span> (one == <span class="literal">null</span>)&#123;</span><br><span class="line">                XueChengPlusException.cast(<span class="string">&quot;教师不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.updateById(courseTeacher);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//新增</span></span><br><span class="line">            <span class="keyword">if</span> (courseBaseMapper.selectById(courseId)==<span class="literal">null</span>)</span><br><span class="line">                XueChengPlusException.cast(<span class="string">&quot;课程不存在&quot;</span>);</span><br><span class="line">            courseTeacher.setCreateDate(LocalDateTime.now());</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">this</span>.save(courseTeacher)) XueChengPlusException.cast(<span class="string">&quot;新增失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除教师id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> courseId 课程id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id       id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> XueChengPlusException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTeacher</span><span class="params">(Long courseId, Long id)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="keyword">if</span> (courseId == <span class="literal">null</span> || id == <span class="literal">null</span>)</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;id或者课程id为空&quot;</span>);</span><br><span class="line">        <span class="comment">/*查询课程id是否存在于数据库*/</span></span><br><span class="line">        <span class="keyword">if</span> (courseBaseMapper.selectById(id) == <span class="literal">null</span>)</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;课程id不合法&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LambdaQueryWrapper&lt;CourseTeacher&gt; lambdaQueryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        lambdaQueryWrapper.eq(CourseTeacher::getCourseId,courseId);</span><br><span class="line">        lambdaQueryWrapper.eq(CourseTeacher::getId,id);</span><br><span class="line">        <span class="type">CourseTeacher</span> <span class="variable">one</span> <span class="operator">=</span> <span class="built_in">this</span>.getOne(lambdaQueryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (one == <span class="literal">null</span>)</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;教师不存在&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除课程"><a href="#删除课程" class="headerlink" title="删除课程"></a>删除课程</h2><p>在课程管理界面,点击删除按钮删除课程</p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308122407546.png" alt="image-20230308122407546"></p><p><img src="https://woldier-pic-repo-1309997478.cos.ap-chengdu.myqcloud.com/image-20230308122434405.png" alt="image-20230308122434405"></p><p>service层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除课程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteCourseById</span><span class="params">(Long id)</span> <span class="keyword">throws</span> XueChengPlusException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        0.验证此课程id是否合法</span></span><br><span class="line"><span class="comment">        1.根据id删除课程教师信息</span></span><br><span class="line"><span class="comment">        2.根据courseId删除课程计划信息</span></span><br><span class="line"><span class="comment">        2.1查询课程计划信息</span></span><br><span class="line"><span class="comment">        2.2调用删除章目录的服务</span></span><br><span class="line"><span class="comment">        3.删除课程营销信息和课程基本信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*获取课程基本信息*/</span></span><br><span class="line">        <span class="type">CourseBase</span> <span class="variable">courseBase</span> <span class="operator">=</span> courseBaseMapper.selectById(id);</span><br><span class="line">        <span class="type">CourseMarket</span> <span class="variable">courseMarket</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">CourseMarket</span>();</span><br><span class="line">        BeanUtils.copyProperties(courseBase, courseMarket);</span><br><span class="line">        <span class="keyword">if</span> (courseBase == <span class="literal">null</span>)&#123;</span><br><span class="line">            XueChengPlusException.cast(<span class="string">&quot;id不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除课程教师</span></span><br><span class="line">        List&lt;CourseTeacher&gt; list = courseTeacherService.listTeacherByCourseId(id);</span><br><span class="line">        <span class="keyword">if</span> (list != <span class="literal">null</span>&amp;&amp;!list.isEmpty())&#123;</span><br><span class="line">            <span class="comment">/*list非空说明有教师数据,通过主键remove*/</span></span><br><span class="line">            list.forEach(e-&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    courseTeacherService.deleteTeacher(id, e.getId());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (XueChengPlusException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*根据courseId删除课程计划信息*/</span></span><br><span class="line">        <span class="comment">//查询课程计划信息</span></span><br><span class="line">        List&lt;TeachplanDto&gt; teachplanList = teachPlanService.findTeachplanList(id);</span><br><span class="line">        <span class="keyword">if</span> (teachplanList != <span class="literal">null</span> &amp;&amp; !teachplanList.isEmpty())&#123;</span><br><span class="line">            teachplanList.forEach(e-&gt;&#123;</span><br><span class="line">                <span class="comment">/*获取二级节点*/</span></span><br><span class="line">                List&lt;TeachplanDto&gt; teachPlanTreeNodes = e.getTeachPlanTreeNodes();</span><br><span class="line">                <span class="comment">/*若二级节点不空,遍历删除*/</span></span><br><span class="line">                <span class="keyword">if</span> (teachPlanTreeNodes != <span class="literal">null</span> &amp;&amp; !teachPlanTreeNodes.isEmpty())&#123;</span><br><span class="line">                    teachPlanTreeNodes.forEach(kid-&gt;teachPlanService.deleteGrade2(kid.getId()));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    teachPlanService.deleteTeachPlan(e.getId());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (XueChengPlusException ex) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*删除课程营销信息和课程基本信息*/</span></span><br><span class="line">        LambdaQueryWrapper&lt;CourseMarket&gt; courseMarketLambdaQueryWrapper=<span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        courseMarketLambdaQueryWrapper.eq(CourseMarket::getId,id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;201001&quot;</span>.equals(courseMarket.getCharge()))&#123;</span><br><span class="line">            courseMarketMapper.deleteById(id);</span><br><span class="line">        &#125;</span><br><span class="line">        courseBaseMapper.deleteById(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Nacos远程服务器搭建"><a href="#Nacos远程服务器搭建" class="headerlink" title="Nacos远程服务器搭建"></a>Nacos远程服务器搭建</h1><p>先拉取1.4.1的镜像并启动：</p><p>docker pull nacos&#x2F;nacos-server:1.4.1</p><p>docker run –env MODE&#x3D;standalone –name nacos -d -p 8848:8848 nacos&#x2F;nacos-server:1.4.1</p><p>进入nacos配置文件：</p><p>docker exec -it nacos bash</p><p>配置MySQL：</p><p>spring.datasource.platform&#x3D;mysql</p><p>db.num&#x3D;1</p><p>db.url.0&#x3D;jdbc:mysql:&#x2F;&#x2F;xxxxxxxx:3306&#x2F;nacos?characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true</p><p>db.user&#x3D;root</p><p>db.password&#x3D;123456</p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学成在线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop大数据基础学习笔记</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>观前提醒：先学会Linux操作系统和数据库后再来~</strong></p><h2 id="虚拟机集群配置"><a href="#虚拟机集群配置" class="headerlink" title="虚拟机集群配置"></a>虚拟机集群配置</h2><p>Linux操作系统有很多版本，这里选择的是Centos，先安装虚拟机VMware，然后再下载Centos的镜像</p><p>进去后直接新建虚拟机选择典型，然后地址就是刚刚下载的虚拟机的位置，内存分配建议它建议的一半就行（要是你电脑好当我没说），安装（时间可能有10分种左右）。登录选择“未列出的列表”，然后username输入root，密码就是刚刚创建时的密码。进去后右键桌面，选择最下面的terminal打开终端，然后输入hostnamectl set-hostname node1，意思就是将主机名设置为node1。</p><p>然后关闭虚拟机，左边任务栏右键刚刚的虚拟机选择克隆：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240120030121046-836124179.png" alt="img"></p><p> 选择克隆完整的虚拟机，就是跟这个一模一样的。然后按照上面的方法再克隆1个，接着重命名主机名分别为node2，node3</p><p><strong>配置虚拟机ip和网关</strong>：左上角编辑选择虚拟机网络编辑器，然后选择vmnet8，更改设置，将子网ip设置为192.168.88.0，NAT设置里网关设置为192.168.88.2</p><p>打开node1终端输入vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><p>改下：BOOTPROTO&#x3D;”static”</p><p>添加：</p><p>IPADDR&#x3D;”192.168.88.101”<br>NETMASK&#x3D;”255.255.255.0”<br>GATEWAY&#x3D;”192.168.88.2”<br>DNS1&#x3D;”192.168.88.2”</p><p>然后ctrl+c输入’:wq’保存并退出,输入：systemctl restart network重启网络，然后输入ifconfig查看ip网络。</p><p>node2&#x2F;node3就是将IPADDR这一行分别改为 192.168.88.102和192.168.88.103，其它的都一样</p><p><strong>改用FinalShell操作</strong></p><p>新建SSH连接，主机输入192.168.88.101….102……103,用户输入root，密码就是自己的</p><p>配置SSH免密登录：先输入ssh-keygen -t rsa -b 4096,一直回车，然后分别输入</p><p>ssh-copy-id node1</p><p>ssh-copy-id node2</p><p>ssh-copy-id node3</p><p>这样就可以在一个服务器上登录其它服务器了。</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241025224032.png"></p><p><strong>创建新用户</strong></p><p>useradd hadoop</p><p>passwd hadoop</p><p>su - hadoop</p><p>ssh-keygen -t rsa -b 4096</p><p>ssh-copy-id node1</p><p>ssh-copy-id node2</p><p>ssh-copy-id node3</p><p>三台机子都重复一遍</p><h2 id="配置Java环境"><a href="#配置Java环境" class="headerlink" title="配置Java环境"></a>配置Java环境</h2><p>下载<strong>Linux</strong>版的jdk1.8：<a href="https://pan.baidu.com/s/1PkCjWWCF9EEG6KQrC255hA?pwd=1234&_at_=1705657329156#list/path=%2Fsharelink3232509500-280701956700393%2F2024%E6%9C%80%E6%96%B0%E7%89%88%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%E5%9B%BE%2F2%E3%80%81%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A0%B8%E5%BF%83%E5%9F%BA%E7%A1%80%2F1%E3%80%81%E6%96%B0%E7%89%88Hadoop%E8%AF%BE%E7%A8%8B%2F%E8%B5%84%E6%96%99%E2%80%94Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%85%A5%E9%97%A8%2FHadoop%E8%AF%BE%E7%A8%8B%E8%B5%84%E6%96%99&parentPath=%2Fsharelink3232509500-280701956700393">2024最新版黑马程序员大数据学习路线图_免费高速下载|百度网盘-分享无限制 (baidu.com)</a>，在终端输入mkdir -p &#x2F;export&#x2F;server新建一个文件夹，再rz将刚刚下载的jdk导入，然后输入tar -zxvf jdk-8u361-linux-x64.tar.gz -C &#x2F;export&#x2F;server解压，cd &#x2F;export&#x2F;server和ls检查下解压好没，然后输入ln -s &#x2F;export&#x2F;server&#x2F;jdk1.8.0_361 jdk  配置jdk软链接;</p><p>配置环境变量：输入 vim &#x2F;etc&#x2F;profile打开环境变量，然后输入export JAVA_HOME&#x3D;&#x2F;export&#x2F;server&#x2F;jdk和export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin，保存退出；然后输入source &#x2F;etc&#x2F;profile生效环境变量，接着删除centos自带的java并将自己的java替换进入：</p><p>rm -f &#x2F;usr&#x2F;bin&#x2F;java<br>ln -s &#x2F;export&#x2F;server&#x2F;jdk&#x2F;bin&#x2F;java &#x2F;usr&#x2F;bin&#x2F;java</p><p><img src="https://img-hepingan.oss-cn-hangzhou.aliyuncs.com/page/20241025225607.png"></p><p>然后就可以输入java -version和javac -version检查java环境了。每个node都是一样的，可以先输入scp -r &#x2F;export&#x2F;server&#x2F;jdk1.8.0_361 node2:<code>pwd</code>&#x2F;将jdk复制到node2中</p><p>同样三个都要</p><h2 id="防火墙，SELinux，时区"><a href="#防火墙，SELinux，时区" class="headerlink" title="防火墙，SELinux，时区"></a>防火墙，SELinux，时区</h2><p>关闭防火墙：systemctl stop firewalld和systemctl disable firewalld(关闭开机自启)，实际开发中肯定不这么做。</p><p>设置SELinux：vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux进入将SELINUX设置为disabled</p><p>配置时区，为了防止每个服务器时间不一样：先安装ntp：yum install -y ntp</p><p>rm -f &#x2F;etc&#x2F;lcoaltime;sudo ln -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Shanghai &#x2F;etc&#x2F;localtime</p><h2 id="虚拟机-服务器部署HDFS集群"><a href="#虚拟机-服务器部署HDFS集群" class="headerlink" title="虚拟机&#x2F;服务器部署HDFS集群"></a>虚拟机&#x2F;服务器部署HDFS集群</h2><p>先下载 hadoop的官方安装包，然后先上传到node1节点的&#x2F;export&#x2F;server文件夹中并解压:tar -zxvf hadoop-3.3.4.tar.gz -C &#x2F;export&#x2F;server</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序开发学习笔记</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p>首先至少会点html,css基础知识再来学，微信开发者工具打开，创建一个js开发基础模板的项目，它的目录如下：wxml就是html，wxss就是css，app开头的就是页面进来首先加载的配置，project.config.json就是一些配置设置，就是详情的本地设置的代码。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240103222947908-1060761375.png" alt="img"></p><p><strong>推荐学习方式：根据微信官方的开发文档跟着学跟着做，根据教学视频的教学内容的路线学。</strong></p><h2 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h2><p>先介绍下view组件，就是相当于html的div盒子：</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>hover-class</td><td>string</td><td>none</td><td>否</td><td>指定按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>hover-stop-propagation</td><td>boolean</td><td>false</td><td>否</td><td>指定是否阻止本节点的祖先节点出现点击态</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>hover-start-time</td><td>number</td><td>50</td><td>否</td><td>按住后多久出现点击态，单位毫秒</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>hover-stay-time</td><td>number</td><td>400</td><td>否</td><td>手指松开后点击态保留时间，单位毫秒</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr></tbody></table><p>再来看text的一些属性：</p><ul><li>decode：特殊字符允许使用编码，比如&amp;lt就是&lt;，&amp;gt就是&gt;</li><li>user-select：允许用户复制</li><li>space(nbsp)：允许自定义空格，就是打多少个空格是多少个</li></ul><p>还有一些属性就参考微信的官方文档了。</p><p><strong>下面的组件就介绍一些基础重要的属性了</strong></p><h3 id="icon图标"><a href="#icon图标" class="headerlink" title="icon图标"></a><strong>icon图标</strong></h3><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>type</td><td>string</td><td></td><td>是</td><td>icon的类型，有效值：success, success_no_circle, info, warn, waiting, cancel, download, search, clear</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>size</td><td>number&#x2F;string</td><td>23</td><td>否</td><td>icon的大小，单位默认为px，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.4.0</a>起支持传入单位(rpx&#x2F;px)，<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.21.3</a>起支持传入其余单位(rem 等)。</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>color</td><td>string</td><td></td><td>否</td><td>icon的颜色，同css的color</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr></tbody></table><h3 id="progress进度条"><a href="#progress进度条" class="headerlink" title="progress进度条"></a>progress进度条</h3><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>percent</td><td>number</td><td></td><td>否</td><td>百分比0~100</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>show-info</td><td>boolean</td><td>false</td><td>否</td><td>在进度条右侧显示百分比</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td>border-radius</td><td>number&#x2F;string</td><td>0</td><td>否</td><td>圆角大小</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.3.1</a></td></tr></tbody></table><h3 id="相对大小rpx和物理大小px"><a href="#相对大小rpx和物理大小px" class="headerlink" title="相对大小rpx和物理大小px"></a>相对大小rpx和物理大小px</h3><p>对于不同的手机机型显示的大小，如果使用的px就是它的实际大小，意思就是无论在哪个手机上先的物理像素大小都是一样的，但是如果使用的是rpx相对大小，则会在不同机型显示相对的大小。比如ipone14宽大小为430，iponeX为375：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240104003706827-628151280.png" alt="img"></p><p>使用下面代码验证下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;width: 50px; height: 50px; background-color: red;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">&quot;width: 100rpx; height: 100rpx; background-color: black;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240104004344252-1933703713.png" alt="img"></p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240104004404222-271070896.png" alt="img"></p><p>可以看到在iponex的机型下红黑大小一样，ipone14就不一样了。</p><h2 id="视图容器"><a href="#视图容器" class="headerlink" title="视图容器"></a>视图容器</h2><h3 id="scroll-view滚动容器"><a href="#scroll-view滚动容器" class="headerlink" title="scroll-view滚动容器"></a>scroll-view滚动容器</h3><p>介绍个快捷代码，输入.xxx*8回车就会快速创建8个class名为xxx的view容器，.xxx{$}*8回车可创建8个class名为xxx的view容器且每个容器从小往大里面有1到8的数字：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 先看代码：横向滚动的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 220rpx; background-color: silver; white-space: nowrap;&quot;</span><span class="attr">scroll-x</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 竖向滚动的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 220rpx; background-color: silver;&quot;</span> <span class="attr">scroll-y</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.row</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">180</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">80</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="comment">/* display: inline-block; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 清除最后一个元素的margin-right */</span></span><br><span class="line"><span class="selector-class">.row2</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.row2</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th><th></th></tr></thead><tbody><tr><td></td><td>scroll-x</td><td>boolean</td><td>false</td><td>否</td><td>允许横向滚动</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr><tr><td></td><td>scroll-y</td><td>boolean</td><td>false</td><td>否</td><td>允许纵向滚动</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.0.0</a></td></tr></tbody></table><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="movable-area和movable-view可移动组件"><a href="#movable-area和movable-view可移动组件" class="headerlink" title="movable-area和movable-view可移动组件"></a>movable-area和movable-view可移动组件</h3><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>direction</td><td>string</td><td>none</td><td>否</td><td>movable-view的移动方向，属性值有all、vertical、horizontal、none</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td>inertia</td><td>boolean</td><td>false</td><td>否</td><td>movable-view是否带有惯性</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td>out-of-bounds</td><td>boolean</td><td>false</td><td>否</td><td>超过可移动区域后，movable-view是否还可以移动</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td>x</td><td>number&#x2F;string</td><td></td><td>否</td><td>定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画；单位支持px（默认）、rpx；</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td>y</td><td>number&#x2F;string</td><td></td><td>否</td><td>定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画；单位支持px（默认）、rpx；</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr></tbody></table><p>eg：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">movable-area</span> <span class="attr">style</span>=<span class="string">&quot;width: 400rpx; height: 400rpx; background-color: skyblue;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">movable-view</span> <span class="attr">direction</span>=<span class="string">&quot;all&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100px; height: 100px; background-color: springgreen;&quot;</span> <span class="attr">inertia</span>=<span class="string">&quot;true&quot;</span> <span class="attr">x</span>=<span class="string">&quot;20rpx&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">movable-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movable-area</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="match-media匹配媒体"><a href="#match-media匹配媒体" class="headerlink" title="match-media匹配媒体"></a>match-media匹配媒体</h3><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>min-width</td><td>number</td><td></td><td>否</td><td>页面最小宽度（ px 为单位）</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.1</a></td></tr><tr><td>max-width</td><td>number</td><td></td><td>否</td><td>页面最大宽度（ px 为单位）</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.1</a></td></tr><tr><td>width</td><td>number</td><td></td><td>否</td><td>页面宽度（ px 为单位）</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.1</a></td></tr><tr><td>min-height</td><td>number</td><td></td><td>否</td><td>页面最小高度（ px 为单位）</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.1</a></td></tr><tr><td>max-height</td><td>number</td><td></td><td>否</td><td>页面最大高度（ px 为单位）</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.11.1</a></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">match-media</span> <span class="attr">min-width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">max-width</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>当页面宽度在 300 ~ 500 px 之间时展示这里<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">match-media</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">match-media</span> <span class="attr">min-height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">orientation</span>=<span class="string">&quot;landscape&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>当页面高度不小于 400 px 且屏幕方向为纵向时展示这里<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">match-media</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="root-portal"><a href="#root-portal" class="headerlink" title="root-portal"></a>root-portal</h3><p>使整个子树从页面中脱离出来，类似于在 CSS 中使用 fixed position 的效果。主要用于制作弹窗、弹出层等。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>必填</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>enable</td><td>boolean</td><td>true</td><td>否</td><td>是否从页面中脱离出来</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.26.1</a></td></tr></tbody></table><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>—&gt;如何在pages里新建一个pages页面，里面自动生成js,json,wxml,wxss的文件，在app.json里的pages里添加”&#x2F;pages&#x2F;demo&#x2F;demo”,就可以了：</p><p>“pages”: [</p><p>  “pages&#x2F;demo&#x2F;demo”,</p><p>  “pages&#x2F;index&#x2F;index”,</p><p>  “pages&#x2F;logs&#x2F;logs”</p><p> ],</p><p>其中最后一个后面不能有逗号，第一个就是首编译页面（就是用户登录小程序的页面）</p><p>—&gt;设置小程序的窗口：</p><p>用于设置小程序的状态栏、导航条、标题、窗口背景色。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th><th>最低版本</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色，如 <code>#000000</code></td><td></td></tr><tr><td>navigationBarTextStyle</td><td>string</td><td>white</td><td>导航栏标题、状态栏颜色，仅支持 <code>black</code> &#x2F; <code>white</code></td><td></td></tr><tr><td>navigationBarTitleText</td><td>string</td><td></td><td>导航栏标题文字内容</td><td></td></tr><tr><td>navigationStyle</td><td>string</td><td>default</td><td>导航栏样式，仅支持以下值： <code>default</code> 默认样式 <code>custom</code> 自定义导航栏，只保留右上角胶囊按钮。参见注 2。</td><td>iOS&#x2F;Android 微信客户端 6.6.0，Windows 微信客户端不支持</td></tr><tr><td>homeButton</td><td>boolean</td><td>default</td><td>在非首页、非页面栈最底层页面或非tabbar内页面中的导航栏展示home键</td><td>微信客户端 8.0.24</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td><td></td></tr><tr><td>backgroundTextStyle</td><td>string</td><td>dark</td><td>下拉 loading 的样式，仅支持 <code>dark</code> &#x2F; <code>light</code></td><td></td></tr></tbody></table><p>“window”: {</p><p>  “navigationBarTextStyle”: “black”,</p><p>  “navigationStyle”: “custom”,</p><p>  “navigationBarTitleText”: “何平安的小程序学习”,</p><p>  “navigationBarBackgroundColor”: “#00B26A”</p><p> },</p><p>效果就是这样：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240104135337046-1417747824.png" alt="img"></p><p>这里补充下如果手机端里没有这个导航栏，因为没有在app.json里window的navigationStyle里设置default（默认），你肯定写的是custom（自定义）；</p><h2 id="剩余学习路线"><a href="#剩余学习路线" class="headerlink" title="剩余学习路线"></a><strong>剩余学习路线</strong></h2><p><strong>接下来就根据学习路线来根据微信官方文档来学习了：</strong></p><p>image图片组件（推荐白嫖个服务器:unicloud，阿里云，腾讯云，天翼云，华为云….好多服务器都可以白嫖下，src的地址直接用服务器的地址就好了）–&gt;navigator导航—&gt;js（就是普通的js，只是微信自动引入了它的库了）—&gt;wx:if&#x2F;elif&#x2F;else,wx:for—&gt;视图层：事件—&gt;随机事件—&gt;wx.request请求（参数比较多最好多看看）—&gt;页面配置—&gt;compoent组件—&gt;js模板中scss导入(教程：<a href="https://www.bilibili.com/video/BV19G4y1K74d?p=42&spm_id_from=pageDriver&vd_source=190aa40e29cf9c29c0ec0fe896bdef1f">5.2.在微信小程序如何使用scss编译wxss文件_哔哩哔哩_bilibili</a>)—&gt;</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>企业级微服务大项目实战《学成在线》【一】(项目环境搭建)</title>
      <link href="/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E4%B8%80%E3%80%91-%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A4%A7%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%8A%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E3%80%8B%E3%80%90%E4%B8%80%E3%80%91-%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p><strong>！！！图片已过期，移步老博客：<a href="https://www.cnblogs.com/hepingan/p/17925917.html">企业级微服务大项目实战《学成在线》【一】(项目环境搭建) - 何平安 - 博客园</a>！！！</strong></p><p>项目文档地址：<a href="https://gitee.com/woldier/xuecheng-online#%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF">黑马项目-学成在线教育平台: 以业务为基础，基于当前热门的 Spring Cloud 微服务技术栈进行设计，采用Nginx、SpringBoot、Spring Cloud、MyBatis-Plus、MQ、Redis、Elasticsearch等框架和中间件为基础进行开发，带领学员体验Java大型项目从需求分析、架构设计、编码、调试、测试的整个过程。 (gitee.com)</a></p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p><strong>先来看看项目架构图：</strong><img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231225132841326-1180810299.png" alt="img"></p><p>我们主要搞的就是微服务层和数据层。</p><p>而这个项目比较大，框架就分成了三个端：<img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231225133029683-435775938.png" alt="img"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231225153231241-1781568568.png" alt="img"></p><p>在开发这个项目前，你需要了解java,ssm,.springboot,springcloud,springcloudAlibaba,nacos,mysql,虚拟机,docker,SSH通信,ngnix,redis,rabbitMQ,CentOS,操作系统,git,gogs…以及最重要的耐心。 </p><p>ssh科普：<a href="https://zhuanlan.zhihu.com/p/323322650">【科普】SSH都不懂，还搞什么网络 - 知乎 (zhihu.com)</a></p><p>操作系统了解速通：<a href="https://blog.csdn.net/Royalic/article/details/119999404">计算机操作系统知识点总结（有这一篇就够了！！！）-CSDN博客</a></p><p>先安装好黑马的虚拟机，就是那个有8个G的文件，解压后双击cenos7 64位.vmx的文件:</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231225162645079-1017120457.png" alt="img"></p><p>选择用VMware打开，进去后选择复制，配置虚拟机ip：VMware中进入编辑-&gt;虚拟网络编译器-&gt;修改子网ip为192.168.101.0:<img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231225163238103-401624578.png" alt="img"></p><p>登录的账号&#x2F;密码：root&#x2F;centos,登录后打开终端输入systemctl start docker(启动docker)和sh &#x2F;data&#x2F;soft&#x2F;restart.sh（运行）<br>，再查询docker容器：docker ps，如果出现下面的画面就成功了：<img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231225164626519-1224960551.png" alt="img"></p><p>对了这个软件叫FinalShell，网上有教程直接搜。</p><p>剩下的就是版本控制了，黑马选用的是gogs，不怎么熟悉，我还是用的gitee。</p><h2 id="手动部署虚拟机或服务器"><a href="#手动部署虚拟机或服务器" class="headerlink" title="手动部署虚拟机或服务器"></a>手动部署虚拟机或服务器</h2><p><strong>对于电脑配置低内存不够的我来说买个云服务器自己搭建环境代替虚拟机就是个不错的选择~</strong></p><p>\1. 安装Docker 18.09.0的详细步骤</p><p>步骤1：安装依赖库</p><p>-—–</p><p>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</p><p>-—–</p><p>步骤2：添加Docker源</p><p>-—–</p><p>sudo yum-config-manager –add-repo <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a></p><p>推荐下面的阿里云加速镜像</p><p>sudo yum-config-manager –add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p>-—–</p><p>步骤3：安装Docker</p><p>-—–</p><p>sudo yum install docker-ce-18.09.0 docker-ce-cli-18.09.0 containerd.io</p><p>-—–</p><p>步骤4：启动Docker</p><p>-—–</p><p>sudo systemctl start docker</p><p>-—–</p><p>步骤5：设置Docker开机自启</p><p>-—–</p><p>sudo systemctl enable docker</p><p>-—–</p><p>\2. 在Docker中安装MySQL 8.0.26</p><p>步骤1：拉取MySQL 8的镜像文件</p><p>-—–</p><p>docker pull mysql:8.0.26</p><p>-—–</p><p>步骤2：使用Docker创建MySQL容器,创建MySQL数据存储目录并挂载到容器中</p><p>-—–</p><p>mkdir -p &#x2F;data&#x2F;mysql</p><p>-—–</p><p>docker run -p 3306:3306 –name mysql -v &#x2F;data&#x2F;mysql:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;root -d mysql:8.0.26</p><p>-—–</p><p>说明：</p><p>参数<code>-p 3306:3306</code>表示将Docker容器的3306端口映射到宿主机的3306端口。参数<code>--name mysql</code>表示给容器起个名字叫mysql，方便管理。</p><p>参数<code>-v /data/mysql:/var/lib/mysql</code>表示将宿主机的&#x2F;data&#x2F;mysql目录挂载到容器的&#x2F;var&#x2F;lib&#x2F;mysql目录上，这样可以实现数据持久化。</p><p>参数<code>-e MYSQL_ROOT_PASSWORD=root</code>表示设置MySQL的root用户的密码为root。</p><p>步骤3：进入MySQL容器执行相关操作</p><p>-—–</p><p>docker exec -it mysql bash</p><p>说明：进入容器后可以在容器内使用MySQL客户端来操作MySQL数据库。</p><p>-—–</p><p>mysql -u root -p回车</p><p>-—–</p><p>输入你的密码（我的密码是:root）</p><p>-—–</p><p>exit</p><p>说明：退出mysql窗口</p><p>-—–</p><p>exit</p><p>说明：退出mysql容器</p><p>-—–</p><p>\3. 在Docker中安装Nacos 1.4.1</p><p>步骤1：拉取Nacos 1.4.1的镜像文件</p><p>-—–</p><p>docker pull nacos&#x2F;nacos-server:1.4.1</p><p>-—–</p><p>步骤2：使用Docker创建Nacos容器，在宿主机上创建Nacos数据存储目录并挂载到容器中</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;nacos</p><p>-—–</p><p>docker run -p 8848:8848 –name nacos -v &#x2F;data&#x2F;nacos:&#x2F;home&#x2F;nacos&#x2F;nacos-server-1.4.1&#x2F;nacos-logs -d nacos&#x2F;nacos-server:1.4.1</p><p>-—–</p><p>说明：</p><p>参数<code>-p 8848:8848</code>表示将Docker容器的8848端口映射到宿主机的8848端口。</p><p>参数<code>--name nacos</code>表示给容器起个名字叫nacos，方便管理。</p><p>参数<code>-v /data/nacos:/home/nacos/nacos-server-1.4.1/nacos-logs</code>表示将宿主机的&#x2F;data&#x2F;nacos目录挂载到容器的&#x2F;home&#x2F;nacos&#x2F;nacos-server-1.4.1&#x2F;nacos-logs目录上，这样可以实现数据持久化。</p><p>步骤3：设置Nacos开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always nacos</p><p>-—–</p><p>\4. 在Docker中安装RabbitMQ 3.8.34</p><p>步骤1：拉取RabbitMQ 3.8.34的镜像文件</p><p>-—–</p><p>docker pull rabbitmq:3.8.34-management</p><p>-—–</p><p>步骤2：使用Docker创建RabbitMQ容器</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;rabbitmq</p><p>-—–</p><p>docker run -p 15672:15672 -p 5672:5672 –name rabbitmq -v &#x2F;data&#x2F;rabbitmq:&#x2F;var&#x2F;lib&#x2F;rabbitmq -d rabbitmq:3.8.34-management</p><p>-—–</p><p>说明：</p><p>参数<code>-p 15672:15672 -p 5672:5672</code>表示将Docker容器的15672和5672端口映射到宿主机的15672和5672端口。</p><p>参数<code>--name rabbitmq</code>表示给容器起个名字叫rabbitmq，方便管理。</p><p>参数<code>-v /data/rabbitmq:/var/lib/rabbitmq</code>表示将宿主机的&#x2F;data&#x2F;rabbitmq目录挂载到容器的&#x2F;var&#x2F;lib&#x2F;rabbitmq目录上，这样可以实现数据持久化。</p><p>说明：</p><p>步骤3：设置RabbitMQ开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always rabbitmq</p><p>-—–</p><p>\5. 在Docker中安装Redis 6.2.7</p><p>步骤1：拉取Redis 6.2.7的镜像文件</p><p>-—–</p><p>docker pull redis:6.2.7</p><p>-—–</p><p>步骤2：使用Docker创建Redis容器；在宿主机上创建Redis数据存储目录并挂载到容器中</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;redis</p><p>-—–</p><p>docker run -p 6379:6379 –name redis -v &#x2F;data&#x2F;redis:&#x2F;data -d redis:6.2.7 redis-server –appendonly yes</p><p>-—–</p><p>说明：</p><p>参数<code>-p 6379:6379</code>表示将Docker容器的6379端口映射到宿主机的6379端口。</p><p>参数<code>--name redis</code>表示给容器起个名字叫redis，方便管理。</p><p>参数<code>-v /data/redis:/data</code>表示将宿主机的&#x2F;data&#x2F;redis目录挂载到容器的&#x2F;data目录上，这样可以实现数据持久化。</p><p>参数<code>redis-server --appendonly yes</code>表示开启Redis的数据持久化功能。</p><p>步骤3：设置Redis开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always redis</p><p>-—–</p><p>\7. 在Docker中安装Minio RELEASE.2022-09-07</p><p>步骤1：拉取Minio RELEASE.2022-09-07的镜像文件</p><p>-—–</p><p>docker pull minio&#x2F;minio</p><p>-—–</p><p>步骤2：使用Docker创建Minio容器；在宿主机上创建Minio数据存储目录并挂载到容器中</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;minio</p><p>docker run -p 9000:9000 –name minio -v &#x2F;data&#x2F;minio:&#x2F;data -d minio&#x2F;minio server &#x2F;data</p><p>-—–</p><p>说明：参数<code>-p 9000:9000</code>表示将Docker容器的9000端口映射到宿主机的9000端口。参数<code>--name minio</code>表示给容器起个名字叫minio，方便管理。参数<code>server /data</code>表示在&#x2F;data目录下启动Minio服务。参数<code>-v /data/minio:/data</code>表示将宿主机的&#x2F;data&#x2F;minio目录挂载到容器的&#x2F;data目录上，这样可以实现数据持久化。</p><p>步骤3：设置Minio开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always minio</p><p>-—–</p><p>\8. 在Docker中安装Elasticsearch 7.12.1</p><p>步骤1：拉取Elasticsearch 7.12.1的镜像文件</p><p>-—–</p><p>docker pull elasticsearch:7.12.1</p><p>-—–</p><p>步骤2：使用Docker创建Elasticsearch容器；在宿主机上创建Elasticsearch数据存储目录并挂载到容器中</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;elasticsearch</p><p>-—–</p><p>docker run -p 9200:9200 -p 9300:9300 –name elasticsearch -v &#x2F;data&#x2F;elasticsearch:&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data -e “discovery.type&#x3D;single-node” -d elasticsearch:7.12.1</p><p>-—–</p><p>说明：</p><p>参数<code>-p 9200:9200 -p 9300:9300</code>表示将Docker容器的9200和9300端口映射到宿主机的9200和9300端口。</p><p>参数<code>--name elasticsearch</code>表示给容器起个名字叫elasticsearch，方便管理。</p><p>参数<code>-e &quot;discovery.type=single-node&quot;</code>表示设置Elasticsearch为单节点模式。</p><p>参数<code>-v /data/elasticsearch:/usr/share/elasticsearch/data</code>表示将宿主机的&#x2F;data&#x2F;elasticsearch目录挂载到容器的&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;data目录上，这样可以实现数据持久化。</p><p>步骤4：设置Elasticsearch开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always elasticsearch</p><p>-—–</p><p>\9. 在Docker中安装Kibana 7.12.1</p><p>步骤1：拉取Kibana 7.12.1的镜像文件</p><p>-—–</p><p>docker pull kibana:7.12.1</p><p>-—–</p><p>步骤2：使用Docker创建Kibana容器</p><p>-—–</p><p>docker run -p 5601:5601 –name kibana -d kibana:7.12.1</p><p>-—–</p><p>说明：参数<code>-p 5601:5601</code>表示将Docker容器的5601端口映射到宿主机的5601端口。参数<code>--name kibana</code>表示给容器起个名字叫kibana，方便管理。</p><p>步骤3：设置Kibana开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always kibana</p><p>-—–</p><p>10.在Docker中安装nginx 1.12.2的步骤如下：</p><p>步骤1. 拉取nginx:1.12.2的镜像文件；创建一个数据存储目录，比如&#x2F;data&#x2F;nginx</p><p>docker pull nginx:1.12.2</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;nginx&#x2F;conf</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;nginx&#x2F;logs</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;nginx&#x2F;html</p><p>-—–</p><p>步骤2. 启动一个nginx 1.12.2的容器并将数据存储目录挂载到容器内部的&#x2F;data目录中</p><p>docker run -d –name nginx -p 80:80 -v &#x2F;data&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -v &#x2F;data&#x2F;nginx&#x2F;conf:&#x2F;etc&#x2F;nginx -v &#x2F;data&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx -d nginx:1.12.2</p><p>步骤3. 设置应用开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always nginx</p><p>-—–</p><p>以上步骤完成后，就可以启动nginx容器并访问ip:80了。</p><p>nginx挂载目录这里有同学可能会有疑问，平时我们打包的vue文件都生成在dist中，为什么没有挂载&#x2F;data&#x2F;nginx&#x2F;dist目录呢？</p><p>因为data&#x2F;nginx&#x2F;dist 目录和 &#x2F;data&#x2F;nginx&#x2F;html 目录的作用是一样的，用于存放Nginx服务提供的静态文件。</p><p>所以你可以选择任意一个目录挂载到 Docker 容器中，而无需挂载两个目录同时使用。</p><p>在步骤1语句4仅仅挂载了 &#x2F;data&#x2F;nginx&#x2F;html 目录，这是因为在 Nginx 默认配置中，静态文件的根目录是 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html，</p><p>所以我们需要挂载主机中的 &#x2F;data&#x2F;nginx&#x2F;html 目录到容器中的 &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 目录。</p><p>如果更喜欢使用 &#x2F;data&#x2F;nginx&#x2F;dist 目录，则可以将上面命令中的 &#x2F;data&#x2F;nginx&#x2F;html 目录改为 &#x2F;data&#x2F;nginx&#x2F;dist 目录，</p><p>并将 Nginx 配置文件中的 root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html 改为 root &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;dist。</p><p> <strong>后续会导入xcplus的system包模块</strong>，里面的配置记得修改hikari的配置，就像这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hikari:</span><br><span class="line">  jdbc-url: jdbc:mysql:<span class="comment">//xx.xx.xx.xx:3306/xc_system?serverTimezone=UTC&amp;userUnicode=true&amp;useSSL=false&amp;</span></span><br><span class="line">  username: root</span><br><span class="line">  password: xxxx</span><br><span class="line">  driver-class-name: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p>——————————————————–<strong>——————————————————————————————————————————————————————————————————————————————</strong></p><p><strong>下面是minio安装步骤</strong></p><p>进入linux服务器并创建文件夹(可以自己选择一个位置，我这就直接在根目录创建了)</p><p>mkdir minio</p><p>进入创建的文件夹</p><p>cd &#x2F;minio</p><p>在线下载安装包</p><p>wget <a href="https://dl.minio.io/server/minio/release/linux-amd64/minio">https://dl.minio.io/server/minio/release/linux-amd64/minio</a></p><p>创建minio的log文件</p><p>touch minio.log</p><p>赋予minio文件夹777权限</p><p>chmod 777 minio</p><p>启动minio</p><p>.&#x2F;minio server &#x2F;minio&#x2F;data</p><p>控制台提示密码过于简单;下面进入配置文件设置你的账号密码(举例账号：zxcMinio123 密码：zxcMinio123),密码前不能有”@”符号，图片是之前的记录，“@”在application.yml中属于特殊字符需要+”@“进行转义成普通”@”符号，但转义之后我在项目用起来还是有小问题，所以就不推荐密码前有”@”符号啦！</p><p>vim &#x2F;etc&#x2F;profile</p><p>添加以下代码</p><p># set minio account</p><p>export MINIO_ROOT_USER&#x3D;zxcMinio123</p><p>export MINIO_ROOT_PASSWORD&#x3D;zxcMinio123</p><p>保存退出；</p><p>esc+:wq!</p><p>重载配置文件</p><p>source &#x2F;etc&#x2F;profile</p><p>后台启动minio</p><p>nohup &#x2F;minio&#x2F;minio server &#x2F;minio&#x2F;data –console-address “:61234” &gt; &#x2F;minio&#x2F;minio.log 2&gt;&amp;1 &amp;</p><p>说明:</p><p>这里的61234端口可以是其他的，你上面运行命令是什么端口下面访问就写什么(情况1:本地虚拟机安装记得开放对应的这个运行端口和9000端口或者你直接关闭虚拟机防火墙；情况2：云服务器安装记得安全组开放这两个端口【记得设置复杂的minio账号密码；或者限制访问的ip为你自己电脑的ip;别问为什么：因为我之前云服务器上mysql由于设置传统root账户root密码被攻击过，不过我是自己玩，没有重要数据攻击了也没事，这里给大家提个醒】)</p><p>浏览器访问输入:你的ip:9000或者ip:61234</p><p>（安装方法摘自<a href="https://cyborg2077.github.io/">cyborg2077.github.io</a>）</p><h3 id="gogs"><a href="#gogs" class="headerlink" title="gogs"></a>gogs</h3><p>教下gogs吧，用一遍就会了。端口10880</p><p><strong>对了分享个我遇到过许多次的问题就是docker启动后有些镜像端口没有开启，这时候多运行几遍sh &#x2F;data&#x2F;soft&#x2F;restart.sh 再docker ps查看就好了</strong></p><p>这里gogs账号和密码都是gogs，先确保你安装了git。</p><p>1、首先创建一个组织</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031356709-96062484.png" alt="img"></p><p>该组织通常以项目名命名，填写组织名称。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031407705-1740581808.png" alt="img"></p><p>创建成功，进入管理面板修改组织信息</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031416999-1779136832.png" alt="img"></p><p>点击编辑，填写组织名称。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031434204-1106608976.png" alt="img"></p><p>修改成功，进入首页点击组织名称</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031443930-1814661086.png" alt="img"></p><p>进入组织首页</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031453613-1911752849.png" alt="img"></p><p>下边开始创建团队</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031506260-1289332347.png" alt="img"></p><p>假如创建研发团队，填写团队名称</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031512995-810134654.png" alt="img"></p><p>选择权限等级，注意：这里即使选择了权限等级也需要在仓库管理中去管理协作者的权限。</p><p> 团队创建成功</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031517775-1980037870.png" alt="img"></p><p>团队创建成功下边开始创建成员账号 。</p><p> 首先在用户管理中添加账号分配给成员。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031532276-1049348949.png" alt="img"></p><p>然后在下边的界面 中向团队添加成员</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031539281-1294426153.png" alt="img"></p><p> 团队和组织创建完成，下边创建仓库，进入组织，创建仓库。 </p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031556258-1435248692.png" alt="img"></p><p>填写仓库信息</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031602746-1829272266.png" alt="img"></p><p>创建成功，仓库地址：<a href="http://192.168.101.65:10880/xuecheng-plus-group1/xuecheng-plus-group1.git%EF%BC%8C%E5%A6%82%E4%B8%8B">http://192.168.101.65:10880/xuecheng-plus-group1/xuecheng-plus-group1.git，如下</a></p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031616196-390511391.png" alt="img"></p><p>下边配置使用仓库的人员</p><p>点击“仓库设置”， </p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031631181-1243329335.png" alt="img"></p><p>添加协作者，将团队成员的账号添加为协作者。</p><p>添加完成注意分配权限，如下图，通常测试人员为读取权限，开发人员为读写权限。</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240123031642973-1547017187.png" alt="img"></p><p>团队Leader需要将初始代码上传至Git仓库，团队成员通过Idea克隆一份项目代码，通过此仓库进行协作开发。</p><p> 然后回到IDEA将git远程地址复制进去就行，它需要输入凭证，就输刚刚创建的用户或gogs用户</p><h2 id="课程查询接口"><a href="#课程查询接口" class="headerlink" title="课程查询接口"></a>课程查询接口</h2><p>先了解项目每个模块的内容，是干嘛的，比如content的就是主要内容，content-model就是内容的模型，base就是这个项目的基础类。对于课表查询接口就写在content模块里，先定义一个springboot的启动类和controller类，为了方便项目以后的开发，在base里model包里创建PageParams和PageResult类分别用来定义页面查询的参数类和页面结果。</p><h3 id="swagger接口文档"><a href="#swagger接口文档" class="headerlink" title="swagger接口文档"></a>swagger接口文档</h3><p>为了方便前后端分离开发之间的数据接收和传输（虽然前后端分离人不分离），文档就很重要。swagger就为我们提供了自动生成文档接口。首先导入swagger的maven坐标：（这个项目里就是xuecheng-content-api里的pom了）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot 集成 swagger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spring4all<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再在该模块的启动类上加上@EnableSwagger2Doc注解</p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学成在线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫获取校园课表(强制系统举例)</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/Python%E7%88%AC%E8%99%AB%E8%8E%B7%E5%8F%96%E6%A0%A1%E5%9B%AD%E8%AF%BE%E8%A1%A8-%E5%BC%BA%E5%88%B6%E7%B3%BB%E7%BB%9F%E4%B8%BE%E4%BE%8B/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/Python%E7%88%AC%E8%99%AB%E8%8E%B7%E5%8F%96%E6%A0%A1%E5%9B%AD%E8%AF%BE%E8%A1%A8-%E5%BC%BA%E5%88%B6%E7%B3%BB%E7%BB%9F%E4%B8%BE%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Http:超文本传输协议</p><p>Https:安全的http</p><p>首先引入request库:pip install requests </p><p>先F12打开页面检查，在network(网络)里面，然后刷新页面，会发先有个请求文档，点击并观察它：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231211134814140-1300923730.png" alt="img"></p><p>在常规里面可以看到请求地址为<a href="https://www.paisi.edu.cn:8181/jsxsd/?tdsourcetag=s_pcqq_aiomsg,%E5%B0%86%E5%AE%83%E5%A4%8D%E5%88%B6%E5%88%B0%E6%96%B0%E9%A1%B5%E9%9D%A2%E7%A1%AE%E5%AE%9Ehttps://www.paisi.edu.cn:8181/jsxsd%EF%BC%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E7%9A%84url%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B8%AA%E5%8E%BB%E6%8E%89%EF%BC%9F%E5%90%8E%E9%9D%A2%E7%9A%84%EF%BC%8C%E8%BF%98%E8%A7%82%E5%AF%9F%E5%88%B0%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%E4%B8%BAGET%E3%80%82">https://www.paisi.edu.cn:8181/jsxsd/?tdsourcetag=s_pcqq_aiomsg,将它复制到新页面确实https://www.paisi.edu.cn:8181/jsxsd，我们需要的url就是这个去掉？后面的，还观察到请求方法为GET。</a></p><p>再观察请求标头（header）,前面带 : 的和Sec开头的可以忽略这里用不到，将从Accept到Cache-Control的和Upgrade-Insecure-Requests，User-Agent的内容全部复制，然后在python里新建一个字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*,&quot;</span></span><br><span class="line">        <span class="string">&quot;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip,deflate,br&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;max-age=0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;106&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后得到url和header我们就可以去获取cookies，直接写一个获取cookies的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">ses=requests.session()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_login_cookies</span>():</span><br><span class="line">    url= <span class="string">&#x27;https://www.paisi.edu.cn:8181/jsxsd/&#x27;</span></span><br><span class="line">    ses.get(url=url,headers=headers)</span><br><span class="line">    cookies =ses.cookies.get_dict()</span><br><span class="line">    cookies = <span class="built_in">str</span>(cookies).replace(<span class="string">&quot;&#123;&quot;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&quot;:&quot;</span>, <span class="string">&#x27;=&#x27;</span>).replace(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;;&quot;</span>)</span><br><span class="line">    cookies = cookies.replace(<span class="string">&quot; &quot;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br></pre></td></tr></table></figure><p> 然后就可以去模拟登录账号了</p><p>但是登录你得先有一个账号来获取登录的信息。这里我就随便拿一个账号举例了，先在网页里面登录，然后在网络检查找到登录的文档：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231211170339152-804786044.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231211170347490-2027632748.png" alt="img"></p><p>这里需要查看负载的内容，将负载的所有内容复制并定义一个字典(注意：这里的userPassword我隐藏了，网页也隐藏了，编写的时候也要写）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;userAccount&#x27;</span>: <span class="string">&quot;2022126002&quot;</span>, <span class="comment">#学号</span></span><br><span class="line">    <span class="string">&#x27;userPassword&#x27;</span>: passoword, <span class="comment">#密码</span></span><br><span class="line">    <span class="string">&#x27;encoded&#x27;</span>: encoded, <span class="comment">#算法加密内容</span></span><br><span class="line">    <span class="string">&#x27;pwdstr1&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pwdstr2&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的网站需求都不一样</p><p>当我们再次检查请求标头的时候发现大多数跟刚刚登录网页的一样，所以直接用刚刚的请求头再加两个参数Orign和Referer就行,在定义一个方法为模拟登录账号，该方法需要携带刚刚获取的cookie参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def login(cookie):</span><br><span class="line">    url = &#x27;https://www.paisi.edu.cn:8181/jsxsd/xk/LoginToXk&#x27;</span><br><span class="line"></span><br><span class="line">    header[&quot;Origin&quot;] = &quot;https://www.paisi.edu.cn:8181&quot;</span><br><span class="line">    header[&quot;Referer&quot;]= &quot;https://www.paisi.edu.cn:8181/jsxs&quot;</span><br><span class="line">    header[&quot;Cookie&quot;]= cookie</span><br><span class="line"></span><br><span class="line">    msg = ses.post(url, headers=header, data=data, timeout=1000).text  # 这个跳转</span><br><span class="line">    # print(&quot;cookies验证:&quot;+str(msg))</span><br><span class="line">    return str(msg)</span><br></pre></td></tr></table></figure><p> 现在我们的cookie就会被认为是已经登陆了的了。</p><p>然后就是获取课表了，在网页先查询下课表，然后像刚刚那样检查页面的网络信息，点击新增的查询课表文档：<img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231211171637651-1111201247.png" alt="img"></p><p>跟刚刚的方法分析参数信息就行：(cookies为第一步登录网页获取的cookies，我只是将返回的数据定义下来了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_class</span>():</span><br><span class="line">    url=<span class="string">&quot;https://www.paisi.edu.cn:8181/jsxsd/xskb/xskb_list.do&quot;</span></span><br><span class="line">    </span><br><span class="line">    header[<span class="string">&quot;Referer&quot;</span>] = <span class="string">&quot;https://www.paisi.edu.cn:8181/jsxsd/framework/xsMain.jsp&quot;</span></span><br><span class="line">    header[<span class="string">&quot;Cookie&quot;</span>] = cookies</span><br><span class="line">    msg = ses.get(url=url,headers=header)</span><br><span class="line">    <span class="comment"># print(str(msg))</span></span><br><span class="line">    <span class="comment"># print(msg.text)</span></span><br><span class="line">    <span class="keyword">return</span> msg.text</span><br></pre></td></tr></table></figure><p> 这样就可以返回课表的html源码了。</p><p>但是如果我们想要的是课程的各项数据，可以使用BeauitifulSoup这个库。以我这个举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(text,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">all_classes = soup.findAll(<span class="string">&quot;div&quot;</span>,attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;kbcontent&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_classes:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>这里的意思就是先定义一个BeautifulSoup的参数，让他解析类型为html的，第二步则是获取html中标签为div的且class名为kbcontent的内容。运行出来就是这样：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202312/3018339-20231211172612831-9568141.png" alt="img"></p><p>还有种方法就是使用etree库也可以获取数据，这里就不介绍了。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios前后端交互实例</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/Axios%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%AE%9E%E4%BE%8B/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/Axios%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>什么是前后端联调？</strong></p><p>在我们开发的过程中，发送请求的ajax数据都不是后端返回的真数据，而是我们自己通过接口mock模拟的假数据，当前端的代码编写完成后，后端的接口也写好后，我们就需要把mock数据换点，尝试使用后端提供的数据，进行一个前后端的调试，我们会把这个过程叫做前后端接口联调。</p><p> <strong>真正的零基础都是从安装开始的AwA</strong></p><p>编译器选择IDEA：附赠激活码：<a href="https://aijihuo.cn/post/45.html">IntelliJ IDEA2023.2 破解 永久激活 最新版IDEA激活 亲测可用！ - 爱激活网 (aijihuo.cn)</a></p><p>Node.js: <a href="https://nodejs.cn/download/">下载 | Node.js 中文网 (nodejs.cn)</a>选择对应版本，安装程序除了安装地址以外其它都是默认就行</p><p>nginx：<a href="http://nginx.org/en/download.html">nginx: download</a></p><p>MySQL：<a href="https://zhuanlan.zhihu.com/p/338149747">超详细MySQL安装及基本使用教程 - 知乎 (zhihu.com)</a></p><p>先来介绍下前后端是怎么连接交互的：</p><p>一般是前端设计界面，向后端发送一些请求，而发送请求的技术选用的是Ajax，但现在流行的一般都是先转换成Json格式来交互数据的，</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p><strong>先来说说什么是Ajax</strong></p><p>异步 JavaScript 和 XML，或 <a href="https://www.semanticscholar.org/paper/Ajax%3A-A-New-Approach-to-Web-Applications-Garrett/c440ae765ff19ddd3deda24a92ac39cef9570f1e?p2df">Ajax</a> 本身不是一种技术，而是一种将一些现有技术结合起来使用的方法，包括：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">HTML</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/XHTML">XHTML</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model">DOM</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/XML">XML</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/XSLT">XSLT</a>、以及最重要的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 对象。当使用结合了这些技术的 Ajax 模型以后，网页应用能够快速地将增量更新呈现在用户界面上，而不需要重载（刷新）整个页面。这使得程序能够更快地回应用户的操作。Ajax 最吸引人的特性是它的“异步”性质，这意味着它可以与服务器通信、交换数据并更新页面，而无需刷新页面。</p><p>尽管 Ajax 中的 X 代表 XML，但是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/JSON">JSON</a> 才是首选，因为它更加轻量，而且是用 JavaScript 编写的。在 Ajax 模型中，JSON 和 XML 都被用来包装信息</p><p><strong>HTTP请求报文格式与参数</strong></p><p>行:     POST &#x2F;s?ie&#x3D;utf-8 HTTP&#x2F;1.1</p><p>头:     Host: hepingan.top</p><p>    Cookie: a&#x3D;name&#x3D;hepingan</p><p>    Content-type: application&#x2F;x-www-form-urlencoded</p><p>    User-Agent: chrome 83</p><p>空行</p><p>体   username&#x3D;admin&amp;password&#x3D;admin</p><p>上面的就是一个http请求的例子，下面就是响应报文的例子</p><p>行  HTTP&#x2F;1.1 200 OK</p><p>头  Content-Type: text&#x2F;html;charset&#x3D;utf-8</p><p>   Content-length: 2048</p><p>   Content-encoding: gzip</p><p>空行</p><p>体  <html></p><p>     ….</p><p>   </html></p><p>首先先搞后端，我用的是java 的springboot框架，创建时选择如下配置：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231018223004705-1773165267.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231018223011635-2031942681.png" alt="img"></p><p>springboot的版本尽量选低点，不然不兼容出问题。jdk版本我选的是11.</p><p>打开pom.xml并在denpendences里引入mybatis的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后将application的文件格式给成yml，并输入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/hh?useUnicode=true&amp;characterEncoding=utf-8&amp;</span></span><br></pre></td></tr></table></figure><p> <strong>password 和url的数据库名记得换成自己的！</strong>我这里写的后端端口为9090;</p><p>引入数据库：</p><p>右边选择数据库并添加数据源，选择mysql。</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231018224312725-360146685.png" alt="img"></p><p>username输入root，password就是你的密码。</p><p>然后创建一个表，mysql创建语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher</span><br><span class="line">(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) ,</span><br><span class="line">    age  <span class="type">int</span>         </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>然后再在idea自带的数据库表格编辑里添加几个数据方便测试。</p><p>然后创建下面的包：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231018225814630-1272756620.png" alt="img"></p><p>先编辑TeacherController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/teacher&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TeacherController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TeacherMapper teacherMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Teacher&gt; <span class="title function_">ListTeacher</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Teacher&gt; list = teacherMapper.ListTeacher();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Teacher <span class="title function_">getTeacher</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherMapper.getTeacher(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>大概意思就是一个&#x2F;teacher的接口里有get形式查询teacher表的请求和根据id查询的接口。</p><p>然后再在TeacherMapper里编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from teacher&quot;)</span></span><br><span class="line">    List&lt;Teacher&gt; <span class="title function_">ListTeacher</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select *from teacher where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    Teacher <span class="title function_">getTeacher</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>然后启动项目：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231018231935751-240831230.png" alt="img"></p><p>然后在浏览器输入localhost:9090&#x2F;teacher&#x2F;和localhost:9090&#x2F;teacher&#x2F;1，如果有结果就说明成功了。</p><p>接下来是前端：</p><p>直接随便创建个html文件，里面就编写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dataContainer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> dataContainer = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;dataContainer&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 请求成功，处理返回的数据</span></span></span><br><span class="line"><span class="language-javascript">      dataContainer.<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 请求失败，处理错误</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">error</span>(xhr.<span class="property">statusText</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:9090/teacher/&#x27;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">xhr.<span class="title function_">send</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>记得引入axios的依赖，使用node的指令（node安装教程：<a href="https://blog.csdn.net/qq_35156196/article/details/127579116">【精选】Node.js和Vue的安装与配置（超详细步骤）_nodejs安装vue-CSDN博客</a>或者我后面的文章：<a href="https://www.cnblogs.com/hepingan/p/17776905.html">通过node.js部署vue项目 - 何平安 - 博客园 (cnblogs.com)</a>）在当前项目下输入npm install axios或者直接在html中输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再运行浏览器打开就可以看到成果了。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>说说nginx反向代理和Kong网关</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E8%AF%B4%E8%AF%B4nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8CKong%E7%BD%91%E5%85%B3/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E8%AF%B4%E8%AF%B4nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8CKong%E7%BD%91%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>文章比较硬核哈，先来说说nginx</p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务。那什么又是反向代理呢？先看这张图：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231004025148141-1849812529.png" alt="img"></p><p>正向代理： 我们平时需要访问国外的浏览器是不是很慢，比如我们要看推特，看GitHub等等。我们直接用国内的服务器无法访问国外的服务器，或者是访问很慢。所以我们需要在本地搭建一个服务器来帮助我们去访问。那这种就是正向代理。（浏览器中配置代理服务器）</p><p>反向代理就是和正向代理相反的，ngnix代理了服务器，而不是代理了访问者的浏览器。那么它有什么优点呢？</p><p>其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好，中国大陆使用nginx网站用户有：百度、京东、新浪、网易、腾讯、淘宝等；Nginx 是高性能的 HTTP 和反向代理的web服务器，处理高并发能力是十分强大的，能经受高负 载的考验,有报告表明能支持高达 50,000 个并发连接数；Nginx支持热部署，启动简单，可以做到7*24不间断运行。几个月都不需要重新启动。</p><p><strong>nginx的负载均衡：</strong></p><p>Nginx给出来三种关于负载均衡的方式：</p><p>轮询法（默认方法）：<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。<br>适合服务器配置相当，无状态且短平快的服务使用。也适用于图片服务器集群和纯静态页面服务器集群。</p><p>weight权重模式（加权轮询）：<br>指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的<br>情况。<br>这种方式比较灵活，当后端服务器性能存在差异的时候，通过配置权重，可以让服务器的性能得到充分发挥，有效利用资源。weight和访问比率成正比，用于后端服务器性能不均的情况。权重越高，在被访问的概率越大</p><p>ip_hash：<br>上述方式存在一个问题就是说，在负载均衡系统中，假如用户在某台服务器上登录了，那么该用户第二次请求的时候，因为我们是负载均衡系统，每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的。<br>我们可以采用ip_hash指令解决这个问题，如果客户已经访问了某个服务器，当用户再次访问时，会将该请求通过哈希算法，自动定位到该服务器。每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><p><strong>Nginx的动静分离</strong></p><p>Nginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式<br>目前，通过使用Nginx大大提高了网站的响应速度，优化了用户体验，让网站的健壮性更上一层楼！<br><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231004030357413-2017559896.png" alt="img"></p><h1 id="nginx安装与配置"><a href="#nginx安装与配置" class="headerlink" title="nginx安装与配置"></a>nginx安装与配置</h1><p>下面先来安装nginx：<a href="http://nginx.org/en/download.html">nginx: download </a>里面随便选个版本下载（就最新版吧），解压后里面文件有</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231004030907152-1621322456.png" alt="img"></p><p>先来看conf配置，最重要的配置文件就是nginx.conf，而这个配置文件又可以分为三部分：全局块，events块和http块，在http块中，又包含http全局块、多个server块。每个server块中，可以包含server全局块和多个location块。在同一配置块中嵌套的配置块，各个之间不存在次序关系。</p><p>整个配置文件：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全局块</span></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#event块</span></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#http块</span></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment">#http全局块</span></span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">    <span class="comment">#server块</span></span><br><span class="line">    server &#123;</span><br><span class="line">        <span class="comment">#server全局块</span></span><br><span class="line">        <span class="keyword">listen</span>       <span class="number">8000</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        <span class="comment">#location块</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            <span class="keyword">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">        location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#这边可以有多个server块</span></span><br><span class="line">    server &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先来看最入门重要的两个配置，<strong>端口和默认页面</strong>。配置端口，里面找到</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        <span class="keyword">listen</span>       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br></pre></td></tr></table></figure><p>listen后面的就是你要代理的服务端口号，默认是80.</p><p>然后是端口号默认打开的界面：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#location块</span></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            <span class="keyword">index</span>  index.html;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>index后面的就是默认打开的页面，而文件名字等下就是在html文件夹里面的。location：定义请求的URL路径和对应的处理方式。root：指定网站根目录，即前端项目的打包输出目录。</p><p>上述配置中，监听80端口，当请求<a href="http://localtion,会将请求转发到html目录下,并返回index.html文件./">http://localtion，会将请求转发到html目录下，并返回index.html文件。</a></p><p>打包前端项目</p><p>在部署前端项目之前，需要先进行打包操作。通常情况下，前端项目使用Webpack等工具进行打包，将源代码转换为静态文件。打包后的文件一般存放在dist目录下。</p><p>部署前端项目</p><p>将打包后的前端项目文件复制到Nginx指定的网站根目录下</p><p><strong>nginx配置负载均衡</strong></p><p>负载均衡简单的说就是怕一个端口压力大会爆掉，需要多个端口来平衡。配置负载均衡的一个例子：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123;</span><br><span class="line">        server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8080</span>;</span><br><span class="line">        server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8081</span>;</span><br><span class="line">        server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8082</span>;</span><br><span class="line">    &#125;</span><br><span class="line">location / &#123;</span><br><span class="line">            proxy_pass http:<span class="regexp">//</span>backend;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里配置了三个端口，而将location的地址改成了我配的这三个</p><p>Nginx还可以作为<strong>缓存</strong>服务器，提高应用程序的性能。当应用程序处理静态资源或者动态页面时，Nginx可以将这些资源缓存起来，避免重复的计算和网络传输。</p><p>以下是一个简单的缓存配置示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name Example Domain;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://backend;</span><br><span class="line">            proxy_cache my_cache;</span><br><span class="line">            proxy_cache_valid 200 60m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述配置中，使用proxy_cache_path定义了一个名为my_cache的缓存路径，并设置缓存的过期时间为60分钟。然后在server中的location中使用proxy_cache指定使用my_cache缓存组，并使用proxy_cache_valid设置缓存的有效期。</p><p>需要注意的是，缓存的配置需要考虑到缓存的清理和更新策略，以防止缓存数据过期或者被误用的情况发生。</p><p>然后是每个块的介绍</p><p><strong>全局块</strong>是默认配置文件从开始到events块之间的一部分内容，主要设置一些影响Nginx服务器整体运行的配置指令，因此，这些指令的作用域是Nginx服务器全局。</p><p>通常包括配置运行Nginx服务器的用户（组）、允许生成的worker process数、Nginx进程PID存放路径、日志的存放路径和类型以及配置文件引入等。</p><p><strong>events</strong>块涉及的指令主要影响Nginx服务器与用户的网络连接。常用到的设置包括是否开启对多worker process下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个worker process可以同时支持的最大连接数等。</p><p>这一部分的指令对Nginx服务器的性能影响较大，在实际配置中应该根据实际情况灵活调整。</p><p><strong>http</strong>块是Nginx服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。</p><p>前面已经提到，http块中可以包含自己的全局块，也可以包含server块，server块中又可以进一步包含location块，在本书中我们使用“http全局块”来表示http中自己的全局块，即http块中不包含在server块中的部分。</p><p>可以在http全局块中配置的指令包括文件引入、MIME-Type定义、日志自定义、是否使用sendfile传输文件、连接超时时间、单连接请求数上限等。</p><p><strong>server</strong>块和“虚拟主机”的概念有密切联系。</p><p>虚拟主机，又称虚拟服务器、主机空间或是网页空间，它是一种技术。该技术是为了节省互联网服务器硬件成本而出现的。这里的“主机”或“空间”是由实体的服务器延伸而来，硬件系统可以基于服务器群，或者单个服务器等。虚拟主机技术主要应用于HTTP、FTP及EMAIL等多项服务，将一台服务器的某项或者全部服务内容逻辑划分为多个服务单位，对外表现为多个服务器，从而充分利用服务器硬件资源。从用户角度来看，一台虚拟主机和一台独立的硬件主机是完全一样的。</p><p>在使用Nginx服务器提供Web服务时，利用虚拟主机的技术就可以避免为每一个要运行的网站提供单独的Nginx服务器，也无需为每个网站对应运行一组Nginx进程。虚拟主机技术使得Nginx服务器可以在同一台服务器上只运行一组Nginx进程，就可以运行多个网站。</p><p>在前面提到过，每一个http块都可以包含多个server块，而每个server块就相当于一台虚拟主机，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务（或网站）。</p><p>和http块相同，server块也可以包含自己的全局块，同时可以包含多个location块。在server全局块中，最常见的两个配置项是本虚拟主机的监听配置和本虚拟主机的名称或IP配置。</p><p><strong>关闭Nginx</strong><br>如果使用cmd命令窗口启动nginx， 关闭cmd窗口是不能结束nginx进程的，可使用两种方法关闭nginx<br>方法一：(1)输入nginx命令 nginx -s stop(快速停止nginx) 或 nginx -s quit(完整有序的停止nginx)，这两个命令的区别在于nginx -s stop是快速停止Nginx，而nginx -s quit是有序的停止Nginx，前者可能会导致数据没有完全保存；</p><p>方法二：(2)使用taskkill taskkill &#x2F;f &#x2F;t &#x2F;im nginx.exe</p><p>注意：方法一必须要在Nginx的安装包目录下。否则无法找到Nginx。</p><p>这种方法可以直接在cmd命令面板上使用，当第一种方法无效时可以尝试使用此方法，前第一种方法适用于大部分版本的Nginx，但是个别版本的可能不实用，使用taskkill就可解决</p><p>方法三：直接打开任务管理器找到nginx直接暴力停止</p><p>参考文章：<a href="https://blog.csdn.net/hyfsbxg/article/details/122322125">Nginx详解（一文带你搞懂Nginx）-CSDN博客</a>；<a href="https://www.cnblogs.com/54chensongxia/p/12938929.html">Nginx配置文件详解 - 程序员自由之路 - 博客园 (cnblogs.com)</a></p><h1 id="Kong网关"><a href="#Kong网关" class="headerlink" title="Kong网关"></a>Kong网关</h1><p>之前如果学了java的微服务就知道什么是网关了，而且还学了gateway网关。网关，硬核点儿将就是…..：</p><p>网关(Gateway)又称网间连接器、协议转换器。网关在<strong>传输层</strong>上以实现网络互连，是最复杂的网络互连设备，仅用于两个<strong>高层协议不同的</strong>网络互连。网关的结构也和路由器类似，<strong>不同的是互连层</strong>。网关既可以用于广域网互连，也可以用于局域网互连。 网关是一种充当<strong>转换</strong>重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个<strong>翻译器</strong>。与网桥只是简单地传达信息不同，网关对收到的信息要重新打包，以适应目的系统的需求。同时，网关也可以提供<strong>过滤和安全</strong>功能。大多数网关运行在OSI 7层协议的顶层–应用层。</p><p>然后再来看Kong网关</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231004034241957-1897860684.png" alt="img"></p><p>从笔者总结数来kong的主要优势：</p><ul><li>插件市场丰富，很多插件可以降低开发成本；</li><li>可扩展性，可以编写lua脚本来定制自己的参数验证权限验证等操作；</li><li>基于openResty，openResty基于Nginx保障了强劲的性能；</li><li>便捷性能扩容，只需要水平增加服务器资源性能就能提升 ；</li><li>负载均衡健康检查</li></ul><h2 id="Docket部署kong"><a href="#Docket部署kong" class="headerlink" title="Docket部署kong"></a>Docket部署kong</h2><blockquote><p>PS：postgreSql数据库版本必须 &gt; 9.4</p></blockquote><p>因为不是通过docker-composer启动的容器需要互相访问需要在同一个网络名下才可以互相访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create kong-net</span><br></pre></td></tr></table></figure><p>数据库使用 postgres</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-database \</span><br><span class="line">               --network=kong-net \</span><br><span class="line">               -p 5432:5432 \</span><br><span class="line">               -e &quot;POSTGRES_USER=kong&quot; \</span><br><span class="line">               -e &quot;POSTGRES_DB=kong&quot; \</span><br><span class="line">               postgres:9.6</span><br></pre></td></tr></table></figure><p>准备数据库数据和配置，只需要运行一遍运行完成后会自动结束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e &quot;KONG_DATABASE=postgres&quot; \</span><br><span class="line">     -e &quot;KONG_PG_HOST=kong-database&quot; \</span><br><span class="line">     -e &quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot; \</span><br><span class="line">     kong:1.0.3 kong migrations bootstrap</span><br></pre></td></tr></table></figure><p>启动kong-service</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong \</span><br><span class="line">     --network=kong-net \</span><br><span class="line">     -e &quot;KONG_DATABASE=postgres&quot; \</span><br><span class="line">     -e &quot;KONG_PG_HOST=kong-database&quot; \</span><br><span class="line">     -e &quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot; \</span><br><span class="line">     -e &quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">     -e &quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot; \</span><br><span class="line">     -e &quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">     -e &quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot; \</span><br><span class="line">     -e &quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot; \</span><br><span class="line">     -p 8000:8000 \</span><br><span class="line">     -p 8443:8443 \</span><br><span class="line">     -p 8001:8001 \</span><br><span class="line">     -p 8444:8444 \</span><br><span class="line">     kong:1.0.3</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                                                NAMES</span><br><span class="line">d82c2b7729ae        kong:1.0.3          &quot;/docker-entrypoin...&quot;   3 seconds ago       Up 2 seconds        0.0.0.0:8000-8001-&gt;8000-8001/tcp, 0.0.0.0:8443-8444-&gt;8443-8444/tcp   kong</span><br><span class="line">9b7f5a9c808f        postgres:9.6        &quot;docker-entrypoint...&quot;   26 seconds ago      Up 25 seconds       0.0.0.0:5432-&gt;5432/tcp                                               kong-database</span><br></pre></td></tr></table></figure><p>然后调用了一下地址有输出即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i http://localhost:8001/</span><br></pre></td></tr></table></figure><h3 id="使用docker-compose部署kong"><a href="#使用docker-compose部署kong" class="headerlink" title="使用docker-compose部署kong"></a>使用docker-compose部署kong</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;2.1&#x27;</span><br><span class="line">services:</span><br><span class="line">  kong-migrations:</span><br><span class="line">    image: &quot;kong:1.0.3&quot;</span><br><span class="line">    command: kong migrations bootstrap</span><br><span class="line">    depends_on:</span><br><span class="line">      db:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    environment:</span><br><span class="line">      KONG_DATABASE: postgres</span><br><span class="line">      KONG_PG_DATABASE: kong</span><br><span class="line">      KONG_PG_HOST: db</span><br><span class="line">      KONG_PG_PASSWORD: kong</span><br><span class="line">      KONG_PG_USER: kong</span><br><span class="line">    links:</span><br><span class="line">      - db:db</span><br><span class="line">  kong:</span><br><span class="line">    image: &quot;kong:1.0.3&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      db:</span><br><span class="line">        condition: service_healthy</span><br><span class="line">    environment:</span><br><span class="line">      KONG_ADMIN_ACCESS_LOG: /dev/stdout</span><br><span class="line">      KONG_ADMIN_ERROR_LOG: /dev/stderr</span><br><span class="line">      KONG_ADMIN_LISTEN: &#x27;0.0.0.0:8001&#x27;</span><br><span class="line">      KONG_CASSANDRA_CONTACT_POINTS: db</span><br><span class="line">      KONG_DATABASE: postgres</span><br><span class="line">      KONG_PG_DATABASE: kong</span><br><span class="line">      KONG_PG_HOST: db</span><br><span class="line">      KONG_PG_PASSWORD: kong</span><br><span class="line">      KONG_PG_USER: kong</span><br><span class="line">      KONG_PROXY_ACCESS_LOG: /dev/stdout</span><br><span class="line">      KONG_PROXY_ERROR_LOG: /dev/stderr</span><br><span class="line">    links:</span><br><span class="line">      - db:db</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:8000/tcp&quot;</span><br><span class="line">      - &quot;8001:8001/tcp&quot;</span><br><span class="line">      - &quot;8443:8443/tcp&quot;</span><br><span class="line">      - &quot;8444:8444/tcp&quot;</span><br><span class="line">    restart: on-failure</span><br><span class="line">  db:</span><br><span class="line">    image: postgres:9.6</span><br><span class="line">    environment:</span><br><span class="line">      POSTGRES_DB: kong</span><br><span class="line">      POSTGRES_PASSWORD: kong</span><br><span class="line">      POSTGRES_USER: kong</span><br><span class="line">    healthcheck:</span><br><span class="line">      test: [&quot;CMD&quot;, &quot;pg_isready&quot;, &quot;-U&quot;, &quot;kong&quot;]</span><br><span class="line">      interval: 30s</span><br><span class="line">      timeout: 30s</span><br><span class="line">      retries: 3</span><br><span class="line">    restart: on-failure</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br></pre></td></tr></table></figure><p>db的 healthcheck 做了数据层初始化完成检测，数据库完成之后才会按照顺序继续启动接下来的容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/109720608">KONG网关 — 介绍安装 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud微服务学习（三）【Docker，MQ】</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/java/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0-%E4%B8%89-%E3%80%90Docker%EF%BC%8CMQ%E3%80%91/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/java/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0-%E4%B8%89-%E3%80%90Docker%EF%BC%8CMQ%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="初识Docker"><a href="#初识Docker" class="headerlink" title="初识Docker"></a>初识Docker</h2><p>项目部署的问题：<br>大型项目组件较多，运行环境也较为复杂，部署时会碰到一些问题:<br>这些服务会依赖于各种各样的应用，Node.js、Redis、RabbitMQ、MySQL等等，每一个服务的应用它们需要的依赖和函数库有差异，也有可能版本不同，所以依赖关系复杂，容易出现兼容性问题。<br>·依赖关系复杂，容易出现兼容性问题<br>·开发、测试、生产环境有差异<br><strong>Docker与虚拟机的差异：</strong></p><p>虚拟机(virtual machine)是在操作系统中模拟硬件设备，然后运行另一个操作系统，比如在Windows 系统里面运行Ubuntu系统，这样就可以运行任意的Ubuntu应用了。</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231003004355986-1232962131.png" alt="img"></p><p>Docker和虚拟机的差异:<br>· docker是一个系统进程；虚拟机是在操作系统中的操作系统；<br>· docker体积小、启动速度快、性能好；虚拟机体积大、启动速度慢、性能一般。</p><h3 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h3><p>镜像就是像照镜子一样。我们一般说的镜像是指给系统作个ghost镜像。这样可以在很短时间，很方便的还原出一个完整的系统来。镜像可以说是一种文件,比如iso,gho都属于镜像文件,镜像文件可以直接刻录到光盘中,也可以用虚拟光驱打开。</p><p>镜像(lmage) : Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像。<br>容器(Container)︰镜像中的应用程序运行后形成的进程就是容器，只是Docker会给容器做隔离，对外不可见。<br>容器想往MySQL存数据，只能先复制一份到自己的容器，在自己的容器中操作，这样就污染不了这个镜像，起到隔离的作用。将来基于镜像再创建一个容器，也是全新的里面都是空的。<br>镜像是只读的，所以跨域交给别人放心大胆的使用，也不会被感染。</p><p>DockerHub: DockerHub是一个Docker镜像的托管平台。这样的平台称为Docker Registry。（就跟github一样，github是代码的托管）<br>国内也有类似于DockerHub 的公开服务，比如网易云镜像服务、阿里云镜像库等。</p><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p>Docker是一个CS架构的程序，由两部分组成:</p><ul><li>服务端(server): Docker守护进程，负责处理Docker指令，管理镜像、容器等</li><li>客户端(client):通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令。</li></ul><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231003005556342-1077013038.png" alt="img"></p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p>没有Centos 7的先去安装：<a href="https://mirrors.aliyun.com/centos/7/isos/x86_64/">centos-7-isos-x86_64安装包下载_开源镜像站-阿里云 (aliyun.com)</a>选择这个下载：<img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231003011348510-489348507.png" alt="img"></p><p>等下要开虚拟机来安装Docker，或者你自己有服务器也可以在服务器上安装。</p><p>本地虚拟机安装Docker教程参考：<a href="https://blog.csdn.net/m0_51545690/article/details/123238360">超详细的CentOS7的下载安装配置教程_centos7下载_秃头披风侠.的博客-CSDN博客 </a> ；；<a href="https://blog.csdn.net/BThinker/article/details/123358697">Docker 安装 (完整详细版)_docker安装-CSDN博客</a></p><p>我就在自己的服务器安装了</p><p>我使用的是阿里云的服务器，我在远程连接控制面板登录后就可以根据下面的操作安装Docker了。</p><p><strong>卸载（可选）</strong></p><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载（建议都执行一遍）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>首先需要大家虚拟机联网，安装yum工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p>然后更新本地镜像源：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置docker镜像源</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>然后输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p><p><strong>启动docker</strong></p><p>Docker应用需要用到各种端口，逐一去修改防火墙设置。非常麻烦，因此建议大家直接关闭防火墙！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><p>启动docker前，一定要关闭防火墙后！！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 关闭</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"># 禁止开机启动防火墙</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure><p>通过命令启动docker：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker  # 启动docker服务</span><br><span class="line"></span><br><span class="line">systemctl stop docker  # 停止docker服务</span><br><span class="line"></span><br><span class="line">systemctl restart docker  # 重启docker服务</span><br></pre></td></tr></table></figure><p>然后输入命令，可以查看docker版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><p><strong>配置阿里云的镜像加速：</strong></p><p>针对Docker客户端版本大于 1.10.0 的用户</p><p>您可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://52xn11h1.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p> <strong>测试配置MYSQL</strong>：</p><p>启动 Docker后可以试试先来部署Mysql玩玩：在终端命令行继续输入：</p><p>docker run -d –name mysql -p 3306:3306 -e TZ&#x3D;Asia&#x2F;Shanghai -e MYSQL_ROOT_PASSWORD&#x3D;123 mysql</p><p>然后等待它下载安装，然后再打开一个Mysql的服务将主机改成虚拟机的ip地址并连接就可以看到成果。</p><p>解析下刚刚的指令：</p><p>docker run:创建并运行一个容器</p><p>-d是让容器在后台运行</p><p>–name mysql:给容器起个名字，必须唯一</p><p>-p 3306:3306：设置端口映射</p><p>-e KEY&#x3D;VALUE：设置环境变量</p><p>mysql：指定运行的镜像名字</p><h2 id="Docker镜像命令"><a href="#Docker镜像命令" class="headerlink" title="Docker镜像命令"></a>Docker镜像命令</h2><p><strong>Docker基本操作：</strong></p><ul><li>镜像操作</li><li>容器操作</li><li>数据卷(容器数据管理)</li></ul><p><strong>镜像相关命令</strong></p><ul><li>镜像名称一般分两部分组成:[repository]:[tag]<br>tag：是版本</li><li>在没有指定tag时，默认是latest，代表最新版本的镜像</li></ul><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231003160930013-248277018.png" alt="img"></p><p>一些命令操作：</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231009171659559-1758026986.png" alt="img"></h2><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231009173522011-422241716.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231009173739443-60224227.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231009173924390-2027665306.png" alt="img"></p><p><strong>测试nginx的数据卷部署</strong></p><p>先把以前部署的 nginx删除（万一安装了）：docker rm -f nginx</p><p>然后再输入docker run -d –name nginx -p 80:80 -v html:&#x2F;user&#x2F;share&#x2F;nginx&#x2F;html nginx</p><p>这里的-v就是配置nginx的html数据卷的位置</p><h2 id="DockerCompose安装"><a href="#DockerCompose安装" class="headerlink" title="DockerCompose安装"></a>DockerCompose安装</h2><p>Linux下需要通过命令下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>修改文件权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 修改权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><strong>Base自动补全命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 补全命令</span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>如果这里出现错误，需要修改自己的hosts文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;199.232.68.133 raw.githubusercontent.com&quot; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h2><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p><p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p><p><strong>简化版镜像仓库</strong></p><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry \</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><p>命令中挂载了一个数据卷registry-data到容器内的&#x2F;var&#x2F;lib&#x2F;registry 目录，这是私有镜像库存放数据的目录。</p><p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p><p><strong>带有图形化界面版本</strong></p><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.0&#x27;</span><br><span class="line">services:</span><br><span class="line">  registry:</span><br><span class="line">    image: registry</span><br><span class="line">    volumes:</span><br><span class="line">      - ./registry-data:/var/lib/registry</span><br><span class="line">  ui:</span><br><span class="line">    image: joxit/docker-registry-ui:static</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:80</span><br><span class="line">    environment:</span><br><span class="line">      - REGISTRY_TITLE=传智教育私有仓库</span><br><span class="line">      - REGISTRY_URL=http://registry:5000</span><br><span class="line">    depends_on:</span><br><span class="line">      - registry</span><br></pre></td></tr></table></figure><p><strong>配置Docker信任地址</strong></p><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 打开要修改的文件</span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"># 添加内容：</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;http://192.168.150.101:8080&quot;]</span><br><span class="line"># 重加载</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"># 重启docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="安装和认识"><a href="#安装和认识" class="headerlink" title="安装和认识"></a>安装和认识</h2><p>Docker中安装RabbitMQ 3.8.34</p><p>步骤1：拉取RabbitMQ 3.8.34的镜像文件</p><p>-—–</p><p>docker pull rabbitmq:3.8.34-management</p><p>-—–</p><p>步骤2：使用Docker创建RabbitMQ容器</p><p>-—–</p><p>mkdir &#x2F;data&#x2F;rabbitmq</p><p>-—–</p><p>docker run -p 15672:15672 -p 5672:5672 –name rabbitmq -v &#x2F;data&#x2F;rabbitmq:&#x2F;var&#x2F;lib&#x2F;rabbitmq -d rabbitmq:3.8.34-management</p><p>-—–</p><p>说明：</p><p>参数<code>-p 15672:15672 -p 5672:5672</code>表示将Docker容器的15672和5672端口映射到宿主机的15672和5672端口。</p><p>参数<code>--name rabbitmq</code>表示给容器起个名字叫rabbitmq，方便管理。</p><p>参数<code>-v /data/rabbitmq:/var/lib/rabbitmq</code>表示将宿主机的&#x2F;data&#x2F;rabbitmq目录挂载到容器的&#x2F;var&#x2F;lib&#x2F;rabbitmq目录上，这样可以实现数据持久化。</p><p>说明：</p><p>步骤3：设置RabbitMQ开机自启</p><p>-—–</p><p>docker update –restart&#x3D;always rabbitmq</p><p>-—–</p><p> 然后docker ps查看下容器内有没有，就可以打开对应端口（这里是15672，另外一个5672后面说），rabbitmq默认有个用户，账号和密码均为guest.登进去界面：</p><p><img src="https://img2024.cnblogs.com/blog/3018339/202401/3018339-20240122015516126-890191137.png" alt="img"></p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p>在Queues（队列里）找到Add a new Queue新建一个队列，随便取个名字其它的先默认。这样新建两个队列，再在Exchangs（交换机）里找到amq.fanout进去，在publish message里的Payload随便输点东西然后push，会报错提示无路由，因为mq是从用户–&gt;交换机–&gt;队列的顺序走的，该交换机和队列没有绑定，所以就在BINDING这里先绑定刚刚的hello.quesues1，然后再发送就成功了，在queues里也可以看到绑定的关系。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud微服务学习笔记（二）【Feign,Gateway】</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/java/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%90Feign-Gateway%E3%80%91/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/java/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%E3%80%90Feign-Gateway%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>先来看我们以前利用RestTemplate发起远程调用的代码：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001154734923-610310863.png" alt="img"></p><p>存在下面的问题：</p><p>•代码可读性差，编程体验不统一</p><p>•参数复杂URL难以维护</p><p>Feign是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><p>其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p><h3 id="基于feign远程调用"><a href="#基于feign远程调用" class="headerlink" title="基于feign远程调用"></a>基于feign远程调用</h3><p>先在order-service引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 OrderApplication引入自动装配的开关@EnableFeignClients</p><p>然后在 order-service里新建一个接口并编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着就可以在OrderService 里将原来的发送请求代码注释掉换成新的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 2.利用RestTemplate发送http请求，查询用户</span></span><br><span class="line"><span class="comment">//        String url= &quot;http://userservice/user/&quot;+ order.getUserId();</span></span><br><span class="line"><span class="comment">//        User user = restTemplate.getForObject(url, User.class);</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>userClient.findById(order.getUserId());</span><br></pre></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>Feign可以支持很多的自定义配置，如下表所示：   </p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>feign.Logger.Level</td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>​<br>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p><p>下面以日志为例来演示如何自定义配置。</p><p><strong>配置文件方式</strong><br>基于配置文件修改feign的日志级别可以针对单个服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure><p>也可以针对所有服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure><p>而日志的级别分为四种：</p><p>NONE：不记录任何日志信息，这是默认值。</p><p>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</p><p>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</p><p>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</p><p><strong>Java代码方式</strong><br>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要全局生效，将其放到启动类的@EnableFeignClients这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure><p>如果是局部生效，则把它放到接口对应的@FeignClient这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure><p>就是一个记录日志的方式</p><h3 id="Feign优化"><a href="#Feign优化" class="headerlink" title="Feign优化"></a>Feign优化</h3><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p><p>•URLConnection：默认实现，不支持连接池</p><p>•Apache HttpClient ：支持连接池</p><p>•OKHttp：支持连接池</p><p>因此提高Feign的性能主要手段就是使用连接池代替默认的URLConnection。</p><p>这里我们用Apache的HttpClient来演示。</p><p>1）引入依赖</p><p>在order-service的pom文件中引入Apache的HttpClient依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）配置连接池</p><p>在order-service的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><p>总结，Feign的优化：</p><p>1.日志级别尽量用basic</p><p>2.使用HttpClient或OKHttp代替URLConnection</p><p>① 引入feign-httpClient依赖</p><p>② 配置文件开启httpClient功能，设置连接池参数</p><h2 id="Gateway网关"><a href="#Gateway网关" class="headerlink" title="Gateway网关"></a>Gateway网关</h2><h3 id="为什么需要网关？"><a href="#为什么需要网关？" class="headerlink" title="为什么需要网关？"></a>为什么需要网关？</h3><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性：</strong></p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001163522841-408645751.png" alt="img"></p><p><strong>权限控制：</strong>网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡：</strong>一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流：</strong>当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在SpringCloud中网关的实现包括两种：</p><p><strong>gateway</strong></p><p><strong>zuul</strong></p><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h3 id="gateway快速入门"><a href="#gateway快速入门" class="headerlink" title="gateway快速入门"></a>gateway快速入门</h3><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><p>创建SpringBoot工程gateway，引入网关依赖<br>编写启动类<br>编写基础配置和路由规则<br>启动网关服务进行测试<br>1）创建gateway服务，引入依赖<br>创建服务：<br><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001163622745-1004728121.png" alt="img"></p><p>然后引入两个依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>里面先编写一个启动类，就是Application那个。</p><p>然后编写nacos地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span>                 <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081     # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span>            <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span>                      <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span>                <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://orderservice</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/order/**</span>        </span><br></pre></td></tr></table></figure><p> 这时去访问10010端口的&#x2F;order&#x2F;101和&#x2F;user&#x2F;1的就可以查询到就成功了。对了这里的url的名字要和自己之前写的spring:application:name的值一样哦，不然会报503错误</p><p>整个访问的流程如下：（gateway相当于一个中继器吧）</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231002165440295-1320621545.png" alt="img"></p><h3 id="断言工厂"><a href="#断言工厂" class="headerlink" title="断言工厂"></a>断言工厂</h3><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path&#x3D;&#x2F;user&#x2F;**是按照路径匹配，这个规则是由</p><p>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231002165641393-33329425.png" alt="img"></p><p>我们只需要掌握Path这种路由工程就可以了。</p><h3 id="过滤器GatewayFilter：对请求和响应进行过滤"><a href="#过滤器GatewayFilter：对请求和响应进行过滤" class="headerlink" title="过滤器GatewayFilter：对请求和响应进行过滤"></a>过滤器GatewayFilter：对请求和响应进行过滤</h3><p><strong>它和8.3.1讲述的断言工厂一样，都配置在yaml里</strong></p><p>GatewayFilter 和 8.3.1讲述的断言工厂的区别：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231002185130917-826919377.png" alt="img"></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><p>比如AddRequestHeader：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> </span><br><span class="line">        <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure><p> 然后再在userservice的Controller里的请求接口的方法里添加一个@RequestHeader的请求头</p><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> </span><br></pre></td></tr></table></figure><p>总结</p><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li>参数中是否有authorization，</li><li>authorization参数值是否为admin</li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在gateway中定义一个过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231002204136914-1584634088.png" alt="img"></p><p>排序的规则是什么呢？</p><p>每一个过滤器都必须指定一个int类型的order值，order值越小，优先级越高，执行顺序越靠前。</p><p>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</p><p>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</p><p>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</p><p>详细内容，可以查看源码：</p><p>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p><p>域名不同： <a href="http://www.taobao.com/">www.taobao.com</a> 和 <a href="http://www.taobao.org/">www.taobao.org</a> 和 <a href="http://www.jd.com/">www.jd.com</a> 和 miaosha.jd.com</p><p>域名相同，端口不同：localhost:8080和localhost8081</p><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><p>解决方案：CORS，不知道的小伙伴可以查看<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><p><strong>模拟跨域问题</strong></p><p>找到课前资料的页面文件：index.html</p><p>放入tomcat或者nginx这样的web服务器中，启动并访问。</p><p>可以在浏览器控制台看到下面的错误：</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231002205314856-2122903230.png" alt="img"></h3><p>从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p><p><strong>解决跨域问题</strong></p><p>在gateway服务的application.yml文件中，添加下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级开发项目《苍穹外卖》（二）</title>
      <link href="/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E3%80%8B%E4%B8%89/"/>
      <url>/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E3%80%8B%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h2 id="设置店铺营业状态"><a href="#设置店铺营业状态" class="headerlink" title="设置店铺营业状态"></a>设置店铺营业状态</h2><p>先去我之前写的博客“Redis数据库学习笔记”学习Redis的基本操作。</p><p>在config层下创建Redis的配置类，里面编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis对象:&#123;&#125;&quot;</span>,redisConnectionFactory);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">//设置redis工厂对象</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//设置redis序列化器</span></span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然后再在controller层里面创建shop店铺管理的类，里面编写设置店铺状态和查询店铺状态的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;店铺管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/shop&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setStaus</span><span class="params">(<span class="meta">@PathVariable</span> Integer status)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;设置店铺营业状态：&#123;&#125;&quot;</span>,status ==<span class="number">1</span> ?<span class="string">&quot;营业中&quot;</span>: <span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;SHOP_STATUS&quot;</span>,status);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">shopStatus</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(<span class="string">&quot;SHOP_STATUS&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;获取店铺营业状态：&#123;&#125;&quot;</span>,shopStatus ==<span class="number">1</span> ?<span class="string">&quot;营业中&quot;</span>: <span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(shopStatus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得在yml和的-dev yml里面配置redis的用户连接信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="接口管理分开管理端和用户端"><a href="#接口管理分开管理端和用户端" class="headerlink" title="接口管理分开管理端和用户端"></a>接口管理分开管理端和用户端</h2><p>·  在WebMvcConfiguration里面复制一个bean注解下的代码，并在new Docket下编写.groupName(“管理端接口&#x2F;用户端接口”)，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;管理端接口&quot;</span>)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.admin&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;准备生成接口文档...&quot;</span>);</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">&quot;用户端接口&quot;</span>)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller.user&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样在项目接口文档里面就可以区分开这两个端了。</p><h2 id="微信小程序开发"><a href="#微信小程序开发" class="headerlink" title="微信小程序开发"></a>微信小程序开发</h2><p>下载微信开发者工具，然后将资料里面的前端文件导入进来，输入自己的openid（openid和小程序appid和secret自己去网上搜），微信小程序开发我博客之前也写过。</p><p>将资料里面的用户端文件导入进对应server文件夹里</p><h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p>maven坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>常用注解：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230921112026071-326743100.png" alt="img"></p><p> 在苍穹外卖项目中的应用：用于缓存套餐数据，只需在启动类上加入@EnableCaching注解，在admin的SetmealController里面的删改和启动禁用上加上@CacheEvict(cacheNames &#x3D; “setmealCache”,allEntries &#x3D; true)注解，增加套餐上添加@CacheEvict(cacheNames &#x3D; “setmealCache”,key&#x3D;”#setmealDTO.categoryId”)注解。在user的SetmealController的根据id查询套餐上添加@Cacheable(cacheNames &#x3D;”setmealCache”,key&#x3D;”#categoryId”)</p><h2 id="购物车管理"><a href="#购物车管理" class="headerlink" title="购物车管理"></a>购物车管理</h2><p>后面的购物车管理就跟之前的差不多了，直接上impl的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加物品</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> shoppingCartDTO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">    <span class="comment">//判断当前加入购物车的商品是否存在</span></span><br><span class="line">    ShoppingCart shoppingCart=<span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">    BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);</span><br><span class="line">    Long userId= BaseContext.getCurrentId();</span><br><span class="line">    shoppingCart.setUserId(userId);</span><br><span class="line"></span><br><span class="line">    List&lt;ShoppingCart&gt; list =shoppingCartMapper.list(shoppingCart);</span><br><span class="line">    <span class="comment">//如果已经存在了，只需要将数量增加</span></span><br><span class="line">    <span class="keyword">if</span> (list !=<span class="literal">null</span>&amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        ShoppingCart cart=list.get(<span class="number">0</span>);</span><br><span class="line">        cart.setNumber(cart.getNumber()+<span class="number">1</span>);</span><br><span class="line">        shoppingCartMapper.updateById(cart);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//判断是为菜品还是套餐</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCart.getDishId();</span><br><span class="line">        <span class="keyword">if</span> (dishId !=<span class="literal">null</span>)&#123;</span><br><span class="line">            Dish dish=dishMapper.getById(dishId);</span><br><span class="line">            shoppingCart.setName(dish.getName());</span><br><span class="line">            shoppingCart.setImage(dish.getImage());</span><br><span class="line">            shoppingCart.setAmount(dish.getPrice());</span><br><span class="line"></span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//为套餐</span></span><br><span class="line">            Long setmealId=shoppingCart.getSetmealId();</span><br><span class="line">            Setmeal setmeal=setmealMapper.pageById(setmealId);</span><br><span class="line">            shoppingCart.setName(setmeal.getName());</span><br><span class="line">            shoppingCart.setImage(setmeal.getImage());</span><br><span class="line">            shoppingCart.setAmount(setmeal.getPrice());</span><br><span class="line"></span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        shoppingCartMapper.insert(shoppingCart);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>导入收货地址接口（AdressBook）和用户下单接口代码（Order），代码的话就自己去下载看看吧，没啥新技术。</strong></p><p>除了用户下单的 ServiceImpl的代码有点难：其他的还将就 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户下单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ordersSubmitDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> OrderSubmitVO <span class="title function_">submitOrder</span><span class="params">(OrdersSubmitDTO ordersSubmitDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//异常情况的处理（收货地址为空、购物车为空）</span></span><br><span class="line">        <span class="type">AddressBook</span> <span class="variable">addressBook</span> <span class="operator">=</span> addressBookMapper.getById(ordersSubmitDTO.getAddressBookId());</span><br><span class="line">        <span class="keyword">if</span> (addressBook == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressBookBusinessException</span>(MessageConstant.ADDRESS_BOOK_IS_NULL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询当前用户的购物车数据</span></span><br><span class="line">        List&lt;ShoppingCart&gt; shoppingCartList = shoppingCartMapper.list(shoppingCart);</span><br><span class="line">        <span class="keyword">if</span> (shoppingCartList == <span class="literal">null</span> || shoppingCartList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ShoppingCartBusinessException</span>(MessageConstant.SHOPPING_CART_IS_NULL);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造订单数据</span></span><br><span class="line">        <span class="type">Orders</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Orders</span>();</span><br><span class="line">        BeanUtils.copyProperties(ordersSubmitDTO,order);</span><br><span class="line">        order.setPhone(addressBook.getPhone());</span><br><span class="line">        order.setAddress(addressBook.getDetail());</span><br><span class="line">        order.setConsignee(addressBook.getConsignee());</span><br><span class="line">        order.setNumber(String.valueOf(System.currentTimeMillis()));</span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setStatus(Orders.PENDING_PAYMENT);</span><br><span class="line">        order.setPayStatus(Orders.UN_PAID);</span><br><span class="line">        order.setOrderTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向订单表插入1条数据</span></span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订单明细数据</span></span><br><span class="line">        List&lt;OrderDetail&gt; orderDetailList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (ShoppingCart cart : shoppingCartList) &#123;</span><br><span class="line">            <span class="type">OrderDetail</span> <span class="variable">orderDetail</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderDetail</span>();</span><br><span class="line">            BeanUtils.copyProperties(cart, orderDetail);</span><br><span class="line">            orderDetail.setOrderId(order.getId());</span><br><span class="line">            orderDetailList.add(orderDetail);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向明细表插入n条数据</span></span><br><span class="line">        orderDetailMapper.insertBatch(orderDetailList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清理购物车中的数据</span></span><br><span class="line">        shoppingCartMapper.deleteByUserId(userId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装返回结果</span></span><br><span class="line">        <span class="type">OrderSubmitVO</span> <span class="variable">orderSubmitVO</span> <span class="operator">=</span> OrderSubmitVO.builder()</span><br><span class="line">                .id(order.getId())</span><br><span class="line">                .orderNumber(order.getNumber())</span><br><span class="line">                .orderAmount(order.getAmount())</span><br><span class="line">                .orderTime(order.getOrderTime())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderSubmitVO;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里就顺便补充下@Transactional注解：</p><p>事务处理translational<br>概念：指一组原子性的操作序列，这些操作要么全部执行，要么全部不执行</p><p>特性：原子性、一致性、隔离性和持久性</p><p>应用场景：当一组操作需要同时执行时。–金融行业、电商平台、物流行业</p><p>开发流程：在需要事务管理的方法上加注解：@Transactional（）</p><p>rollbackFor属性:回滚指定类型的异常：@Transactional(rollbackFor &#x3D;<br>Exception.class)</p><p>Propagation属性 ：</p><p>事务传播：当一个事务方法被另一个事务方法调用时，这个事务方法应该如何进行事务控制。</p><p>REQUIRED – 【默认值】需要事务，有则加入，无则创建新事务</p><p>REQUIRES_NEW –总是创建新事务</p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>封面图就是内网穿透的原理图：</p><p><img src="https://pic3.zhimg.com/v2-7d80e958968f0e1463e6df3eec48921f_r.jpg" alt="img"></p><p>进入临时域名的使用网站：<a href="https://dashboard.cpolar.com/,%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AA%E8%B4%A6%E6%88%B7%E7%99%BB%E8%BF%9B%E5%8E%BB%E9%80%89%E6%8B%A9%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%B4%E6%97%B6%E5%9F%9F%E5%90%8D%EF%BC%8C%E4%B8%8B%E8%BD%BDcpolar%E7%9A%84%E5%AE%89%E8%A3%85exe%EF%BC%8C%E6%8C%89%E7%85%A7%E6%AD%A5%E9%AA%A4%E5%AE%89%E8%A3%85%E5%A5%BD%E5%B0%B1%E8%A1%8C%E3%80%82%E7%84%B6%E5%90%8E%E5%9B%9E%E5%88%B0cpolar%E7%BD%91%E7%AB%99%E9%80%89%E6%8B%A9%E9%AA%8C%E8%AF%81%EF%BC%8C%E5%A4%8D%E5%88%B6%E4%BD%A0%E7%9A%84Authtoken%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%90%E8%A1%8C%E5%88%9A%E5%88%9A%E5%AE%89%E8%A3%85%E5%A5%BD%E7%9A%84cpolar.exe%EF%BC%8C%E8%BE%93%E5%85%A5cpolar.exe">https://dashboard.cpolar.com/,注册一个账户登进去选择免费的临时域名，下载cpolar的安装exe，按照步骤安装好就行。然后回到cpolar网站选择验证，复制你的Authtoken，然后运行刚刚安装好的cpolar.exe，输入cpolar.exe</a> authtoken 【刚刚复制的】 ，再输入cpolar.exe http 8080然后回车，这时您的公网域名就创建好了，别人的电脑和手机就可以访问你的苍穹外卖了。可以输入<a href="https://xxxx/doc.html%E8%AE%BF%E9%97%AE%E4%BD%A0%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E3%80%82">https://xxxx/doc.html访问你的接口文档。</a></p><p>其他的接口就参考day9的资料吧：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230923235504713-858745844.png" alt="img"></p><h2 id="微信小程序备案上线"><a href="#微信小程序备案上线" class="headerlink" title="微信小程序备案上线"></a>微信小程序备案上线</h2><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230923233152894-1988041911.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230923233227839-5604758.png" alt="img"></p><p>剩下的催单接口和表格输出就自己去看黑马的吧~</p><p><strong>苍穹外卖，完结！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 苍穹外卖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业级开发项目《苍穹外卖》（二）</title>
      <link href="/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E3%80%8B%E4%BA%8C/"/>
      <url>/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E3%80%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="添加公共通用注解"><a href="#添加公共通用注解" class="headerlink" title="添加公共通用注解"></a>添加公共通用注解</h1><p>因为接下来的许多接口需要用到create_time,update_time数据库添加语句等，这种会增加代码的重复性，这时这时直接添加一个注释然后添加到Mapper类里面。就是利用AOP进行公共段自动填充技术</p><p> 先在server模块下创建annotation.AutoFill注解类，里面编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OperationType是一个枚举类，里面有UPDATE,INSERT</p><p>然后在在server里面创建aspect.AutoFillAspect类，里面编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    开始进行共享字段自动填充</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行共享字段自动填充...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>execution(* com.sky.mapper.<em>.</em>(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)的意思就是切入点为com.sky.mapper下的所有类的所有方法并且有AutoFill注解的。Before就是一个输出日志。</p><h1 id="菜品管理"><a href="#菜品管理" class="headerlink" title="菜品管理"></a>菜品管理</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>先在Controller层里面添加一个通用接口类：CommonController，里面编写文件上传接口，将文件上传到阿里云OSS。</p><p>配置阿里OSS直接在yml里面编写nameid和key就行，会发现编写时有提示，因为在common模块里面已经添加了AliOSSProtites的配置属性注解：@ConfigurationProperties(prefix &#x3D; “sky.alioss”)</p><p>yml：注意’：’后面有个空格</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sky:</span></span><br><span class="line">  <span class="attr">jwt:</span></span><br><span class="line">    <span class="comment"># 设置jwt签名加密时使用的秘钥</span></span><br><span class="line">    <span class="attr">admin-secret-key:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="comment"># 设置jwt过期时间</span></span><br><span class="line">    <span class="attr">admin-ttl:</span> <span class="number">7200000</span></span><br><span class="line">    <span class="comment"># 设置前端传递过来的令牌名称</span></span><br><span class="line">    <span class="attr">admin-token-name:</span> <span class="string">token</span></span><br><span class="line">  <span class="attr">alioss:</span></span><br><span class="line">    <span class="attr">access-key-id:</span> <span class="string">$&#123;sky.alioss.access-key-id&#125;</span></span><br><span class="line">    <span class="attr">access-key-secret:</span> <span class="string">$&#123;sky.alioss.access-key-secret&#125;</span></span><br><span class="line">    <span class="attr">bucket-name:</span>  <span class="string">$&#123;sky.alioss.bucket-name&#125;</span></span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">$&#123;sky.alioss.endpoint&#125;</span></span><br></pre></td></tr></table></figure><p> 这里不直接写是为了规范，隐藏key等密码。真实数据在dev-yml里面编写，因为上边写了</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">profiles:</span></span><br><span class="line"><span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>在server模块的config里面新建一个OssConfiguration的类，里面编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置AliOssUtil对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="keyword">public</span> AliOssUtil <span class="title function_">aliOssUtil</span><span class="params">(AliOssProperties aliOssProperties)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建阿里云文件上传工具类对象：&#123;&#125;&quot;</span>,aliOssProperties);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliOssUtil</span>(aliOssProperties.getEndpoint(),aliOssProperties.getAccessKeyId(),</span><br><span class="line">                aliOssProperties.getAccessKeySecret(),aliOssProperties.getBucketName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加菜品"><a href="#添加菜品" class="headerlink" title="添加菜品"></a>添加菜品</h2><p>接下来好多都是SpringMvc和MyBatis框架的内容了…</p><p>直接添加菜品和对应口味。主要是impl里面的，其他的都比较简单：口味因为可以有许多味道，所以就用List来添加，.forEach来循环添加数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增菜品和对应口味</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlaver</span><span class="params">(DishDTO dishDTO)</span> &#123;</span><br><span class="line">        Dish dish=<span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        BeanUtils.copyProperties(dishDTO,dish);</span><br><span class="line"></span><br><span class="line">        dishMapper.insert(dish);</span><br><span class="line">        <span class="comment">//获取insert语句生成的id值</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span>dish.getId();</span><br><span class="line">        <span class="comment">//向口味添加n条数据</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors =dishDTO.getFlavors();</span><br><span class="line">        <span class="comment">//确定口味数据提交进来了</span></span><br><span class="line">        <span class="keyword">if</span> (flavors !=<span class="literal">null</span> &amp;&amp; flavors.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class="line">                    dishFlavor.setDishId(dishId);</span><br><span class="line">        &#125;);</span><br><span class="line">            dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后是SQL添加语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span>&gt;</span></span><br><span class="line">        insert into dish_flavor (dish_id, name, value) VALUES</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;flavors&quot;</span> <span class="attr">item</span>=<span class="string">&quot;df&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;df.dishId&#125;),#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除菜品"><a href="#删除菜品" class="headerlink" title="删除菜品"></a>删除菜品</h2><p>首先要确定需要满足的要求，满足后才删，最后再删除关联口味数据。Controller老样子。</p><p>DishServiceImpl类里面编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteQuery</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否在启售状态</span></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            Dish dish=dishMapper.getById(id);</span><br><span class="line">            <span class="keyword">if</span> (dish.getStatus()== StatusConstant.ENABLE)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_ON_SALE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断是否被某个套餐关联了</span></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            List&lt;Long&gt; setmealIds =setmealDishMapper.getSetmealIdsByDishIds(ids);</span><br><span class="line">            <span class="keyword">if</span> (setmealIds !=<span class="literal">null</span> &amp;&amp; setmealIds.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除菜品表中的菜品数据</span></span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            dishMapper.deleteById(id);</span><br><span class="line">            <span class="comment">//删除菜品关联口味数据</span></span><br><span class="line">            dishFlavorMapper.deleteByDishId(id);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里需要新建一个Mapper，SetmealDishMapper和它的xml，用于判断菜品是否被某个套餐关联。</p><p>Mapper里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据菜品id查询套餐id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dishIds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">getSetmealIdsByDishIds</span><span class="params">(List&lt;Long&gt; dishIds)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml动态SQL查询语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getSetmealIdsByDishIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select setmeal_id from setmeal_dish where dish_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;dishIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;dishId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;dishId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h1><h2 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h2><h3 id="1-1-需求分析和设计"><a href="#1-1-需求分析和设计" class="headerlink" title="1.1 需求分析和设计"></a>1.1 需求分析和设计</h3><p>产品原型：</p><p>业务规则：</p><ul><li>套餐名称唯一</li><li>套餐必须属于某个分类</li><li>套餐必须包含菜品</li><li>名称、分类、价格、图片为必填项</li><li>添加菜品窗口需要根据分类类型来展示菜品</li><li>新增的套餐默认为停售状态</li></ul><p>接口设计（共涉及到4个接口）：</p><ul><li>根据类型查询分类（已完成）</li><li>根据分类id查询菜品</li><li>图片上传（已完成）</li><li>新增套餐</li></ul><p>数据库设计：</p><p>setmeal表为套餐表，用于存储套餐的信息。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>name</td><td>varchar(32)</td><td>套餐名称</td><td>唯一</td></tr><tr><td>category_id</td><td>bigint</td><td>分类id</td><td>逻辑外键</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>套餐价格</td><td></td></tr><tr><td>image</td><td>varchar(255)</td><td>图片路径</td><td></td></tr><tr><td>description</td><td>varchar(255)</td><td>套餐描述</td><td></td></tr><tr><td>status</td><td>int</td><td>售卖状态</td><td>1起售 0停售</td></tr><tr><td>create_time</td><td>datetime</td><td>创建时间</td><td></td></tr><tr><td>update_time</td><td>datetime</td><td>最后修改时间</td><td></td></tr><tr><td>create_user</td><td>bigint</td><td>创建人id</td><td></td></tr><tr><td>update_user</td><td>bigint</td><td>最后修改人id</td><td></td></tr></tbody></table><p>setmeal_dish表为套餐菜品关系表，用于存储套餐和菜品的关联关系。具体表结构如下：</p><table><thead><tr><th>字段名</th><th>数据类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>bigint</td><td>主键</td><td>自增</td></tr><tr><td>setmeal_id</td><td>bigint</td><td>套餐id</td><td>逻辑外键</td></tr><tr><td>dish_id</td><td>bigint</td><td>菜品id</td><td>逻辑外键</td></tr><tr><td>name</td><td>varchar(32)</td><td>菜品名称</td><td>冗余字段</td></tr><tr><td>price</td><td>decimal(10,2)</td><td>菜品单价</td><td>冗余字段</td></tr><tr><td>copies</td><td>int</td><td>菜品份数</td><td></td></tr></tbody></table><h3 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h3><h4 id="1-2-1-DishController"><a href="#1-2-1-DishController" class="headerlink" title="1.2.1 DishController"></a>1.2.1 DishController</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 根据分类id查询菜品</span><br><span class="line">     * @param categoryId</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">@GetMapping(&quot;/list&quot;)</span><br><span class="line">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span><br><span class="line">public Result&lt;List&lt;Dish&gt;&gt; list(Lo ng categoryId)&#123;</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(categoryId);</span><br><span class="line">    return Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-2-DishService"><a href="#1-2-2-DishService" class="headerlink" title="1.2.2 DishService"></a>1.2.2 DishService</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 根据分类id查询菜品</span><br><span class="line">     * @param categoryId</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">List&lt;Dish&gt; list(Long categoryId);</span><br></pre></td></tr></table></figure><h4 id="1-2-3-DishServiceImpl"><a href="#1-2-3-DishServiceImpl" class="headerlink" title="1.2.3 DishServiceImpl"></a>1.2.3 DishServiceImpl</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 根据分类id查询菜品</span><br><span class="line">     * @param categoryId</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">public List&lt;Dish&gt; list(Long categoryId) &#123;</span><br><span class="line">    Dish dish = Dish.builder()</span><br><span class="line">        .categoryId(categoryId)</span><br><span class="line">        .status(StatusConstant.ENABLE)</span><br><span class="line">        .build();</span><br><span class="line">    return dishMapper.list(dish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-4-DishMapper"><a href="#1-2-4-DishMapper" class="headerlink" title="1.2.4 DishMapper"></a>1.2.4 DishMapper</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 动态条件查询菜品</span><br><span class="line">     * @param dish</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">List&lt;Dish&gt; list(Dish dish);</span><br></pre></td></tr></table></figure><h4 id="1-2-5-DishMapper-xml"><a href="#1-2-5-DishMapper-xml" class="headerlink" title="1.2.5 DishMapper.xml"></a>1.2.5 DishMapper.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;list&quot; resultType=&quot;Dish&quot; parameterType=&quot;Dish&quot;&gt;</span><br><span class="line">    select * from dish</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;if test=&quot;name != null&quot;&gt;</span><br><span class="line">            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;categoryId != null&quot;&gt;</span><br><span class="line">            and category_id = #&#123;categoryId&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;status != null&quot;&gt;</span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">    order by create_time desc</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-6-SetmealController"><a href="#1-2-6-SetmealController" class="headerlink" title="1.2.6 SetmealController"></a>1.2.6 SetmealController</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 套餐管理</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/admin/setmeal&quot;)</span><br><span class="line">@Api(tags = &quot;套餐相关接口&quot;)</span><br><span class="line">@Slf4j</span><br><span class="line">public class SetmealController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增套餐</span><br><span class="line">     * @param setmealDTO</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping</span><br><span class="line">    @ApiOperation(&quot;新增套餐&quot;)</span><br><span class="line">    public Result save(@RequestBody SetmealDTO setmealDTO) &#123;</span><br><span class="line">        setmealService.saveWithDish(setmealDTO);</span><br><span class="line">        return Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-7-SetmealService"><a href="#1-2-7-SetmealService" class="headerlink" title="1.2.7 SetmealService"></a>1.2.7 SetmealService</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface SetmealService &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span><br><span class="line">     * @param setmealDTO</span><br><span class="line">     */</span><br><span class="line">    void saveWithDish(SetmealDTO setmealDTO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-8-SetmealServiceImpl"><a href="#1-2-8-SetmealServiceImpl" class="headerlink" title="1.2.8 SetmealServiceImpl"></a>1.2.8 SetmealServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐业务实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishMapper setmealDishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">        BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向套餐表插入数据</span></span><br><span class="line">        setmealMapper.insert(setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取生成的套餐id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmeal.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">        setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">            setmealDish.setSetmealId(setmealId);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存套餐和菜品的关联关系</span></span><br><span class="line">        setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-9-SetmealMapper"><a href="#1-2-9-SetmealMapper" class="headerlink" title="1.2.9 SetmealMapper"></a>1.2.9 SetmealMapper</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 新增套餐</span><br><span class="line">     * @param setmeal</span><br><span class="line">*/</span><br><span class="line">@AutoFill(OperationType.INSERT)</span><br><span class="line">void insert(Setmeal setmeal);</span><br></pre></td></tr></table></figure><h4 id="1-2-10-SetmealMapper-xml"><a href="#1-2-10-SetmealMapper-xml" class="headerlink" title="1.2.10 SetmealMapper.xml"></a>1.2.10 SetmealMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Setmeal&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into setmeal</span><br><span class="line">    (category_id, name, price, status, description, image, create_time, update_time, create_user, update_user)</span><br><span class="line">    values (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;status&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,</span><br><span class="line">    #&#123;createUser&#125;, #&#123;updateUser&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-11-SetmealDishMapper"><a href="#1-2-11-SetmealDishMapper" class="headerlink" title="1.2.11 SetmealDishMapper"></a>1.2.11 SetmealDishMapper</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 批量保存套餐和菜品的关联关系</span><br><span class="line">     * @param setmealDishes</span><br><span class="line">*/</span><br><span class="line">void insertBatch(List&lt;SetmealDish&gt; setmealDishes);</span><br></pre></td></tr></table></figure><h4 id="1-2-12-SetmealDishMapper-xml"><a href="#1-2-12-SetmealDishMapper-xml" class="headerlink" title="1.2.12 SetmealDishMapper.xml"></a>1.2.12 SetmealDishMapper.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insertBatch&quot; parameterType=&quot;list&quot;&gt;</span><br><span class="line">    insert into setmeal_dish</span><br><span class="line">    (setmeal_id,dish_id,name,price,copies)</span><br><span class="line">    values</span><br><span class="line">    &lt;foreach collection=&quot;setmealDishes&quot; item=&quot;sd&quot; separator=&quot;,&quot;&gt;</span><br><span class="line">        (#&#123;sd.setmealId&#125;,#&#123;sd.dishId&#125;,#&#123;sd.name&#125;,#&#123;sd.price&#125;,#&#123;sd.copies&#125;)</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3-功能测试"><a href="#1-3-功能测试" class="headerlink" title="1.3 功能测试"></a>1.3 功能测试</h3><p>略</p><h2 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h2><h3 id="2-1-需求分析和设计"><a href="#2-1-需求分析和设计" class="headerlink" title="2.1 需求分析和设计"></a>2.1 需求分析和设计</h3><p>业务规则：</p><ul><li>根据页码进行分页展示</li><li>每页展示10条数据</li><li>可以根据需要，按照套餐名称、分类、售卖状态进行查询</li></ul><h3 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h3><h4 id="2-2-1-SetmealController"><a href="#2-2-1-SetmealController" class="headerlink" title="2.2.1 SetmealController"></a>2.2.1 SetmealController</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 分页查询</span><br><span class="line">     * @param setmealPageQueryDTO</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">@GetMapping(&quot;/page&quot;)</span><br><span class="line">@ApiOperation(&quot;分页查询&quot;)</span><br><span class="line">public Result&lt;PageResult&gt; page(SetmealPageQueryDTO setmealPageQueryDTO) &#123;</span><br><span class="line">    PageResult pageResult = setmealService.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    return Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-SetmealService"><a href="#2-2-2-SetmealService" class="headerlink" title="2.2.2 SetmealService"></a>2.2.2 SetmealService</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 分页查询</span><br><span class="line">     * @param setmealPageQueryDTO</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">PageResult pageQuery(SetmealPageQueryDTO setmealPageQueryDTO);</span><br></pre></td></tr></table></figure><h4 id="2-2-3-SetmealServiceImpl"><a href="#2-2-3-SetmealServiceImpl" class="headerlink" title="2.2.3 SetmealServiceImpl"></a>2.2.3 SetmealServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> setmealPageQueryDTO.getPage();</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> setmealPageQueryDTO.getPageSize();</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-SetmealMapper"><a href="#2-2-4-SetmealMapper" class="headerlink" title="2.2.4 SetmealMapper"></a>2.2.4 SetmealMapper</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 分页查询</span><br><span class="line">     * @param setmealPageQueryDTO</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">Page&lt;SetmealVO&gt; pageQuery(SetmealPageQueryDTO setmealPageQueryDTO);</span><br></pre></td></tr></table></figure><h4 id="2-2-5-SetmealMapper-xml"><a href="#2-2-5-SetmealMapper-xml" class="headerlink" title="2.2.5 SetmealMapper.xml"></a>2.2.5 SetmealMapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">        s.*,c.name categoryName</span><br><span class="line">    from</span><br><span class="line">        setmeal s</span><br><span class="line">    left join</span><br><span class="line">        category c</span><br><span class="line">    on</span><br><span class="line">        s.category_id = c.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and s.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and s.status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and s.category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by s.create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-功能测试"><a href="#2-3-功能测试" class="headerlink" title="2.3 功能测试"></a>2.3 功能测试</h3><p>略</p><h2 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h2><h3 id="3-1-需求分析和设计"><a href="#3-1-需求分析和设计" class="headerlink" title="3.1 需求分析和设计"></a>3.1 需求分析和设计</h3><p>业务规则：</p><ul><li>可以一次删除一个套餐，也可以批量删除套餐</li><li>起售中的套餐不能删除</li></ul><h3 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h3><h4 id="3-2-1-SetmealController"><a href="#3-2-1-SetmealController" class="headerlink" title="3.2.1 SetmealController"></a>3.2.1 SetmealController</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 批量删除套餐</span><br><span class="line">     * @param ids</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">@DeleteMapping</span><br><span class="line">@ApiOperation(&quot;批量删除套餐&quot;)</span><br><span class="line">public Result delete(@RequestParam List&lt;Long&gt; ids)&#123;</span><br><span class="line">    setmealService.deleteBatch(ids);</span><br><span class="line">    return Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-SetmealService"><a href="#3-2-2-SetmealService" class="headerlink" title="3.2.2 SetmealService"></a>3.2.2 SetmealService</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 批量删除套餐</span><br><span class="line">     * @param ids</span><br><span class="line">*/</span><br><span class="line">void deleteBatch(List&lt;Long&gt; ids);</span><br></pre></td></tr></table></figure><h4 id="3-2-3-SetmealServiceImpl"><a href="#3-2-3-SetmealServiceImpl" class="headerlink" title="3.2.3 SetmealServiceImpl"></a>3.2.3 SetmealServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    ids.forEach(id -&gt; &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(StatusConstant.ENABLE == setmeal.getStatus())&#123;</span><br><span class="line">            <span class="comment">//起售中的套餐不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ids.forEach(setmealId -&gt; &#123;</span><br><span class="line">        <span class="comment">//删除套餐表中的数据</span></span><br><span class="line">        setmealMapper.deleteById(setmealId);</span><br><span class="line">        <span class="comment">//删除套餐菜品关系表中的数据</span></span><br><span class="line">        setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-4-SetmealMapper"><a href="#3-2-4-SetmealMapper" class="headerlink" title="3.2.4 SetmealMapper"></a>3.2.4 SetmealMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Setmeal <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2-5-SetmealDishMapper"><a href="#3-2-5-SetmealDishMapper" class="headerlink" title="3.2.5 SetmealDishMapper"></a>3.2.5 SetmealDishMapper</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 根据套餐id删除套餐和菜品的关联关系</span><br><span class="line">     * @param setmealId</span><br><span class="line">*/</span><br><span class="line">@Delete(&quot;delete from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span><br><span class="line">void deleteBySetmealId(Long setmealId);</span><br></pre></td></tr></table></figure><h3 id="3-3-功能测试"><a href="#3-3-功能测试" class="headerlink" title="3.3 功能测试"></a>3.3 功能测试</h3><p>略</p><h2 id="4-修改套餐"><a href="#4-修改套餐" class="headerlink" title="4. 修改套餐"></a>4. 修改套餐</h2><h3 id="4-1-需求分析和设计"><a href="#4-1-需求分析和设计" class="headerlink" title="4.1 需求分析和设计"></a>4.1 需求分析和设计</h3><p>接口设计（共涉及到5个接口）：</p><ul><li>根据id查询套餐</li><li>根据类型查询分类（已完成）</li><li>根据分类id查询菜品（已完成）</li><li>图片上传（已完成）</li><li>修改套餐</li></ul><h3 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h3><h4 id="4-2-1-SetmealController"><a href="#4-2-1-SetmealController" class="headerlink" title="4.2.1 SetmealController"></a>4.2.1 SetmealController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐，用于修改页面回显数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SetmealVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> setmealService.getByIdWithDish(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    setmealService.update(setmealDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-SetmealService"><a href="#4-2-2-SetmealService" class="headerlink" title="4.2.2 SetmealService"></a>4.2.2 SetmealService</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 根据id查询套餐和关联的菜品数据</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">*/</span><br><span class="line">SetmealVO getByIdWithDish(Long id);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">     * 修改套餐</span><br><span class="line">     * @param setmealDTO</span><br><span class="line">*/</span><br><span class="line">void update(SetmealDTO setmealDTO);</span><br></pre></td></tr></table></figure><h4 id="4-2-3-SetmealServiceImpl"><a href="#4-2-3-SetmealServiceImpl" class="headerlink" title="4.2.3 SetmealServiceImpl"></a>4.2.3 SetmealServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐和套餐菜品关系</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> SetmealVO <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getBySetmealId(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealVO);</span><br><span class="line">    setmealVO.setSetmealDishes(setmealDishes);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> setmealVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、修改套餐表，执行update</span></span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmealDTO.getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、删除套餐和菜品的关联关系，操作setmeal_dish表，执行delete</span></span><br><span class="line">    setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">    setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">        setmealDish.setSetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3、重新插入套餐和菜品的关联关系，操作setmeal_dish表，执行insert</span></span><br><span class="line">    setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-SetmealDishMapper"><a href="#4-2-4-SetmealDishMapper" class="headerlink" title="4.2.4 SetmealDishMapper"></a>4.2.4 SetmealDishMapper</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 根据套餐id查询套餐和菜品的关联关系</span><br><span class="line">    * @param setmealId</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   @Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span><br><span class="line">   List&lt;SetmealDish&gt; getBySetmealId(Long setmealId);</span><br></pre></td></tr></table></figure><h3 id="4-3-功能测试"><a href="#4-3-功能测试" class="headerlink" title="4.3 功能测试"></a>4.3 功能测试</h3><p>略</p><h2 id="5-起售停售套餐"><a href="#5-起售停售套餐" class="headerlink" title="5. 起售停售套餐"></a>5. 起售停售套餐</h2><h3 id="5-1-需求分析和设计"><a href="#5-1-需求分析和设计" class="headerlink" title="5.1 需求分析和设计"></a>5.1 需求分析和设计</h3><p>业务规则：</p><ul><li>可以对状态为起售的套餐进行停售操作，可以对状态为停售的套餐进行起售操作</li><li>起售的套餐可以展示在用户端，停售的套餐不能展示在用户端</li><li>起售套餐时，如果套餐内包含停售的菜品，则不能起</li></ul><h3 id="5-2-代码实现"><a href="#5-2-代码实现" class="headerlink" title="5.2 代码实现"></a>5.2 代码实现</h3><h4 id="5-2-1-SetmealController"><a href="#5-2-1-SetmealController" class="headerlink" title="5.2.1 SetmealController"></a>5.2.1 SetmealController</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;套餐起售停售&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">    setmealService.startOrStop(status, id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-SetmealService"><a href="#5-2-2-SetmealService" class="headerlink" title="5.2.2 SetmealService"></a>5.2.2 SetmealService</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 套餐起售、停售</span><br><span class="line">     * @param status</span><br><span class="line">     * @param id</span><br><span class="line">*/</span><br><span class="line">void startOrStop(Integer status, Long id);</span><br></pre></td></tr></table></figure><h4 id="5-2-3-SetmealServiceImpl"><a href="#5-2-3-SetmealServiceImpl" class="headerlink" title="5.2.3 SetmealServiceImpl"></a>5.2.3 SetmealServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售、停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示&quot;套餐内包含未启售菜品，无法启售&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(status == StatusConstant.ENABLE)&#123;</span><br><span class="line">        <span class="comment">//select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?</span></span><br><span class="line">        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id);</span><br><span class="line">        <span class="keyword">if</span>(dishList != <span class="literal">null</span> &amp;&amp; dishList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            dishList.forEach(dish -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(StatusConstant.DISABLE == dish.getStatus())&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> Setmeal.builder()</span><br><span class="line">        .id(id)</span><br><span class="line">        .status(status)</span><br><span class="line">        .build();</span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-DishMapper"><a href="#5-2-4-DishMapper" class="headerlink" title="5.2.4 DishMapper"></a>5.2.4 DishMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据套餐id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h3 id="5-3-功能测试"><a href="#5-3-功能测试" class="headerlink" title="5.3 功能测试"></a>5.3 功能测试</h3><p>略</p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 苍穹外卖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python调用ChatGPT接口(2023)</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/Python%E8%B0%83%E7%94%A8ChatGPT%E6%8E%A5%E5%8F%A3-2023/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/Python%E8%B0%83%E7%94%A8ChatGPT%E6%8E%A5%E5%8F%A3-2023/</url>
      
        <content type="html"><![CDATA[<p>本篇将使用 python调用chatgpt接口</p><h2 id="注册OpenAi账号"><a href="#注册OpenAi账号" class="headerlink" title="注册OpenAi账号#"></a>注册OpenAi账号<a href="https://www.cnblogs.com/hepingan/p/17683768.html#1294830445">#</a></h2><p>随便找一个魔法软件登录OpenAi。地址就算漂亮国或新加坡吧，进入OpenAi官网：<a href="https://openai.com/product">Product (openai.com)</a>，点击右上方的log in</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230907002932704-1898250926.png" alt="img"></p><p>进入后便可以注册你的 openai账号了，使用下面的Goodgle账号登录，再注册一个谷歌账号，然后按要求写就行。</p><p><strong>注意最重要的来了！</strong></p><p>电话号码由于国内的号码openai不支持，这时就需要使用外网的虚拟电话号进行接收短信验证码了。使用SMS网站：<a href="https://sms-activate.org/cn">SMS-Activate是在线接受短信的虚拟号码服务</a>，然后在左边的侧边栏里的搜索框输入openai，再选着一个号码，我选的是印度尼西亚的，只需要10p（0.1美元），但是初始是没有钱的，先注册登录这个网站，然后右上方账户下面有个加号，这里就是充值的地方。<img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230907003552244-163135568.png" alt="img"></p><p> 最新的SMS仅支持最低充值2美元，也就是14RMB的样子，准备好钱钱哦~，里面的支付方式比较熟悉的有支付宝。</p><p>充值完成后购买一个外网的号码，这时会自动给你跳转到接收短信的页面。</p><p>返回刚刚的Openai官网登录界面，这时将过程中不支持国内的号码改成刚刚买的外网号码就可以了。</p><h2 id="获取OpenAi密钥（key）"><a href="#获取OpenAi密钥（key）" class="headerlink" title="获取OpenAi密钥（key）#"></a>获取OpenAi密钥（key）<a href="https://www.cnblogs.com/hepingan/p/17683768.html#3965658026">#</a></h2><p>登录openai后会出现下面的界面，选择API即可</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230907004436220-1043641621.png" alt="img"></p><p>然后再点击右上角头像选择查看API key：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230907004720758-1498191959.png" alt="img"></p><p>然后再点击Create new sercet key就可以查看你的key了</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230907005353446-1374399849.png" alt="img"></p><h2 id="在Python中实现chatgpt对话窗"><a href="#在Python中实现chatgpt对话窗" class="headerlink" title="在Python中实现chatgpt对话窗#"></a>在Python中实现chatgpt对话窗<a href="https://www.cnblogs.com/hepingan/p/17683768.html#1463771214">#</a></h2><p>直接复制下面的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 用于存储API返回的上下文</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">gpt</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">self,messages</span>):</span><br><span class="line">        <span class="comment"># 设置代理服务器的地址和端口</span></span><br><span class="line">        proxies = &#123;</span><br><span class="line">            <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:7890&quot;</span>,</span><br><span class="line">            <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://127.0.0.1:7890&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># ChatGPT API的URL</span></span><br><span class="line">        url = <span class="string">&quot;https://api.openai.com/v1/chat/completions&quot;</span></span><br><span class="line">        <span class="comment"># ChatGPT API的访问密钥</span></span><br><span class="line">        api_key = <span class="string">&quot;【在这输入 ChatGPT API的访问密钥】&quot;</span></span><br><span class="line">        <span class="comment"># 请求参数</span></span><br><span class="line">        parameters = &#123;</span><br><span class="line">                      <span class="string">&quot;model&quot;</span>: <span class="string">&quot;gpt-3.5-turbo-0301&quot;</span>, <span class="comment">#gpt-3.5-turbo-0301</span></span><br><span class="line">                      <span class="string">&quot;messages&quot;</span>:messages<span class="comment"># [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: context&#125;]</span></span><br><span class="line">                    &#125;</span><br><span class="line">        <span class="comment"># 请求头</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 发送请求</span></span><br><span class="line">        response = requests.post(url, headers=headers, json=parameters, proxies=proxies)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 解析响应</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            data = response.json()</span><br><span class="line">            text = data[<span class="string">&quot;choices&quot;</span>][<span class="number">0</span>][<span class="string">&quot;message&quot;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> text</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(response)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Sorry, something went wrong.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_conversation</span>(<span class="params">self,messages</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome to ChatGPT! How can I help you today?&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 进入对话循环</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 获取用户输入</span></span><br><span class="line">            user_input = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">            user_message=&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;</span><br><span class="line">            <span class="comment"># 将用户输入添加到messages中</span></span><br><span class="line">            messages.append(user_message)</span><br><span class="line">            <span class="comment"># 发送API请求</span></span><br><span class="line">            response = self.send_request(messages)</span><br><span class="line">            <span class="comment"># 输出API返回内容</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ChatBot：&quot;</span>,response[<span class="string">&quot;content&quot;</span>])</span><br><span class="line">            </span><br><span class="line">            <span class="comment">#将API接口返回的内容添加至messages，以用作多轮对话</span></span><br><span class="line">            messages.append(response)</span><br><span class="line">            <span class="comment"># 如果API返回的内容包含&quot;goodbye&quot;，则结束对话循环</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;goodbye&quot;</span> <span class="keyword">in</span> user_input:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Goodbye!&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个助手&quot;</span>&#125;] <span class="comment">#初始化prompt</span></span><br><span class="line">    gpt().start_conversation(messages)</span><br></pre></td></tr></table></figure><p>记得修改你的openai key</p><p><strong>查看你的剩余额度：</strong></p><p> <img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230907005649289-456792170.png" alt="img"></p><p>返回刚刚的openai网站，点击这个Upgrade就可以查看了。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据库学习</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/Redis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Redis 数据库的存储格式就有点像Map集合，有key-value，一个key指向一个value。</p><p>Redis 在 Java Web 主要有两个应用场景：</p><ul><li>存储 缓存 用的数据；</li><li>需要高速读&#x2F;写的场合使用它快速读&#x2F;写；</li></ul><h2 id="下载和安装"><a href="#下载和安装" class="headerlink" title="下载和安装"></a>下载和安装</h2><p>链接: <a href="https://pan.baidu.com/s/174vGmyAcUwaIvl4FgXRfnA?pwd=1234">https://pan.baidu.com/s/174vGmyAcUwaIvl4FgXRfnA?pwd=1234</a> 提取码: 1234 </p><p>解压后文件夹的内容：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230906133134044-61353266.png" alt="img"></p><p>然后在当前目录下运行cmd，并输入redis-server.conf redis-windows.conf,就会出现下面的画面</p><p> <img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230906133857648-1743803675.png" alt="img"></p><p>结束redis服务按下 快捷键ctrl+c</p><p>**连接redis:**在当前目录再运行一个cmd命令窗，并输入redis-cli.exe -h localhost -p 6379,意思就在在当前计算机ip下运行端口号为6379的redis服务。</p><p><strong>更改redis连接密码：</strong>此时的redis连接是不需要密码的，这时就需要进入redis.windows.conf文件配置密码，在第443行将requirepass foobared注释去掉并将foobared更改为您的密码。</p><p>这时再去连接就会出现下面的错误：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230906140550277-210793071.png" alt="img"></p><p>或者另一种方式设置密码：</p><p><a href="https://blog.csdn.net/u014026084/article/details/105767907">Redis连接报错：ERR Client sent AUTH, but no password is set_rediscommandexecutionexception: err client sent au_锦书难托的博客-CSDN博客</a></p><p>这时再ctrl+c退出再输入redis-cli.exe -h localhost -p 6379 -a 密码。这时就可以了。</p><h3 id="使用图形化管理器运行连接redis"><a href="#使用图形化管理器运行连接redis" class="headerlink" title="使用图形化管理器运行连接redis"></a>使用图形化管理器运行连接redis</h3><p>下载：链接: <a href="https://pan.baidu.com/s/1FTxH7lmsJy2mB8BR4_IqSw?pwd=1234">https://pan.baidu.com/s/1FTxH7lmsJy2mB8BR4_IqSw?pwd&#x3D;1234</a> 提取码: 1234 ，然后点击左上角的新建连接。地址输入localhost，密码就是你的密码。</p><h2 id="Redis常用数据类型"><a href="#Redis常用数据类型" class="headerlink" title="Redis常用数据类型"></a>Redis常用数据类型</h2><p>基础的5种value：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230906141811057-297994851.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230906141947966-1777001366.png" alt="img"></p><h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><p> 在Another Redis Desktop Manager图形化操作软件里面操作redis：新建连接：地址输入localhost，密码就是你的redis密码，然后是名字，记得先开启redis服务。然后点击redis console，就可以输入命令了。</p><h4 id="字符串命令"><a href="#字符串命令" class="headerlink" title="字符串命令"></a>字符串命令</h4><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917114046484-1098819874.png" alt="img"></p><h4 id="哈希命令"><a href="#哈希命令" class="headerlink" title="哈希命令"></a>哈希命令</h4><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917114005858-1604787660.png" alt="img"></p><h4 id="列表命令"><a href="#列表命令" class="headerlink" title="列表命令"></a>列表命令</h4><p>有序</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917115957619-1141054209.png" alt="img"></p><h4 id="集合命令"><a href="#集合命令" class="headerlink" title="集合命令"></a>集合命令</h4><p>无序</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917132323881-971699888.png" alt="img"></p><h4 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h4><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917132551134-2115034583.png" alt="img"></p><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917133240357-1983959648.png" alt="img"></p><p>keys *：查看所有key；</p><p>keys 10*：查看名字包含10的所有key</p><h2 id="Java中操作Redis"><a href="#Java中操作Redis" class="headerlink" title="Java中操作Redis"></a>Java中操作Redis</h2><p>使用客户端操作：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917133815151-1973854951.png" alt="img"></p><p>这里选用的是spring框架的spring data redis</p><p>方法：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230917134200101-1195312880.png" alt="img"></p><p>在config软件包下创建一个redis配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始创建redis对象:&#123;&#125;&quot;</span>,redisConnectionFactory);</span><br><span class="line">        <span class="type">RedisTemplate</span> <span class="variable">redisTemplate</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>();</span><br><span class="line">        <span class="comment">//设置redis工厂对象</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再创建一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRedis</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(redisTemplate);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行如果控制台输出org.springframework.data.redis.core.RedisTemplate@xxxxxx就成功了</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用OneDrive在网站在线播放音视频</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8OneDrive%E5%9C%A8%E7%BD%91%E7%AB%99%E5%9C%A8%E7%BA%BF%E6%92%AD%E6%94%BE%E9%9F%B3%E8%A7%86%E9%A2%91/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E4%BD%BF%E7%94%A8OneDrive%E5%9C%A8%E7%BD%91%E7%AB%99%E5%9C%A8%E7%BA%BF%E6%92%AD%E6%94%BE%E9%9F%B3%E8%A7%86%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a href="https://wuuconix.link/2022/03/02/onedrive/#%E8%A7%86%E9%A2%91%E5%BA%8A">OneDrive的妙用 图&#x2F;音频&#x2F;视频床 - wuuconix’s blog</a></p><p>也是最近想在自己网站搞个图床，但是网站内存可能不太支持大量的图片，尤其是视频，这时就需要外用嵌入url进行，我试了下OneDrive播放1080P的视频还是不怎么卡，加载个3秒左右就可以看了。主要是它画质不压缩。而且博客园也不支持上传视频文件得嘛，这时一个外链就很重要。</p><p>原文教程：<a href="https://mapaler.github.io/GetOneDriveDirectLink/">获取OneDrive直链 (mapaler.github.io)</a></p><p><strong>对了现在好像需要魔法了…</strong></p><h2 id="详细教程"><a href="#详细教程" class="headerlink" title="详细教程"></a>详细教程</h2><p>如果单只外链图片直接用博客园的上传图片或者免费图床网址：<a href="https://www.imgtp.com/">ImgTP - 免费公共图床</a></p><p>需要上传视频的话就用下面的方法；</p><p>注册微软账号并登录到OneDrive：<a href="https://onedrive.live.com/%EF%BC%8C%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%E5%B0%B1%E6%98%AF%E4%BD%A0%E5%AD%98%E5%82%A8%E5%9B%BE%E5%BA%8A%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%B8%8A%E4%BC%A0%E4%BD%A0%E7%9A%84%E9%9F%B3%E8%A7%86%E9%A2%91%EF%BC%8C%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E6%9C%895GB%E7%9A%84%E5%85%8D%E8%B4%B9%E7%A9%BA%E9%97%B4%EF%BC%8C%E5%A4%A7%E4%B8%80%E7%82%B9%E7%9A%8440RMB%E4%B8%80%E4%B8%AA%E6%9C%88%EF%BC%8C%E7%A9%BA%E9%97%B4%E6%9C%89500GB%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BD%A0%E5%BF%98%E4%BA%86%E5%8F%AF%E4%BB%A5%E5%BC%80%E5%B0%8F%E5%8F%B7%E5%BE%97%E5%98%9B%EF%BC%8C%E4%B8%80%E4%B8%AA%E5%8F%B7%E4%B8%8D%E8%A1%8C%E5%B0%B1%E5%A4%9A%E4%B8%AA%E5%8F%B7%E3%80%82">https://onedrive.live.com/，这个网址就是你存储图床的位置，上传你的音视频，普通用户有5GB的免费空间，大一点的40RMB一个月，空间有500GB，但是你忘了可以开小号得嘛，一个号不行就多个号。</a></p><p>上传文件后右键选择嵌入，然后就可以复制你的代码到你的网址上了，但是这种直接嵌入全部代码播放视频会跳转到OneDrive的网站播放，如果需要链接直接找到代码里面的https链接就行。</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230902171147400-556228805.png" alt="img"></p><p>如果需要改变URL地址掩码，可以使用<a href="https://mapaler.github.io/GetOneDriveDirectLink/">获取OneDrive直链 (mapaler.github.io)</a>网站所提供的控制面板来改变：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230902171131408-1589537501.png" alt="img"></p><h2 id="两种方法嵌入到博客展示"><a href="#两种方法嵌入到博客展示" class="headerlink" title="两种方法嵌入到博客展示"></a>两种方法嵌入到博客展示</h2><p>（测试视频大小：103MB，20s，1080p）</p><p>跳转到 OneDrive 网站播放：（流畅，适合大视频）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;YOUR URL&quot;</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;320&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">allowfullscreen</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.cnblogs.com/tinymce3/themes/advanced/img/trans.gif" alt="img"> </p><p>(测试视频：39MB，13s，1080p）<br>直接在当前页面播放：（方便，适合小视频）直接在博客园自带的插入视频写入URL就行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;YOUR URL&quot;</span> <span class="attr">preload</span>=<span class="string">&quot;none&quot;</span> <span class="attr">controls</span>=<span class="string">&quot;controls&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">data</span>=<span class="string">&quot;https://i.cnblogs.com/tinymce3/plugins/media/moxieplayer.swf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;src&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://i.cnblogs.com/tinymce3/plugins/media/moxieplayer.swf&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;flashvars&quot;</span> <span class="attr">value</span>=<span class="string">&quot;url=http%3A//storage.live.com/items/FD2CF6A8D4B567B9%21106%3A/69725401FBD644A131110FCDE1DC5643.mp4<span class="symbol">&amp;amp;</span>poster=/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;allowfullscreen&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;allowscriptaccess&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.cnblogs.com/tinymce3/themes/advanced/img/trans.gif" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>事务管理+AOP记录技术</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/java/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86-AOP%E8%AE%B0%E5%BD%95%E6%8A%80%E6%9C%AF/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/java/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86-AOP%E8%AE%B0%E5%BD%95%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>项目文件在之前的公司管理系统上增添的….</p><p><strong>—事务管理—</strong></p><p><strong>事务</strong>是一组操作的集合，它是一个不可分割的工作单位，这些操作要么同时成功，要么同时失败。</p><p>简单案例：删除部门，同时删除该部门下的员工。</p><p>直接在删除部门方法的Service类下添加个删除员工的方法并在EmpMapper里添加删除对应部门员工的方法。</p><p>如果想在让处理的事件回滚并报错，比如在DeptService里删除方法里，添加上@Transactional(rollbackFor &#x3D; Exception.class),这里的rollbackFor指出现什么异常就回滚，这里是所有异常。为了测试就直接在方法里面的删除部门的deptMapper方法下编写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (true)&#123;</span><br><span class="line">throw new Exception(&quot;出差啦..&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候再去删除部门就会报错，并且部门也删除不了</p><p><strong>事务传播行为：</strong>比如要记录比较重要的操作时，如删除部门，无论成功还是失败都要记录日志。这时就再创建一个数据库用于记录日志。在DeptService删除方法下调用添加日志的方法，然后在DeptLogService类下的添加的日志方法下required:大部分情况下都是用该传播行为即可；requires_new：当不希望事务之间相互影响</p><p>DeptLogServiceImpl类里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class DeptLogServiceImpl implements DeptLogService &#123;</span><br><span class="line">@Autowired</span><br><span class="line">private DeptLogMapper deptLogMapper;</span><br><span class="line"></span><br><span class="line">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">@Override</span><br><span class="line">public void insertLog(DeptLog deptLog) &#123;</span><br><span class="line">deptLogMapper.insert(deptLog);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="—AOP—"><a href="#—AOP—" class="headerlink" title="—AOP—"></a><strong>—AOP—</strong></h2><p>Aspect Oriented Programming，面向切面编程，这里主要编写用于记录日志。</p><p>先pom.xml导入AOP的依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>快速入门程序：统计各个业务层方法执行耗时。</p><p>@Slf4j</p><p>@Component</p><p>@Aspect&#x2F;&#x2F;表示这是一个AOP类</p><p>public class TimeAspect {</p><p>@Around(“execution(* top.hepingan.service.<em>.</em>(..))“) <em>&#x2F;&#x2F;切入点表达式</em></p><p>public Object recordTime(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {</p><p>&#x2F;&#x2F;记录开始时间</p><p>long begin&#x3D;System.currentTimeMillis();</p><p>&#x2F;&#x2F;调用原始方法运行</p><p>Object result&#x3D;proceedingJoinPoint.proceed();</p><p>&#x2F;&#x2F;记录结束时间 l</p><p>ong end&#x3D;System.currentTimeMillis();</p><p>log.info(proceedingJoinPoint.getSignature()+“方法执行耗时：{}ms”,end–begin);</p><p>return result; }</p><p>}</p><hr><p>@Around(“execution(* top.hepingan.service.<em>.</em>(..))”)环绕通知注解表示包括service层下的所有业务都要使用这个方法</p><p>直接通过案例来：先添加一个数据库表用于存储日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 操作日志表</span><br><span class="line">create table operate_log(</span><br><span class="line">id int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">operate_user int unsigned comment &#x27;操作人ID&#x27;,</span><br><span class="line">operate_time datetime comment &#x27;操作时间&#x27;,</span><br><span class="line">class_name varchar(100) comment &#x27;操作的类名&#x27;,</span><br><span class="line">method_name varchar(100) comment &#x27;操作的方法名&#x27;,</span><br><span class="line">method_params varchar(1000) comment &#x27;方法参数&#x27;,</span><br><span class="line">return_value varchar(2000) comment &#x27;返回值&#x27;,</span><br><span class="line">cost_time bigint comment &#x27;方法执行耗时, 单位:ms&#x27;</span><br><span class="line">) comment &#x27;操作日志表&#x27;;</span><br></pre></td></tr></table></figure><p>然后再在pojo里创建一个Operate(操作的意思)类：用于定义数据库里面所有的列，并加上@Data等lombok注解。</p><p>然后再在top.hepingan下创建一个注解：anno.Log,里面编写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface Log &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在Mapper里面创建OperateLogMapper，编写的代码就是将传递的日志数据添加到数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Insert(&quot;insert into operate_log (operate_user, operate_time, class_name, method_name, method_params, return_value, cost_time) &quot; +</span><br><span class="line">&quot;values (#&#123;operateUser&#125;, #&#123;operateTime&#125;, #&#123;className&#125;, #&#123;methodName&#125;, #&#123;methodParams&#125;, #&#123;returnValue&#125;, #&#123;costTime&#125;);&quot;)</span><br><span class="line">public void insert(OperateLog log);</span><br></pre></td></tr></table></figure><p>然后再在aop里面创建一个LogAspect：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAscpect</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OperateLogMapper operateLogMapper;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> HttpServletRequest httpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around(&quot;@annotation(top.hepingan.anno.Log)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">recordLog</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="comment">//获取JWT令牌并解析</span></span><br><span class="line"> String jwt=httpServletRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">Claims claims= JwtUtils.parseJWT(jwt);<span class="comment">//解析JWT令牌</span></span><br><span class="line"> <span class="type">Integer</span> <span class="variable">operateUser</span> <span class="operator">=</span>(Integer) claims.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">LocalDateTime operateTime=LocalDateTime.now();</span><br><span class="line"><span class="comment">//获取操作类名</span></span><br><span class="line"> String className=proceedingJoinPoint.getTarget().getClass().getName();</span><br><span class="line"><span class="comment">//获取方法名</span></span><br><span class="line"> String methodName=proceedingJoinPoint.getSignature().getName();</span><br><span class="line"><span class="comment">//获取方法参数</span></span><br><span class="line"> Object[] args=proceedingJoinPoint.getArgs();</span><br><span class="line">String methodParams= Arrays.toString(args);</span><br><span class="line"><span class="comment">//方法执行耗时</span></span><br><span class="line"> <span class="type">long</span> begin=System.currentTimeMillis();</span><br><span class="line"><span class="comment">//调用原始目标方法运行</span></span><br><span class="line"> Object result=proceedingJoinPoint.proceed();</span><br><span class="line"><span class="comment">//方法返回值</span></span><br><span class="line"> String returnValue= JSONObject.toJSONString(result);</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> end=System.currentTimeMillis();</span><br><span class="line">Long costTime=end-begin;</span><br><span class="line">OperateLog operateLog=<span class="keyword">new</span> <span class="title class_">OperateLog</span>(<span class="literal">null</span>,operateUser,operateTime,className,methodName,methodParams,returnValue,costTime);</span><br><span class="line">operateLogMapper.insert(operateLog);</span><br><span class="line">log.info(<span class="string">&quot;AOP记录操作日志：&#123;&#125;&quot;</span>,operateLog);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都有注释直接看就行，就是把数据库中的每一个对应的参数都写出来。</p><p>我们的目的是在增删改操作后都输出一段日志到数据库中，这时就直接在各个增删改方法上添加上@Log注解。</p><p>冷知识：学Java要掌握的英语单词还有点多：[Java程序员必背英语单词70个_编写背单词程序java_✪龍行天下✪的博客-CSDN博客](<a href="https://blog.csdn.net/a313970281/article/details/79775819#:~:text=Java%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BF%85%E8%83%8C%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D70%E4%B8%AA">https://blog.csdn.net/a313970281/article/details/79775819#:~:text=Java程序员必背英语单词70个</a> 1 Compile%3A编绎 2 Run%3A运行 3 Class%3A类 4,System%3A系统 6 out%3A输出 7 print%3A打印 8 line%3A行 更多项目)</p><p><strong>配置文件优先级</strong>：properties&gt;yml&gt;yaml，在企业开发中，yml为目前的主流。cmd命令行参数级优先级要高于JAVA系统参数级</p><h2 id="—Bean的管理—"><a href="#—Bean的管理—" class="headerlink" title="—Bean的管理—"></a><strong>—Bean的管理—</strong></h2><p><strong>从IOC容器获取bean</strong></p><p>springboot启动时会自动创建bean对象，获取bean对象三种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testBean()&#123;</span><br><span class="line">//根据bean的名称获取</span><br><span class="line"> DeptController bean1= (DeptController) applicationContext.getBean(&quot;deptController&quot;);</span><br><span class="line">System.out.println(bean1);</span><br><span class="line"></span><br><span class="line">//根据bean的类型获取</span><br><span class="line"> DeptController bean2= applicationContext.getBean(DeptController.class );</span><br><span class="line">System.out.println(bean2);</span><br><span class="line"></span><br><span class="line">//根据bean 的名称及类型获取</span><br><span class="line"> DeptController bean3 =applicationContext.getBean(&quot;deptController&quot;, DeptController.class);</span><br><span class="line">System.out.println(bean3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后可以发现输出的bean对象都是一样的，这就说明默认只创建了一个实例对象。</p><p><strong>bean的作用域</strong></p><p>主要的作用域：singletion：容器内同 名称 的bean 只有一个实例（默认）；prototype每次使用该bean时会创建新的实例.</p><p>@Lazy注解可以延缓初始化，延迟到第一次使用的时候</p><p>设置作用域注解：在DeptController上创建主机呃呃：**@Scope(“prototype”)**，这时再运行bean就不一样了。</p><p><strong>第三方类bean</strong>（了解）</p><p>在配置类使用@Bean注解</p><p><strong>—SpringBoot原理—</strong></p><p>底层原理有两个，一个是起步依赖，一个是自动配置。</p><p>起步依赖就是导入最高级的jar包，然后通过Maven传递依赖的包，就把整个springboot的依赖导入进来了。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有C和Java的底子如何速通Python语法</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E6%9C%89C%E5%92%8CJava%E7%9A%84%E5%BA%95%E5%AD%90%E5%A6%82%E4%BD%95%E9%80%9F%E9%80%9APython%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E6%9C%89C%E5%92%8CJava%E7%9A%84%E5%BA%95%E5%AD%90%E5%A6%82%E4%BD%95%E9%80%9F%E9%80%9APython%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>本人4小时速通python</strong>，为啥要学python,emmmm…我选的专业要学 。。。早点把它学了上课就可以打瞌睡了</p><p><strong>由于java和C这两个我更精通java,所以直接拿Java做对比啦。因为python中不用用’;‘换行,所以就拿’;‘表示python中的换行啦~</strong></p><hr><p>&gt;在python中可以<strong>不用定义变量类型</strong>，比如直接输age&#x3D;18就行了；布尔类型True和False都要首字母大写</p><p>&gt;<strong>input输入</strong>语法：xxx&#x3D;input(“请输入：”)默认为String类型，要想定义变量类型在input前面加个括号再输入变量类型,即int(input)。相当于java中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Scanner input =new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入:&quot;);</span><br><span class="line">String input_name=input.nextLine();</span><br></pre></td></tr></table></figure><p>可以看出java中很麻烦，所以有句话叫人生苦短我用python….</p><p>&gt;创建<strong>列表</strong>：List&#x3D;[“hh”,”hpa”,18,3.14],输出列表元素:for i in List: print(i);<strong>集合</strong>：jihe&#x3D;{1,”hh”,True}；集合有无序性和重复性。<strong>元组</strong>：yuanzu&#x3D;(1,”hh”)；元组里面的数据不能被修改。<strong>字典</strong>：zidian&#x3D;dict&#x3D;{‘n’&#x3D;1,’m’&#x3D;2};字典格式:{‘键’:值}</p><p>&gt;多行<strong>注释</strong>：”””xxx”””或”’xxx”’,相当于java中的&#x2F;**xxx&#x2F;；普通注释：#xxx</p><p>&gt;在语句中输出变量：print(f”balbal{a}”)或print(“balbal%d”%a)#a为变量</p><p>&gt;a&#x3D;12;b&#x3D;float(a)#强制转换变量类型</p><p>&gt;创建随机数:a&#x3D;random.randint(1,100)#1~100的随机一个数;b&#x3D;random.u</p><p>&gt;**表示乘方，如果一个整数除不尽会自动变成小数</p><p>&gt;python中字符串也能进行加乘！！</p><p>&gt;if语句:if 条件: ;elif&#x3D;else if</p><p>&gt;while,for循环语句条件不用打括号。举例好讲些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">while a&lt;15:</span><br><span class="line">    a+=1</span><br><span class="line">for i in range(10):#range(x)表示从0到x，不包括x,包括0</span><br><span class="line">    print(i)</span><br><span class="line">arr = [1, 3, 5, 6]</span><br><span class="line">for i in arr:#自定义输出</span><br><span class="line">    print(i)</span><br><span class="line">f=&quot;hepingan&quot;#输出字符串</span><br><span class="line">for i in f:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>**&gt;字符串的截取:<br>**f&#x3D;”Hello World”<br>f&#x3D;f[2:6]#从下标2开始截取到下标4,即’llo W’;<br>f&#x3D;f[:6]#从下标0截取到5,即’Hello W’<br>f&#x3D;f[2:]#从2截完,即’llo World’<br>f&#x3D;f[::2]#每隔1个截取’HloWrd’<br>f&#x3D;f[::-1]#反向输出’dlroW olleH’<br>f&#x3D;f[-5:-1]#倒起数下标输出,’Worl’</p><p><strong>&gt;字符串的一些方法：</strong></p><p>g&#x3D;’my name is hpa’<br>g&#x3D;g.replace(‘hpa’,’hh’)#替换字符串中的部分内容<br>arr&#x3D;g.split(” “)#分割字符串的东西成列表，这里是空格<br>g&#x3D;”-“.join(arr)#将列表以”-“连接成字符串<br>字符串的其他方法：<br>title每个单词首字母大写，capitalize首个字母大写，lstrip删除左侧空白字符，rstrip删除右侧空白字符,strip删除两侧空白</p><p><strong>&gt;多维列表：</strong><br>arr&#x3D;[[1,2,4],[2,5,7],[5,7,9]]#二维列表<br>print(arr[1][2])#输出7<br>print(arr[0])#输出[1,2,4]<br>arr&#x3D;[<br>[[1,2,3],[4,5,6],[7,8,9]],<br>[[a,b,’sss’],[9,8,7],[6,5,4]],<br>[[16,456,23],[False,12,543],[34,234,546]]<br>]#多维列表，还可以往上叠，这是三维的<br>print(arr[1][0][2])#输出sss</p><p><strong>&gt;列表的查找,删除和排序:</strong><br>h1&#x3D;12<br>h&#x3D;[1,True,’hh’,h1,[1,’oo’,99]]<br>if 12 not in h:#判断12这个元素在不在h中<br>print(“…”)<br>else:<br>print(“^^^”)<br>h.append(“sadness”)#向列表末尾添加元素<br>h.insert(2,’happyness’)#向下标2添加元素<br>h.pop(0)#删除0号下标的元素<br>h.remove(True)#删除指定元素<br>print(h)<br>i&#x3D;[1,6,2,9,3]<br>i.sort()#自动排序方法<br>print(i)</p><p><strong>&gt;方法的使用:</strong></p><p>python中创建方法直接def xxx():</p><p>def run():<br>print(“跑步”)<br>print(“继续跑”)<br>run()<br>def jisuan(i):<br>if i%2&#x3D;&#x3D;0:<br>print(“偶数”)<br>else:<br>print(“奇数”)</p><p>num&#x3D;14<br>print(jisuan(num))#输出会有None，是因为没有返回值(return)<br>if <strong>name</strong> &#x3D;&#x3D;’__jisuan__’:<br>jisuan(23)<br>def j(n,age&#x3D;19,*args,<strong>kwargs):#一个*表示无限列表，两个</strong>就需要在数据前添加名称<br>if age&gt;&#x3D;18:<br>print(n)<br>for i in args:#输出可以无限元素的args的每个元素<br>print(i)<br>else:<br>print(‘no’)<br>print(kwargs[“hh”])#输出kwargs中名为’hh’的数据<br>j(5,20,1,5,4,2,hh&#x3D;12,ss&#x3D;43)#输出5,1,5,4,2,12</p><hr><p><strong>python基础语法学习时的代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>*<span class="number">1.23</span>)<span class="comment">#两种不同类型number型数可直接用</span></span><br><span class="line">str1=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">bool</span>=<span class="literal">True</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">s12332321</span></span><br><span class="line"><span class="string">123我是注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;我也是注释&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&quot;World&quot;</span>,<span class="string">&quot;何平安&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(str1.upper())<span class="comment">#变大写</span></span><br><span class="line"><span class="built_in">print</span>(str1.lower())<span class="comment">#变小写</span></span><br><span class="line"><span class="type">List</span> =[<span class="string">&quot;hh&quot;</span>,<span class="string">&quot;hpa&quot;</span>,<span class="number">19</span>,<span class="literal">True</span>]<span class="comment">#集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">List</span>)</span><br><span class="line"><span class="type">List</span>.pop(<span class="number">0</span>)<span class="comment">#删除列表第1个元素</span></span><br><span class="line"><span class="type">List</span>.append(<span class="number">123</span>)<span class="comment">#列表添加元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="type">List</span>:<span class="comment">#输出列表元素</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">jihe=&#123;<span class="number">1</span>,<span class="string">&quot;hh&quot;</span>,<span class="literal">True</span>&#125;<span class="comment">#集合</span></span><br><span class="line">yuanzu=(str1,<span class="number">1</span>,<span class="string">&quot;hpa&quot;</span>)<span class="comment">#元组</span></span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;n&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;m&#x27;</span>:<span class="number">2</span>&#125;<span class="comment">#字典</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;balabala<span class="subst">&#123;a&#125;</span>&quot;</span>)<span class="comment">#在语句中输出变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;balabala%d&quot;</span>%a)</span><br><span class="line"></span><br><span class="line">b=<span class="built_in">float</span>(a)<span class="comment">#强制转换变量类型</span></span><br><span class="line"></span><br><span class="line">c=random.randint(<span class="number">1</span>,<span class="number">100</span>)<span class="comment">#创建随机数</span></span><br><span class="line">d=random.uniform(<span class="number">1</span>,<span class="number">100</span>)<span class="comment">#创建小数随机数</span></span><br><span class="line"><span class="built_in">print</span>(c,d)</span><br><span class="line">str2=<span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1+str2*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">e=<span class="number">12</span>%<span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> e==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;整除&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> e==<span class="number">2</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;余2&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;不能整除&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">15</span>:</span><br><span class="line">a+=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):<span class="comment">#range(x)表示从0到x，不包括x,包括0</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:<span class="comment">#自定义输出</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">f=<span class="string">&quot;hepingan&quot;</span><span class="comment">#输出字符串</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#字符串的截取</span></span><br><span class="line">f=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line">f=f[<span class="number">2</span>:<span class="number">6</span>]<span class="comment">#从下标2开始截取到下标4,即&#x27;llo W&#x27;;</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line">f=f[:<span class="number">6</span>]<span class="comment">#从下标0截取到5,&#x27;Hello W&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line">f=f[<span class="number">2</span>:]<span class="comment">#从2截完</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line">f=f[::<span class="number">2</span>]<span class="comment">#每隔1个截取</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line">f=f[::-<span class="number">1</span>]<span class="comment">#反向输出</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line">f=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line">f=f[-<span class="number">5</span>:-<span class="number">1</span>]<span class="comment">#倒起数下标输出,&#x27;Worl&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">g=<span class="string">&#x27;my name is hpa&#x27;</span></span><br><span class="line">g=g.replace(<span class="string">&#x27;hpa&#x27;</span>,<span class="string">&#x27;hh&#x27;</span>)<span class="comment">#替换字符串中的部分内容</span></span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line">arr=g.split(<span class="string">&quot; &quot;</span>)<span class="comment">#分割字符串的东西成列表，这里是空格</span></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line">g=<span class="string">&quot;-&quot;</span>.join(arr)<span class="comment">#将列表以&quot;-&quot;连接成字符串</span></span><br><span class="line"><span class="built_in">print</span>(g)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;字符串的其他方法：</span></span><br><span class="line"><span class="string">title每个单词首字母大写，capitalize首个字母大写，lstrip删除左侧空白字符，rstrip删除右侧空白字符,strip删除两侧空白</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">arr=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>],[<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]]<span class="comment">#二维列表</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">0</span>])</span><br><span class="line">arr=[</span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],</span><br><span class="line">[[a,b,<span class="string">&#x27;sss&#x27;</span>],[<span class="number">9</span>,<span class="number">8</span>],[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]],</span><br><span class="line">[[<span class="number">16</span>,<span class="number">456</span>,<span class="number">23</span>,<span class="string">&#x27;ppp&#x27;</span>],[<span class="literal">False</span>,<span class="number">12</span>,<span class="number">543</span>],[<span class="number">34</span>,<span class="number">234</span>,<span class="number">546</span>]]</span><br><span class="line">]<span class="comment">#多维列表，还可以往上叠，这是三维的</span></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">h1=<span class="number">12</span></span><br><span class="line">h=[<span class="number">1</span>,<span class="literal">True</span>,<span class="string">&#x27;hh&#x27;</span>,h1,[<span class="number">1</span>,<span class="string">&#x27;oo&#x27;</span>,<span class="number">99</span>]]</span><br><span class="line"><span class="keyword">if</span> <span class="number">12</span> <span class="keyword">not</span> <span class="keyword">in</span> h:<span class="comment">#判断12这个元素在不在h中</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;...&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;^^^&quot;</span>)</span><br><span class="line">h.append(<span class="string">&quot;sadness&quot;</span>)<span class="comment">#向列表末尾添加元素</span></span><br><span class="line">h.insert(<span class="number">2</span>,<span class="string">&#x27;happyness&#x27;</span>)<span class="comment">#向下标2添加元素</span></span><br><span class="line">h.pop(<span class="number">0</span>)<span class="comment">#删除0号下标的元素</span></span><br><span class="line">h.remove(<span class="literal">True</span>)<span class="comment">#删除指定元素</span></span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"></span><br><span class="line">i=[<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">3</span>]</span><br><span class="line">i.sort()</span><br><span class="line"><span class="built_in">print</span>(i)<span class="comment">#排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&quot;hh&quot;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">19</span>,<span class="string">&#x27;sex&#x27;</span>:<span class="literal">True</span>,<span class="string">&#x27;hobby&#x27;</span>:<span class="string">&#x27;basketball&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;age&#x27;</span>]=<span class="string">&#x27;AGE&#x27;</span><span class="comment">#修改键</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">&#x27;hobby&#x27;</span>]<span class="comment">#删除键及其值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>.items())<span class="comment">#以列表包围元组的形式展示</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>.keys())<span class="comment">#获取所以键</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dict</span>.values())<span class="comment">#获取所有值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;跑步&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;继续跑&quot;</span>)</span><br><span class="line">run()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jisuan</span>(<span class="params">i</span>):</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;偶数&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;奇数&quot;</span>)</span><br><span class="line"></span><br><span class="line">num=<span class="number">14</span></span><br><span class="line"><span class="built_in">print</span>(jisuan(num))<span class="comment">#输出会有None，是因为没有返回值(return)</span></span><br><span class="line"><span class="keyword">if</span> __name__ ==<span class="string">&#x27;__jisuan__&#x27;</span>:</span><br><span class="line">jisuan(<span class="number">23</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">j</span>(<span class="params">n,age=<span class="number">19</span>,*args,**kwargs</span>):<span class="comment">#一个*表示无限列表，两个**就需要在数据前添加名称</span></span><br><span class="line"><span class="keyword">if</span> age&gt;=<span class="number">18</span>:</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> args:<span class="comment">#输出可以无限元素的args的每个元素</span></span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;no&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(kwargs[<span class="string">&quot;hh&quot;</span>])<span class="comment">#输出kwargs中名为&#x27;hh&#x27;的数据</span></span><br><span class="line">j(<span class="number">5</span>,<span class="number">20</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,hh=<span class="number">12</span>,ss=<span class="number">43</span>)<span class="comment">#输出5,1,5,4,2,12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_name=<span class="built_in">input</span>(<span class="string">&quot;请输入你的名字：&quot;</span>)<span class="comment">#输入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你的名字是:&quot;</span>+input_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（二）</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>排序查询</strong>：select 字段列表 from [表名] <strong>order by</strong> [字段名1] [asc升序&#x2F;desc降序，默认值为升序],[字段名2] [排序方式]；&#x2F;&#x2F;字段名1为优先级排序，如果字段名1有相同的，再以字段名2排序</p><p><strong>聚合函数</strong>：</p><table><thead><tr><th>count</th><th>统计数量（一般不选null的列）</th></tr></thead><tbody><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>sum</td><td>总和</td></tr><tr><td>avg</td><td>平均值</td></tr></tbody></table><p>Select 聚合函数(字段名) from 表名；&#x2F;&#x2F;null值不参与所有聚合函数运算 ! ！</p><p><strong>分组查询</strong>：selcet 字段列表 from [where 分组前条件限定] group by 分组字段名 [having 分组后条件过滤];&#x2F;&#x2F;分组后查询的字段为聚合函数和分组字段，查询其他字段无意义，执行顺序：where&gt;聚合函数&gt;having</p><p>eg：select sex,avg(score),count(<em>) from where score&gt;60 student group by sex having count(</em>)&gt;1;&#x2F;&#x2F;查询student表格中以sex(性别)为分组的score值大于60的人的平均score（成绩）并且前面加上sex的数据后面加上分组后每个组的数量,如果人数小于2则过滤掉</p><p>AS的用法： select [字段] [聚合函数] as [your_name] from … ：as就是将聚合函数的内容的字段有个名字</p><p><strong>分页查询</strong>：select 字段列表 from limit 起始索引 , 查询条目数;&#x2F;&#x2F;起始索引&#x3D;（当前页码-1）*每页显示的条数</p><h2 id="—多表查询—"><a href="#—多表查询—" class="headerlink" title="—多表查询—"></a>—<strong>多表查询</strong>—</h2><p>基础：select *from 表名1,表名2; 这种查会显示表1和表2的集合乘，即展示的表会有表1数量乘表2数量的乘积。</p><p>隐式内连接：select 字段列表 from 表1，表2… where 条件;</p><p>显示内连接：select 字段列表 from 表1 [inner] join 表2 on 条件;&#x2F;&#x2F;这两种差不多，只是表达不一样。</p><p>左右连接：select 字段列表 from 表1 left&#x2F;right join 表2 on 条件;&#x2F;&#x2F;显示左&#x2F;右边的所有数据（因为有些条件会不显示部分数据或有些数据为null）</p><h2 id="索引index"><a href="#索引index" class="headerlink" title="索引index"></a>索引index</h2><p>索引是对数据库表中一列或多列的值进行排序的一种结构。MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度</p><ul><li>主键索引：一张表只能有一个主键索引，不允许重复、不允许为 NULL；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE TableName ADD PRIMARY KEY(column_list); </span><br></pre></td></tr></table></figure><ul><li>唯一索引：数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX IndexName ON `TableName`(`字段名`(length));</span><br><span class="line"># 或者</span><br><span class="line">ALTER TABLE TableName ADD UNIQUE (column_list); </span><br></pre></td></tr></table></figure><ul><li>普通索引：一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许 NULL 值插入；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX IndexName ON `TableName`(`字段名`(length));</span><br><span class="line"># 或者</span><br><span class="line">ALTER TABLE TableName ADD INDEX IndexName(`字段名`(length));</span><br></pre></td></tr></table></figure><h2 id="视图view"><a href="#视图view" class="headerlink" title="视图view"></a>视图view</h2><p>视图是虚拟表，本身不存储数据，而是按照指定的方式进行查询。所以借助视图，来执行相同或相似的查询。</p><p>使用视图和使用表完全一样，只需要把视图当成一张表就OK了。视图是一张虚拟表</p><table><thead><tr><th>操作指令</th><th>代码</th></tr></thead><tbody><tr><td>创建视图</td><td><code>CREATE VIEW 视图名(列1，列2...) AS SELECT (列1，列2...) FROM ...;</code></td></tr><tr><td>使用视图</td><td><code>当成表使用就好</code></td></tr><tr><td>修改视图</td><td><code>CREATE OR REPLACE VIEW 视图名 AS SELECT [...] FROM [...];</code></td></tr><tr><td>查看数据库已有视图</td><td><code>&gt;SHOW TABLES [like...];</code>（可以使用模糊查找）</td></tr><tr><td>查看视图详情</td><td><code>DESC 视图名</code>或者<code>SHOW FIELDS FROM 视图名</code></td></tr><tr><td>视图条件限制</td><td><code>[WITH CHECK OPTION]</code></td></tr></tbody></table><h2 id="授权与回收权限"><a href="#授权与回收权限" class="headerlink" title="授权与回收权限"></a>授权与回收权限</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">MySQL 赋予用户权限命令的简单格式可概括为：</span><br><span class="line"></span><br><span class="line"> 1 grant 权限 on 数据库对象 to 用户  </span><br><span class="line">一、grant 普通数据用户，查询、插入、更新、删除 数据库中所有表数据的权利</span><br><span class="line">1 grant select on testdb.* to common_user@&#x27;%&#x27;  </span><br><span class="line">2 grant insert on testdb.* to common_user@&#x27;%&#x27;  </span><br><span class="line">3 grant update on testdb.* to common_user@&#x27;%&#x27;  </span><br><span class="line">4 grant delete on testdb.* to common_user@&#x27;%&#x27; </span><br><span class="line">或者，用一条 MySQL 命令来替代：</span><br><span class="line"></span><br><span class="line"> 1 grant select, insert, update, delete on testdb.* to common_user@&#x27;%&#x27;  </span><br><span class="line">二、grant 数据库开发人员，创建表、索引、视图、存储过程、函数等权限</span><br><span class="line"></span><br><span class="line">grant 创建、修改、删除 MySQL 数据表结构权限。</span><br><span class="line">1 grant create on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line">2 grant alter  on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line">3 grant drop   on testdb.* to developer@&#x27;192.168.0.%&#x27;; </span><br><span class="line">grant 操作 MySQL 外键权限：</span><br><span class="line"></span><br><span class="line"> 1 grant references on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line"></span><br><span class="line">grant 操作 MySQL 临时表权限：</span><br><span class="line"></span><br><span class="line"> 1 grant create temporary tables on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line"></span><br><span class="line">grant 操作 MySQL 索引权限：</span><br><span class="line"></span><br><span class="line"> 1 grant index on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line"></span><br><span class="line">grant 操作 MySQL 视图、查看视图源代码权限：</span><br><span class="line">1 grant create view on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line">2 grant show   view on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line">grant 操作 MySQL 存储过程、函数权限：</span><br><span class="line">1 grant create routine on testdb.* to developer@&#x27;192.168.0.%&#x27;; -- now, can show procedure status  </span><br><span class="line">2 grant alter  routine on testdb.* to developer@&#x27;192.168.0.%&#x27;; -- now, you can drop a procedure  </span><br><span class="line">3 grant execute        on testdb.* to developer@&#x27;192.168.0.%&#x27;;  </span><br><span class="line">三、grant 普通 DBA 管理某个 MySQL 数据库的权限</span><br><span class="line"></span><br><span class="line">  1 grant all privileges on testdb to dba@&#x27;localhost&#x27;  </span><br><span class="line"></span><br><span class="line">其中，关键字 “privileges” 可以省略。</span><br><span class="line"></span><br><span class="line">四、grant 高级 DBA 管理 MySQL 中所有数据库的权限：</span><br><span class="line"></span><br><span class="line"> 1 grant all on *.* to dba@&#x27;localhost&#x27;  </span><br><span class="line"></span><br><span class="line">五、MySQL grant 权限，分别可以作用在多个层次上</span><br><span class="line"></span><br><span class="line">1. grant 作用在整个 MySQL 服务器上：</span><br><span class="line">1 grant select on *.* to dba@localhost; -- dba 可以查询 MySQL 中所有数据库中的表。  </span><br><span class="line">2 grant all    on *.* to dba@localhost; -- dba 可以管理 MySQL 中的所有数据库  </span><br><span class="line">2. grant 作用在单个数据库上：</span><br><span class="line">1 grant select on testdb.* to dba@localhost; -- dba 可以查询 testdb 中的表。  </span><br><span class="line">3. grant 作用在单个数据表上：</span><br><span class="line">1 grant select, insert, update, delete on testdb.orders to dba@localhost;  </span><br><span class="line">这里在给一个用户授权多张表时，可以多次执行以上语句。例如：</span><br><span class="line">1 grant select(user_id,username) on smp.users to mo_user@&#x27;%&#x27; identified by &#x27;123345&#x27;;  </span><br><span class="line">2 grant select on smp.mo_sms to mo_user@&#x27;%&#x27; identified by &#x27;123345&#x27;;  </span><br><span class="line">4. grant 作用在表中的列上：</span><br><span class="line">1 grant select(id, se, rank) on testdb.apache_log to dba@localhost;  </span><br><span class="line">5. grant 作用在存储过程、函数上：</span><br><span class="line">1 grant execute on procedure testdb.pr_add to &#x27;dba&#x27;@&#x27;localhost&#x27;  </span><br><span class="line">2 grant execute on function testdb.fn_add to &#x27;dba&#x27;@&#x27;localhost&#x27;  </span><br><span class="line">六、查看 MySQL 用户权限</span><br><span class="line"></span><br><span class="line">查看当前用户（自己）权限：</span><br><span class="line">1 show grants;  </span><br><span class="line">查看其他 MySQL 用户权限：</span><br><span class="line">1 show grants for dba@localhost;  </span><br><span class="line">七、撤销已经赋予给 MySQL 用户权限的权限。</span><br><span class="line"></span><br><span class="line">revoke 跟 grant 的语法差不多，只需要把关键字 “to” 换成 “from” 即可：</span><br><span class="line">1 grant  all on *.* to   dba@localhost;  </span><br><span class="line">2 revoke all on *.* from dba@localhost; </span><br><span class="line">八、MySQL grant、revoke 用户权限注意事项</span><br><span class="line"></span><br><span class="line">1. grant, revoke 用户权限后，该用户只有重新连接 MySQL 数据库，权限才能生效。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>企业级开发项目《苍穹外卖》(一)</title>
      <link href="/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E3%80%8B%E4%B8%80/"/>
      <url>/2024/02/04/%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97/%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%8B%8D%E7%A9%B9%E5%A4%96%E5%8D%96%E3%80%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>我不要当骑手，我要当老板~！</p><h2 id="—环境搭建—"><a href="#—环境搭建—" class="headerlink" title="—环境搭建—"></a><strong>—环境搭建—</strong></h2><p>先下载黑马的资料文件，里面day1的前端代码文件文件夹将其复制到一个全英文路径的地方，然后运行里面的<strong>nginx.exe</strong>，浏览器输入localhost如果有苍穹外卖的界面说明就成功了。</p><p>IDEA打开后端代码文件里面的sky-take-out，里面已经搭建好了三个模块及各个模块的内容。</p><p><strong>git环境搭建</strong></p><p>创建git仓库：VCS栏里找到创建git仓库，路径就选择sky-take-out，没有下载git的话就去先下载：<a href="https://registry.npmmirror.com/-/binary/git-for-windows/v2.40.0.windows.1/Git-2.40.0-64-bit.exe">https://registry.npmmirror.com/-/binary/git-for-windows/v2.40.0.windows.1/Git-2.40.0-64-bit.exe</a></p><p>我的博客的下一文章就有git的详细教学</p><p> 安装教程：<a href="https://blog.csdn.net/mukes/article/details/115693833">Git 详细安装教程（详解 Git 安装过程的每一个步骤）_git安装_mukes的博客-CSDN博客</a>或<a href="https://zhuanlan.zhihu.com/p/597447255">git的安装与配置（详细） - 知乎 (zhihu.com)</a>,</p><p> IDEA配置git教程：<a href="https://blog.csdn.net/ITjavaxiaobai/article/details/122326046">IDEA配置git详细步骤_idea git config_字节小龙的博客-CSDN博客</a>，github加速器推荐选择网易的UU加速器,或者用国内的gitee（码云）</p><p> 然后点击提交(ctrl+k)，选中全部文件然后下面写注释苍穹外卖，提交即可。这是提交到本地git仓库</p><p> 创建远程gitee仓库：<a href="https://gitee.com/">工作台 - Gitee.com</a>，先创建一个账号然后点击创建仓库(<a href="https://gitee.com/projects/new">新建仓库 - Gitee.com</a>),名字就是sky-take-out吧，定义为私有。然后再复制，回到IDEA,找到git里面的推送（一个箭头符号），点击左边下划线部分，输入刚刚复制的url，然后点击仍然推送。</p><p><strong>数据环境搭建</strong></p><p> 数据库文件下载：<a href="https://picture-hepingan.oss-cn-hangzhou.aliyuncs.com/sky.sql%EF%BC%8C%E5%86%8D%E5%9C%A8resources%E9%87%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%87%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E7%AD%89%E4%BF%A1%E6%81%AF%E3%80%82">https://picture-hepingan.oss-cn-hangzhou.aliyuncs.com/sky.sql，再在resources里面配置文件里面配置和数据库密码等信息。</a></p><p><strong>前后端联调</strong></p><p> 运行Maven生命周期的compile，然后再运行server模块里面的运行类。打开localhost网址（默认端口号为80），数据库里面有个管理的账号：admin，密码123456，输入并登录。可以先去调试下EmpControllerImpl熟悉下项目。</p><p><strong>Nginx反向代理</strong></p><p>将前端发送的动态请求由nignx转发到后端服务器。好处：提高访问速度，进行负载均衡，保证后端安全。</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230829191422133-356554957.png" alt="img"></p><p>nginx负载均衡策略：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230829192042293-1158764306.png" alt="img"></p><p> nignx.conf里面有个可以配置服务器的权重（但是得有两台以上的服务器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">      server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span> weight=<span class="number">90</span> ;</span><br><span class="line">      #server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8088</span> weight=<span class="number">10</span> ;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <strong>登录系统的完善</strong></p><p>为了增加安全性，使用md5进行加密处理，把一个明文加密处理，但是不能反向回解，所以是单向的。比如将admin的密码123456进行加密就是：e10adc3949ba59abbe56e057f20f883e，将其复制到employee数据库里的password，然后再在EmployeeServiceImpl里的&#x2F;&#x2F;TODD 注释下将password变量进行加密：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password =DigestUtils.md5DigestAsHex(password.getBytes());</span><br></pre></td></tr></table></figure><p><strong>导入接口文档</strong></p><p>使用前后端分离的方式开发。找到资料里面的两个json格式接口文件，再在YAPI官网（<a href="https://yapi.pro/%EF%BC%89%E9%87%8C%E5%AF%BC%E5%85%A5%E8%BF%99%E4%B8%AA%E4%B8%A4%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%8C%E8%A6%81%E5%88%86%E5%88%AB%E6%96%B0%E5%BB%BA%E4%B8%A4%E4%B8%AA%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%86%8D%E5%9C%A8%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E7%9A%84%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E9%87%8C%E9%80%89%E6%8B%A9json%E6%A0%BC%E5%BC%8F%E5%B8%A6%E5%85%A5%E3%80%82">https://yapi.pro/）里导入这个两个接口，要分别新建两个项目，再在项目里面的数据管理里选择json格式带入。</a></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230829195818199-1546088218.png" alt="img"></p><p><strong>Swagger</strong></p><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务(<a href="https://swagger.io/)%E3%80%82">https://swagger.io/)。</a> 它的主要作用是：</p><ol><li><p>使得前后端分离开发更加方便，有利于团队协作</p></li><li><p>接口的文档在线自动生成，降低后端开发人员编写接口文档的负担</p></li><li><p>功能测试</p><p>Spring已经将Swagger纳入自身的标准，建立了Spring-swagger项目，现在叫Springfox。通过在项目中引入Springfox ，即可非常简单快捷的使用Swagger。</p></li></ol><p>直接使用Knife4j（为Java MVC框架集成Swagger生成Api文档的增强解决方案），里面封装了Swagger的，在pom.xml里导入它的依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.0</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>再在WebMvcConfiguration.java里添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>里面已经自动编写好了的。</p><p>就是添加点注释的意思:@Api添加在控制类上，@ApiOperation，@ApiModel，@ApiModelProperty；</p><p>编写Swager注解后就可以在接口文档里看到添加的接口。</p><h2 id="—功能开发—"><a href="#—功能开发—" class="headerlink" title="—功能开发—"></a>—功能开发—</h2><h3 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h3><p>在YApi里面查看新增员工的接口：</p><p> <img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230908170525491-1501688491.png" alt="img"></p><p>Server模块里面的Controller层下的EmployeeController类里面编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增员工&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增员工：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class="line">        employeeService.save(employeeDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 然后再点报错的save自动添加到server层，然后在Impl里面实现接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">        Employee employee=<span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line"><span class="comment">//        对象属性拷贝</span></span><br><span class="line">        BeanUtils.copyProperties(employeeDTO,employee);</span><br><span class="line">        <span class="comment">//设置账号的状态，默认正常状态1表示正常，0表示锁定</span></span><br><span class="line">        employee.setStatus(StatusConstant.ENABLE);</span><br><span class="line"><span class="comment">//        设置默认密码</span></span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));</span><br><span class="line"><span class="comment">//        设置时间</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setCreateTime(LocalDateTime.now());</span><br><span class="line"><span class="comment">//        设置记录人和修改人的id</span></span><br><span class="line"><span class="comment">//        TODO 后期修改</span></span><br><span class="line">        employee.setCreateUser(<span class="number">10L</span>);</span><br><span class="line">        employee.setUpdateUser(<span class="number">10L</span>);</span><br><span class="line"></span><br><span class="line">        employeeMapper.insert(employee);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> EmployeeMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into employee (name, username, password, phone, sex, id_number, create_time, update_time, create_user, update_user,status) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;values(#&#123;name&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;phone&#125;,#&#123;sex&#125;,#&#123;idNumber&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p><strong>测试连接</strong></p><p>打开<a href="http://localhost:8080/doc.html#/default/employee-controller/saveUsingPOST">苍穹外卖项目接口文档</a>，先去员工登录接口测试拿到一个JWT令牌，然后再在文档管理的全局参数配置里添加名为token的值为JWT令牌的参数，然后再去测试添加员工的接口。记得输入规定的内容，比如idNumber就为18位身份证号。phone为11位。如果报401就是令牌过期了，记得重新申请！</p><p><strong>代码补充</strong></p><p>如果添加一个相同的员工名字就会报500的错误，这时就需要给用户返回错误信息，在GobleExceptionHandler类中添加下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span>&#123;</span><br><span class="line"><span class="comment">//        Duplicate entry &#x27;hpan&#x27; for key &#x27;employee.idx_username&#x27;</span></span><br><span class="line">        String message=ex.getMessage();</span><br><span class="line">        <span class="keyword">if</span>(message.contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split=message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            String username=split[<span class="number">2</span>];</span><br><span class="line">            String msg=username+ <span class="string">&quot;已存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后测试接口文档就会报：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230909004015276-2129659358.png" alt="img"></p><p>完善操作人的ID：就是save里面的10L，使用Thread.currentThread().getId()获取当前线程的ID，输出后每次请求的ID都不一样，这样可以验证每次操作的线程都不一样，在JWT令牌添加模块里面使用BaseContext.setCurrentId(empId)将ID存储到一个空间里去，然后再将10L替换成BaseContext.getCurrentId()取出来。</p><h3 id="员工分页查询"><a href="#员工分页查询" class="headerlink" title="员工分页查询"></a>员工分页查询</h3><p>老样子Controller层–&gt;Service层–&gt;Mapper层</p><p>Controller层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;分页查询&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;分页查询:&#123;&#125;&quot;</span>,employeePageQueryDTO);</span><br><span class="line">        PageResult pageResult=employeeService.page(employeePageQueryDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>pom.xml文件里面添加分页查询的依赖，源文件已经配置好了。</p><p>再在ServiceImpl里面编写：PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize());</p><p>由于SQL语句比较复杂要用到模糊查询，所以就在xml里面编写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from sky_take_out.employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by create_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编辑，根据ID查询员工"><a href="#编辑，根据ID查询员工" class="headerlink" title="编辑，根据ID查询员工"></a>编辑，根据ID查询员工</h3><p>补充启动警用员工(也顺便弄出编辑员工的模块)：P0ST的Controller–&gt;update的SQL：（根据ID来操作）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update sky_take_out.employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username !=null&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;password !=null&quot;</span>&gt;</span></span><br><span class="line">                password=#&#123;password&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone !=null&quot;</span>&gt;</span></span><br><span class="line">                phone=#&#123;phone&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex !=null&quot;</span>&gt;</span></span><br><span class="line">                sex=#&#123;sex&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;idNumber !=null&quot;</span>&gt;</span></span><br><span class="line">                idNumber=#&#123;idNumber&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime !=null&quot;</span>&gt;</span></span><br><span class="line">                updateTime=#&#123;updateTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateUser !=null&quot;</span>&gt;</span></span><br><span class="line">                updateUser=#&#123;updateUser&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status !=null&quot;</span>&gt;</span></span><br><span class="line">                status=#&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id =#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据id查询员工和编辑员工：</p><p>还是根据接口文档来编写，不多说，直接上代码：</p><p>编辑员工信息的ServiceImpl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">        Employee employee=<span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">        BeanUtils.copyProperties(employeeDTO,employee);</span><br><span class="line">        <span class="comment">//设置时间</span></span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line">        employeeMapper.update(employee);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 这里是直接调用刚刚启动禁用员工的SQL语句</p><p>根据ID查询的ServiceImpl层：加一个密码加密的ｓｅｔ方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        Employee employee=employeeMapper.getById(id);</span><br><span class="line">        employee.setPassword(<span class="string">&quot;******&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> 最后再导入分类管理的代码，在资料ｄａｙ２里面的分类管理模块代码，由于跟员工管理的代码差不多，就直接Ｍａｐｐｅｒ的导ｍａｐｐｅｒ，ｓｅｒｖｉｃｅ的入ｓｅｒｖｉｃｅ，ｃｏｎｔｒｏｌｌｅｒ的导入ｃｏｎｔｒｏｌｌｅｒ．不用编写了。</p>]]></content>
      
      
      <categories>
          
          <category> 项目日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 苍穹外卖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复域名访问问题</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E4%BF%AE%E5%A4%8D%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E4%BF%AE%E5%A4%8D%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>研究了一下午,一开始思考为什么不能一直用域名访问，在主页面点进新页面后就不能继续使用域名访问了，所以就开始修复这个问题，问了问AI是反向代理服务器的问题，结果给我网站搞崩了，查了一堆资料还是没解决，结果自己随便逛了逛宝塔面板，看到PHP是静态的，我就知道问题了，妈的，还是自己的脑袋聪明</p><p>帮忙避雷：如果打开网站是直接给你下载一个文件且你打开文件里面的内容是如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php`</span><br><span class="line">`/**`</span><br><span class="line">`* Front to the WordPress application. This file doesn&#x27;t do anything, but loads`</span><br><span class="line">`* wp-blog-header.php which does and tells WordPress to load the theme.`</span><br><span class="line">`*`</span><br><span class="line">`* @package WordPress`</span><br><span class="line">`*/</span><br><span class="line">/**`</span><br><span class="line">`* Tells WordPress to load the WordPress theme and output it.`</span><br><span class="line">`*`</span><br><span class="line">`* @var bool`</span><br><span class="line">`*/`</span><br><span class="line">`define( &#x27;WP_USE_THEMES&#x27;, true );</span><br><span class="line">/** Loads the WordPress Environment and Template */`</span><br><span class="line">`require __DIR__ . &#x27;/wp-blog-header.php&#x27;;</span><br></pre></td></tr></table></figure><p>就证明你跟我范了一样的错误&#x3D; &#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云网站搭建分享</title>
      <link href="/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E9%98%BF%E9%87%8C%E4%BA%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%88%86%E4%BA%AB/"/>
      <url>/2024/02/04/IT%E7%AC%94%E8%AE%B0/%E9%98%BF%E9%87%8C%E4%BA%91%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>购买服务器(新人都有免费的)–&gt;去控制台到实例管理里重置实例密码–&gt;回到概况点击远程连接，然后输入刚刚设置的密码–&gt;去宝塔官方复制Linux面板的安装脚本(看操作系统进行选择<a href="https://www.bt.cn/new/download.html">宝塔面板下载，免费全能的服务器运维软件 (bt.cn)</a>)–&gt;粘贴到远程连接台–&gt;安装完成后输入bt 14查看地址和账号和记住端口–&gt;安全组添加ATP对应端口和80端口–&gt; 登录宝塔Linux面板–&gt;选择推荐极速安装配置(为你的网站添加必要的插件，如：防盗)–&gt;左侧任务栏选择软件商店(可以看到你已经安装的插件)–&gt;选择一键部署，然后推荐使用wordpress一键部署–&gt;安装好后域名栏输入IP地址，数据库可以修改，然后提交–&gt;点击链接进入wordPress–&gt;选择语言，勾选霸王条款后再注册账号即可进入管理你的网站–&gt;可以挑选一个你喜欢的主题就可以愉快的进行编辑了<br>域名添加：购买域名（最低的低至个位数一年）–&gt;进入域名控制台–&gt;点击域名列表–&gt;选择一个域名点击解析–&gt;点击上方新手引导，添加你的IP即可自动添加www和@型，此时你的域名网站还不能问，未进行备案–&gt;进入ICP备案，点击添加备案–&gt;按照流程输入信息，地区填身份证上的(PS:备案整个流程大概需要1个月)</p><p>二级域名添加：域名解析–&gt;添加域名–&gt;选择二级域名–&gt;输入前缀就行，然后再到宝塔面板添加该域名,如我的二级域名:hy.hepingan.top</p><p>有问题加Q:1973016127</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大一下java期末设计：学生信息管理系统（荣获班上第一）</title>
      <link href="/2024/02/03/IT%E7%AC%94%E8%AE%B0/java/%E5%A4%A7%E4%B8%80%E4%B8%8Bjava%E6%9C%9F%E6%9C%AB%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E8%8D%A3%E8%8E%B7%E7%8F%AD%E4%B8%8A%E7%AC%AC%E4%B8%80%EF%BC%89/"/>
      <url>/2024/02/03/IT%E7%AC%94%E8%AE%B0/java/%E5%A4%A7%E4%B8%80%E4%B8%8Bjava%E6%9C%9F%E6%9C%AB%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%88%E8%8D%A3%E8%8E%B7%E7%8F%AD%E4%B8%8A%E7%AC%AC%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>其实就是当时我们没教数据库然后我会JDBC然后就得了第一了，一堆if判断语句，连个图形化界面都没有，现在看来还是感觉太低级了…–by 2024-2-7</p><p>从此之后就一直是期末设计第一了   –by 2024-8-2</p><h2 id="先上java代码："><a href="#先上java代码：" class="headerlink" title="先上java代码："></a><strong>先上java代码：</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line">先上java代码：</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cs2</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 未完成的swing界面设计</span></span><br><span class="line"><span class="comment">// JFrame frame = new JFrame(&quot;学生信息管理系统&quot;);</span></span><br><span class="line"><span class="comment">// frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span></span><br><span class="line"><span class="comment">// frame.setSize(600,400);</span></span><br><span class="line"><span class="comment">// frame.setVisible(true);</span></span><br><span class="line"><span class="comment">// frame.setLayout(new FlowLayout());</span></span><br><span class="line"><span class="comment">// JButton loginbutton=new JButton(&quot;登录&quot;);</span></span><br><span class="line"><span class="comment">// frame.add(loginbutton);</span></span><br><span class="line"><span class="comment">// JButton zhucebutton=new JButton(&quot;注册&quot;);</span></span><br><span class="line"><span class="comment">// frame.add(zhucebutton);</span></span><br><span class="line"><span class="comment">// JButton checkBot= new JButton(&quot;查询&quot;);</span></span><br><span class="line"><span class="comment">// checkBot.setEnabled(false);</span></span><br><span class="line"><span class="comment">// JButton luruBot =new JButton(&quot;录入&quot;);</span></span><br><span class="line"><span class="comment">// luruBot.setEnabled(false);</span></span><br><span class="line"><span class="comment">// frame.add(checkBot);</span></span><br><span class="line"><span class="comment">// frame.add(luruBot);</span></span><br><span class="line"><span class="comment">// ImageIcon imageIcon =new ImageIcon((&quot;src/hehao.jpg&quot;));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// JPanel loginPanel =new JPanel();</span></span><br><span class="line"><span class="comment">// loginPanel.setLayout(new GridLayout(3,2));</span></span><br><span class="line"><span class="comment">// loginPanel.add(new JLabel(&quot;姓名：&quot;));</span></span><br><span class="line"><span class="comment">// JTextField usernameField=new JTextField();</span></span><br><span class="line"><span class="comment">// loginPanel.add(new JLabel(&quot;密码:&quot;));</span></span><br><span class="line"><span class="comment">// JTextField PasswordField= new JTextField();</span></span><br><span class="line"><span class="comment">// loginPanel.add(PasswordField);</span></span><br><span class="line"><span class="comment">// loginPanel.add(loginbutton);</span></span><br><span class="line"><span class="comment">// loginPanel.add(zhucebutton);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// loginbutton.addActionListener(new ActionListener() &#123;</span></span><br><span class="line"><span class="comment">// @Override</span></span><br><span class="line"><span class="comment">// public void actionPerformed(ActionEvent e) &#123;</span></span><br><span class="line"><span class="comment">// String username = usernameField.getText();</span></span><br><span class="line"><span class="comment">// String password = String.valueOf(PasswordField.getText());</span></span><br><span class="line"><span class="comment">// if(username.equals(&quot;name&quot;)&amp;&amp;password.equals(&quot;password&quot;))&#123;</span></span><br><span class="line"><span class="comment">// loginbutton.setVisible(false);</span></span><br><span class="line"><span class="comment">// luruBot.setEnabled(true);</span></span><br><span class="line"><span class="comment">// checkBot.setEnabled(true);</span></span><br><span class="line"><span class="comment">// &#125;else&#123;</span></span><br><span class="line"><span class="comment">// JOptionPane.showMessageDialog(frame,</span></span><br><span class="line"><span class="comment">// &quot;用户名或密码输入错误&quot;,</span></span><br><span class="line"><span class="comment">// &quot;登录失败&quot;,</span></span><br><span class="line"><span class="comment">// JOptionPane.ERROR_MESSAGE);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// zhucebutton.addActionListener(new ActionListener() &#123;</span></span><br><span class="line"><span class="comment">// @Override</span></span><br><span class="line"><span class="comment">// public void actionPerformed(ActionEvent e) &#123;</span></span><br><span class="line"><span class="comment">// loginbutton.setEnabled(false);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// SwingUtilities.invokeLater(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">// @Override</span></span><br><span class="line"><span class="comment">// public void run() &#123;</span></span><br><span class="line"><span class="comment">// new cs2();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;);2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;欢迎使用学生信息管理系统！&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;正在为你加载程序...&quot;</span>);</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hh&quot;</span>;<span class="comment">//数据库名为hh</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">&quot;123cd233&quot;</span>;<span class="comment">//账号和密码</span></span><br><span class="line">System.out.println(<span class="string">&quot;请选择你的操作：登录按1，注册账号按2&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">1</span> &amp;&amp; x != <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;您输入的有误，请重新运行程序&quot;</span>);</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">zhuce:</span><br><span class="line"><span class="keyword">while</span> (x == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;您已进入注册系统&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(JDBC_DRIVER);</span><br><span class="line">conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的学号:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的姓名:&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的注册的密码:&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span><span class="string">&quot;SELECT * FROM student WHERE id=? &quot;</span>;</span><br><span class="line">pstmt=conn.prepareStatement(sql2);</span><br><span class="line">pstmt.setInt(<span class="number">1</span>,id);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO student (id, name, password) VALUES (?, ?, ?)&quot;</span>;</span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, name);</span><br><span class="line">pstmt.setString(<span class="number">3</span>, password);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line"><span class="keyword">if</span> (rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pstmt != <span class="literal">null</span>) pstmt.close();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">x = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">denglu:</span><br><span class="line"><span class="keyword">while</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;您已进入登录系统&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(JDBC_DRIVER);</span><br><span class="line">conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line"></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的学号:&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你姓名:&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的密码:&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> scanner.next();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM student WHERE id = ? and name = ? and password = ?&quot;</span>;</span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, name);</span><br><span class="line">pstmt.setString(<span class="number">3</span>, password);</span><br><span class="line"></span><br><span class="line">rs = pstmt.executeQuery();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;输入成功.&quot;</span>);</span><br><span class="line">y = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;你输入的有误，已为你重新运行登录系统请再次输入.&quot;</span>);</span><br><span class="line">y = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="literal">null</span>) rs.close();</span><br><span class="line"><span class="keyword">if</span> (pstmt != <span class="literal">null</span>) pstmt.close();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;欢迎进入学生信息管理系统&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;请选择你的操作：查询成绩请按1，录入成绩请按2&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的成绩：&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(JDBC_DRIVER);</span><br><span class="line">conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的学号：&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE student SET score= ? WHERE id=?&quot;</span>;</span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, score);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>, id);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line"><span class="keyword">if</span> (rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;录入成功！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pstmt != <span class="literal">null</span>) pstmt.close();</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="literal">null</span>) conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入你的学号:&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(JDBC_DRIVER);</span><br><span class="line">conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"><span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT score FROM student WHERE id = ?&quot;</span>; <span class="comment">// Use placeholders</span></span><br><span class="line">pstmt = conn.prepareStatement(sql);</span><br><span class="line">pstmt.setInt(<span class="number">1</span>, id);</span><br><span class="line">rs = pstmt.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;成绩为: &quot;</span> + score+<span class="string">&quot; , tips:如果未录入成绩默认成绩为0分&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">input.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="literal">null</span>)</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pstmt != <span class="literal">null</span>)</span><br><span class="line">pstmt.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="literal">null</span>)</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException se) &#123;</span><br><span class="line">se.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分享一个IDEA的破解网站教程：<a href="https://aijihuo.cn/post/43.html">IDEA2023.1破解 永久激活 最新版IDEA激活 亲测可用！ – 爱激活网 (aijihuo.cn)</a></p><p><strong>数据使用的mysql数据库，版本是8.1，创建student表的数据库代码：</strong></p><p>create table student(id int name varchar(20),password varchar(20),score int);</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的故事（大二上）</title>
      <link href="/2024/02/03/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8A%EF%BC%89/"/>
      <url>/2024/02/03/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%BA%8C%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>我大一下定的暑假计划遗憾离场，还是得多学点儿技术，把JavaWeb给搞完了，什么SSM, Springboot都over了，第一个小型项目公司员工管理系统就是根据三层架构写的，虽然是搬运但还是学到了些技术，练竹园也优化了一下，天香园没管了，驾照也拿到了，耍也耍了，很充实的一个暑假。大二上开学了，企业级开发项目苍穹外卖登场，写了半个月，最后的订单统计啥的没写，也算是第一个真正意义上的项目，基于springboot写的，功能很齐全客户端还是小程序。10月份发生了不好的事情….. 10月份学得零零散散的，主要就是springcloud 微服务的一些基础，Feign, gateway 网关，docker啥的，后面感觉没多大用以后要用的时候再看。然后一直在研究前后端调连，axios, ajax, vue和node. js啥的。11月有点儿摆，可能是那件不好的事吧，感觉大学那么点时间还是要多出去走走，就到处耍去了，后来发现耍是需要资本的，两袖清风何能游天下，看我博客就知道了11月啥都没干。扯远了来谈学习的，后面12月份我就恢复状态了，还是一个学长喊我一路开发小程序接口，我就去学了Python 爬虫，也是成功爬取到我们学校教务系统的信息，之前11月份我还考虑过调用chatgpt接口的这下不就会了，之后我自己还去研究了小程序开发的流程，还有就是没钱买服务器了TwT。跨完年2024年后我就准备去玩玩微服务项目，学成在线，结果开发环境搭玩就没搞了，电脑太烂了跑不了大项目，还要跑虚拟机…. 之后有人喊我去搞微信小程序了，还是搞了个小项目出来，之后就是期末考试预习了。</p><p>至于寒假嘛，我打算往大数据方向上发展了，看看行不行，毕竟Java环境太卷了，前后端开发有点儿饱和了，如果往大数据方向走的话可能就要考研了…. 或者搞个完整的自己的项目，全栈开发，前后端分离关我人不分离什么事。</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html,css基础</title>
      <link href="/2024/02/03/IT%E7%AC%94%E8%AE%B0/html-css%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/02/03/IT%E7%AC%94%E8%AE%B0/html-css%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>推荐可以去看看大佬的：<a href="https://blog.csdn.net/m0_55221239/article/details/115313923">(3条消息) Web前端：JavaScript最强总结 附详细代码 （带常用案例！）_前端代码示例_北美程序员的产品之旅的博客-CSDN博客</a></p><hr><p>下面是我自己手写的：（用于自己学习记录用的）</p><p>strong 加粗 b<br>ins 下划 u<br>em 倾斜 i(italic)<br>del 删除线 s<br>br 换行 hr 水平线 p自动换行<br>src路径 controls控制 loop循环 autoplay自动播放(mutec视频静音播放)<br># 空连接 href超链接跳转 target(_self覆盖原网页 _blank新窗口打开)<br>dl自定义列表 dt自定义列表主题 dd自定义列表的内容 ul无序列表 ol有序列表 li每一项<br>table表格 tr表格行 td单元 border边框 rowspan合并垂直 colspan合并水平(左上原则)<br>input:输入 text单行文本 password输入密码 radio单选框(用于多选一) checkbox多选框,用于多选多<br>file上传文件 submit提交按钮 reset重置按钮 button普通按钮(默认无功能) placeholder占位符，提示输入内容<br>checked默认选中 multiple选中多个文件(file上传文件)<br>select下拉菜单 option下拉每一项<br>textarea文本域标签<br>label绑定内容欲表单标签的关系<br>div背景图标签 spone span行内标签<br>header网站头部 nav 网站导航 footer网页底部 aside侧边栏 section区块 article文章<br>style css核心 color颜色 font-size字体大小 background-color背景颜色(width height)<br>font:直接输入参数就行 text-decoration:字体设置<br>background-image: url()：背景图 “&gt;display flex<br>margin调整位置<br>border-bottom下划线</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud微服务学习笔记（一）【介绍,Eureka,Ribbon,Nacos】</title>
      <link href="/2024/02/03/IT%E7%AC%94%E8%AE%B0/java/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%90%E4%BB%8B%E7%BB%8D-Eureka-Ribbon-Nacos%E3%80%91/"/>
      <url>/2024/02/03/IT%E7%AC%94%E8%AE%B0/java/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%E3%80%90%E4%BB%8B%E7%BB%8D-Eureka-Ribbon-Nacos%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p>推荐去我的博客园看，因为一些原因不能远程调用它的图片地址:<a href="http://cnblogs.com/hepingan">http://cnblogs.com/hepingan</a></p><h2 id="微服务介绍"><a href="#微服务介绍" class="headerlink" title="微服务介绍"></a>微服务介绍</h2><p>用于开发大型项目时，将所有代码都放在一个项目中会增加压力，而且单体架构的并发数也有限，占用的线程多的时候就不行了。这时就需要用到微服务分布式开发。</p><p>单体架构（monolithic structure）：顾名思义，整个项目中所有功能模块都在一个工程中开发；项目部署时需要对所有模块一起编译、打包；项目的架构设计、开发模式都非常简单,当项目规模较小时，这种模式上手快，部署、运维也都很方便，因此早期很多小型项目都采用这种模式。</p><p>但随着项目的业务规模越来越大，团队开发人员也不断增加，单体架构就呈现出越来越多的问题：</p><ul><li><strong>团队协作成本高</strong>：试想一下，你们团队数十个人同时协作开发同一个项目，由于所有模块都在一个项目中，不同模块的代码之间物理边界越来越模糊。最终要把功能合并到一个分支，你绝对会陷入到解决冲突的泥潭之中。</li><li><strong>系统发布效率低</strong>：任何模块变更都需要发布整个系统，而系统发布过程中需要多个模块之间制约较多，需要对比各种文件，任何一处出现问题都会导致发布失败，往往一次发布需要数十分钟甚至数小时。</li><li><strong>系统可用性差</strong>：单体架构各个功能模块是作为一个服务部署，相互之间会互相影响，一些热点功能会耗尽系统资源，导致其它服务低可用。</li></ul><p>微服务架构，首先是服务化，就是将单体架构中的功能模块从单体应用中拆分出来，独立部署为多个服务。同时要满足下面的一些特点：</p><ul><li><strong>单一职责</strong>：一个微服务负责一部分业务功能，并且其核心数据不依赖于其它模块。</li><li><strong>团队自治</strong>：每个微服务都有自己独立的开发、测试、发布、运维人员，团队人员规模不超过10人（2张披萨能喂饱）</li><li><strong>服务自治</strong>：每个微服务都独立打包部署，访问自己独立的数据库。并且要做好服务隔离，避免对其它服务产生影响</li></ul><p>SpringCloud依托于SpringBoot的自动装配能力，大大降低了其项目搭建、组件使用的成本。对于没有自研微服务组件能力的中小型企业，使用SpringCloud全家桶来实现微服务开发可以说是最合适的选择了！ <a href="https://spring.io/projects/spring-cloud#overview">Spring Cloud</a></p><p>目前SpringCloud最新版本为<code>2022.0.x</code>版本，对应的SpringBoot版本为<code>3.x</code>版本，但它们全部依赖于JDK17，目前在企业中使用相对较少。</p><table><thead><tr><th>SpringCloud版本</th><th>SpringBoot版本</th></tr></thead><tbody><tr><td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2022.0-Release-Notes">2022.0.x</a> aka Kilburn</td><td>3.0.x</td></tr><tr><td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes">2021.0.x</a> aka Jubilee</td><td>2.6.x, 2.7.x (Starting with 2021.0.3)</td></tr><tr><td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes">2020.0.x</a> aka Ilford</td><td>2.4.x, 2.5.x (Starting with 2020.0.3)</td></tr><tr><td><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">Hoxton</a></td><td>2.2.x, 2.3.x (Starting with SR5)</td></tr><tr><td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes">Greenwich</a></td><td>2.1.x</td></tr><tr><td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes">Finchley</a></td><td>2.0.x</td></tr><tr><td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes">Edgware</a></td><td>1.5.x</td></tr><tr><td><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes">Dalston</a></td><td>1.5.x</td></tr></tbody></table><p>因此，我们推荐使用次新版本：Spring Cloud 2021.0.x以及Spring Boot 2.7.x版本。JDK为11</p><p>微服务的一些模块：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230925163714657-1190611405.png" alt="img"></p><p><strong>本项目的源文件使用的是黑马程序员的2021版SpringCloud微服务教程的资料！！！springcloud版本为Hoxton,springboot版本为2.3.9</strong></p><p>一个查看自己项目springboot和spring版本的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">springVersion</span> <span class="operator">=</span> SpringVersion.getVersion();</span><br><span class="line">        <span class="type">String</span> <span class="variable">springBootVersion</span> <span class="operator">=</span> SpringBootVersion.getVersion();</span><br><span class="line">        System.out.println(<span class="string">&quot;Spring版本:&quot;</span>+springVersion+<span class="string">&quot;\nSpringBoot版本:&quot;</span>+springBootVersion);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h2><p>原则：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230925163901663-1322525584.png" alt="img"></p><p>跨模块的查询不同数据库的例子：</p><p>通过在order里查询orderid返回order的数据，其中包括user的数据，然而user-server的数据库和模块都是与order-server单独分开的，这时就需要用到RestTemplate和它的getForObject方法了。</p><p>OrderApplication：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建RestTemplate并注入bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>OderService:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.查询订单</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">        <span class="comment">// 2.利用RestTemplate发送http请求，查询用户</span></span><br><span class="line">        String url= <span class="string">&quot;http://userservice/user/&quot;</span>+ order.getUserId();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">        <span class="comment">// 3.封装user到Order</span></span><br><span class="line">        order.setUser(user);</span><br><span class="line">        <span class="comment">// 4.返回</span></span><br><span class="line">        <span class="keyword">return</span> order;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><p> <strong>Eureka与消费者和提供者的关系</strong></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230927114336542-915395969.png" alt="img"></p><p>Eureka 采用 CS（Client&#x2F;Server，客户端&#x2F;服务器） 架构，它包括以下两大组件：</p><ul><li><strong>Eureka Server</strong>：Eureka 服务注册中心，主要用于提供服务注册功能。当微服务启动时，会将自己的服务注册到 Eureka Server。Eureka Server 维护了一个可用服务列表，存储了所有注册到 Eureka Server 的可用服务的信息，这些可用服务可以在 Eureka Server 的管理界面中直观看到。</li><li><strong>Eureka Client</strong>：Eureka 客户端，通常指的是微服务系统中各个微服务，主要用于和 Eureka Server 进行交互。在微服务应用启动后，Eureka Client 会向 Eureka Server 发送心跳（默认周期为 30 秒）。若 Eureka Server 在多个心跳周期内没有接收到某个 Eureka Client 的心跳，Eureka Server 将它从可用服务列表中移除（默认 90 秒），这就确保了调用服务的稳定安全性，确认那个server服务没有死。</li></ul><h3 id="搭建Eureka服务"><a href="#搭建Eureka服务" class="headerlink" title="搭建Eureka服务"></a>搭建Eureka服务</h3><p>新建一个Maven项目模块(eureka-server)，在pom文件里添加eureka服务端的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再在main里面创建一个启动类，启动类上加上@EnableEurekaServer和@SpringBootApplication注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加application.yml配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>这时启动eureka启动类，在浏览器输入localhost:10086展示出spring Eureka的网站搭建成功</p><h3 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h3><p>在user-service和order-service项目模块里的pom里添加client的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>user-service和order-service里的application.yml添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">user/orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><p>再复制一个UserApplication，在修改选项里找到添加VM选项，输入-Dserver.port&#x3D;8082，意思就是把它的端口号设置为8082，这是IDEA的高级功能。</p><p>这时Spring Eureka的网站上实例的UserService的数量就变成2了：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230930020603915-1448394445.png" alt="img"></p><p><strong>服务发现</strong></p><p>直接在RestTemplate上添加@LoadBalanced注解</p><h2 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230930013636348-538629772.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230930014758836-492230024.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230930015134293-714300039.png" alt="img"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>方法一：针对order服务的全部</p><p>在OrderApplication里添加负载均衡的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时再去多次访问查询功能，可以发现UserApplication的两个实例都有被访问的日志。</p><p>方法二：针对特定服务</p><p>在application.yml里添加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment">#负载均衡规则</span></span><br></pre></td></tr></table></figure><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><p>Ribbon的默认为懒加载，第一次加载后会存在内存中，之后再加载就不用加载了。而饥饿加载会在项目启动时就加载了，第一次访问都不用加载了。</p><p>在application.yml里添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span>  <span class="comment">#指定服务名称</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="安装和入门"><a href="#安装和入门" class="headerlink" title="安装和入门"></a>安装和入门</h3><p>Eureka的升级版，而且还是阿里巴巴的产品，支持国产~github上可以下载，黑马的资料里也有，我选用的版本是2.2.3</p><p>nacos会占用8848端口（当然也可以修改）</p><p>进入bin目录，然后执行命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>在浏览器输入地址：<a href="http://127.0.0.1:8848/nacos%E5%8D%B3%E5%8F%AF%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFnacos">http://127.0.0.1:8848/nacos即可，默认的账号和密码都是nacos</a></p><p>更详细的教程参考：Nacos 安装教程（史上最详细保姆级教程）_nacos安装-CSDN博客</p><p>父工程的pom里引入nacos：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端（user-server和order-server）引入客户端依赖，并去掉原来的eureka依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改application.yml:将原来的eureka配置注释掉，再在spring:下添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><p>修改完后记得重新编译运行下pom.xml，然后再启动项目，进入localhost:8848:</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230930154848724-793005629.png" alt="img"></p><h3 id="服务集群，Nacos负载均衡和环境隔离"><a href="#服务集群，Nacos负载均衡和环境隔离" class="headerlink" title="服务集群，Nacos负载均衡和环境隔离"></a>服务集群，Nacos负载均衡和环境隔离</h3><blockquote><p>通常一个服务端口断了都是先在本地替换另一个服务，而不是去其他ip调用服务，这时就需要使用<strong>集群</strong>来区别不同的地域IP了。添加服务集群属性：</p></blockquote><p>在nacos:下添加:</p><p>discovery:<br>  cluster-name: SH</p><p>这时这个项目集群就属于SH了。</p><blockquote><p>有了集群就可以修改<strong>负载均衡</strong>了，我要想order的集群向user对应的集群优先请求（比如我的order配置的集群为重庆，那我发送的请求就优先从重庆集群的user中获取）。将order&#x2F;application.yml原来的ribbon配置修改为：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment">#负载均衡规则</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>根据权重负载均衡</strong>，有些性能好的端口服务就可以多承担几次请求，差的就少一些，这时就需要设置权重了。在Nacos控制台里服务实例里的详细找到一个端口服务的编辑，里面可以修改权重：</p></blockquote><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001011022136-631236056.png" alt="img"></p><blockquote><p><strong>环境隔离，</strong>就是隔离不同版本和服务的东西，设计中可以用可以不用。先新建一个命名空间，（Nacos默认会生成一个public的命名空间）：</p></blockquote><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001012526788-2003910688.png" alt="img"></p><p>然后再在order的application.yml里配置命名空间ID：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos ip</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">CQ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">devKaiFaHuanJing</span></span><br></pre></td></tr></table></figure><p>这时用order再去请求就会报错，因为它们已经是两个世界的人了……</p><p><strong>Nacos注册中心原理</strong></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001013538553-303888488.png" alt="img"></p><h2 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h2><p>简单说就是方便管理配置，假如以后要修改 application的配置，就不要一个一个去修改了，直接统一修改而且还不需要重启，直接就是热更新。</p><p>在Nacos配置管理的配置列表里新建一个配置并发布：（ID命名也是有规矩的，看等下的代码就知道了）</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001015149646-717876467.png" alt="img"></p><p>对了上图的dateformat前面的空格打多了，只有两个，我找了一下午的bug。</p><p>配置获取步骤：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202310/3018339-20231001015542637-1091654083.png" alt="img"></p><p>所以先在recoures创建bootstrap.yml，启动springboot时配置文件的优先级会高于application.yml(PS:在springcloud 的版本高于2020.x时会默认禁用bootstrap，需要先在pom里引入spring-cloud-alibaba-bootstrap 的依赖)。先在userservice 里引入maven坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--        nacos的配置依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再在bootstrap.yml里配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment">#nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment">#文件后缀名</span></span><br></pre></td></tr></table></figure><p>然后在UserController里面编写一段时间显示的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//格式化返回当前时间</span></span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>通过@Value 读取配置时实现热更新：</strong>如果是通过 @Value 来读取配置的，此时只需在使用 @Value 注入的变量所在类上添加注解 @RefreshScope 即可，此时你在 nacos 配置中心修改配置并发布后，可以发现服务能自动接收到一些更新信息，类似下图，此时也就实现了配置热更新，此时再访问微服务的接口，可以看到返回的信息已经发生了改变。或者使用 @ConfigurationProperties 来读取配置时，微服务读取配置中心的配置可以自动实现热更新，无需进行其他操作。</p><h3 id="nacos-集群搭建"><a href="#nacos-集群搭建" class="headerlink" title="nacos 集群搭建"></a>nacos 集群搭建</h3><p>在测试环境下可以以单体模式启动 nacos ，但是 Nacos 在生产环境下都是部署为集群状态的。</p><p>搭建集群的基本步骤：</p><ol><li>搭建数据库，初始化数据库表结构</li><li>下载nacos安装包，修改nacos配置，启动nacos集群</li><li>启动nginx作为反向代理</li></ol><p>下面我们搭建一个以 Nginx 作为负载均衡，nacos 有三个节点的集群，三个nacos节点的 ip 都是 127.0.0.1，端口分别为8845、8846、8847。架构图如下：</p><p><img src="https://img2.imgtp.com/2024/02/07/GxWymVkg.png" alt="img"></p><p>Nacos 默认是将数据存储在内嵌数据库 Derby 中的，该数据库不属于生产可用的数据库，官方推荐的最佳实践是使用带有主从的高可用数据库集群。</p><p>下面我们只以单点的数据库为例来搭建。首先新建一个 mysql 数据库，命名为nacos，而后导入下面的SQL：</p><p>MySQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">    `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">    `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="配置-nacos"><a href="#配置-nacos" class="headerlink" title="配置 nacos"></a>配置 nacos</h3><p>下载 nacos 安装包并解压后即安装完成，下面进行 nacos 集群的配置。</p><p>进入 nacos 安装目录的 conf 目录下，复制配置文件 cluster.conf.example 并重命名为 cluster.conf，给文件 cluster.conf 添加以下内容：</p><ol><li>127.0.0.1:8845</li><li>127.0.0.1.8846</li><li>127.0.0.1.8847</li></ol><p>类似如下：</p><p><img src="https://img2022.cnblogs.com/blog/1424359/202204/1424359-20220427225047487-144604821.png" alt="img"></p><p>然后继续修改 conf&#x2F;application.properties 文件，在文件内添加以下内容，配置数据库连接信息，如下：</p><ol><li>spring.datasource.platform&#x3D;mysql</li><li></li><li>db.num&#x3D;1</li><li></li><li>db.url.0&#x3D;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;nacos?characterEncoding&#x3D;utf8&amp;connectTimeout&#x3D;1000&amp;socketTimeout&#x3D;3000&amp;autoReconnect&#x3D;true&amp;useUnicode&#x3D;true&amp;useSSL&#x3D;false&amp;serverTimezone&#x3D;UTC</li><li>db.user.0&#x3D;root</li><li>db.password.0&#x3D;123456</li></ol><p>以此一个 nacos 节点就已经配置完成，只需将 nacos 复制三份，然后分别修改三个文件夹中的application.properties，将 server.port 分别修改为 8845、8846、8847 即可。</p><p>分别启动这三个 nacos 节点即可，直接双击 bin&#x2F;startup.cmd 文件即可启动，启动结果如下：</p><p><img src="https://img2022.cnblogs.com/blog/1424359/202204/1424359-20220427230643716-927279712.png" alt="img"></p><h3 id="启动Nginx作为反向代理"><a href="#启动Nginx作为反向代理" class="headerlink" title="启动Nginx作为反向代理"></a>启动Nginx作为反向代理</h3><p>上述步骤中启动 nacos 集群后，即可启动一个 Nginx 作为反向代理，nacos 客户端需要访问连接 nacos 服务端时，只需访问 Nginx 的服务即可。</p><p>Nginx 配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">upstream</span> <span class="string">nacos-cluster</span> &#123;</span><br><span class="line">    <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8845;</span></span><br><span class="line">    <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8846;</span></span><br><span class="line">    <span class="string">server</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8847;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">    <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span>  <span class="string">localhost;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">/nacos</span> &#123;</span><br><span class="line">        <span class="string">proxy_pass</span> <span class="string">http://nacos-cluster;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问 <a href="http://localhost/nacos">http://localhost/nacos</a> 即可访问到 nacos 集群，Nginx 会将接收到的请求负载均衡到三个 nacos 节点当中。</p><p>比如 nacos 节点需访问 nacos 集群时，项目配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment"># Nacos地址</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb学习笔记【项目实战】（四）</title>
      <link href="/2023/08/14/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%91%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/08/14/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%91%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><p>**<br>**补充@ RequestBody注解：<a href="https://blog.csdn.net/justry_deng/article/details/80972817">@RequestBody的使用_justry_deng的博客-CSDN博客</a>，四种请求方式的区别：<a href="https://blog.csdn.net/weixin_56921066/article/details/118608143">总结get、put、post、delete的区别和用法_get post put delete_云庄clouder的博客-CSDN博客</a></p><p><img src="https://img2023.cnblogs.com/blog/3018339/202309/3018339-20230913134045711-1468266646.png" alt="img"></p><p><strong>查询员工</strong></p><p>跟之前查询部门一样的，直接EmpController写@GetMapping,Integer id，Emp emp&#x3D;empService.getById(id);success(emp),然后后面就根据idea的提示非常简单。补充一下@RequestBody注解是将数据变为json格式的。</p><p><strong>修改员工</strong></p><p>在查询员工界面显示出来的修改数据</p><p>@PutMapping+@RequestBody(json格式数据传递)+update数据库语句+Service层自动补充更新时间变量。</p><p>XML中SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;update&quot;&gt;</span><br><span class="line">update emp</span><br><span class="line">&lt;set&gt;</span><br><span class="line">&lt;if test=&quot;username != null and username != &#x27;&#x27;&quot;&gt;</span><br><span class="line">username = #&#123;username&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;password != null and password != &#x27;&#x27;&quot;&gt;</span><br><span class="line">password = #&#123;password&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;name != null and name != &#x27;&#x27;&quot;&gt;</span><br><span class="line">name = #&#123;name&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;gender != null&quot;&gt;</span><br><span class="line">gender = #&#123;gender&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;image != null and image != &#x27;&#x27;&quot;&gt;</span><br><span class="line">image = #&#123;image&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;job != null&quot;&gt;</span><br><span class="line">job = #&#123;job&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;entrydate != null&quot;&gt;</span><br><span class="line">entrydate = #&#123;entrydate&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;deptId != null&quot;&gt;</span><br><span class="line">dept_id = #&#123;deptId&#125;,</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;updateTime != null&quot;&gt;</span><br><span class="line">update_time = #&#123;updateTime&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/set&gt;</span><br><span class="line">where id = #&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><p><strong>方式一：</strong></p><p>还是为了方便操作，由于一个一个在类里面改参数很难找，所以就直接将参数定义在一个配置文件里面方便修改，比如OSS的accessKeyId,accessKeySecret，就用SpringBoot自己生成的application.properties拿来配置，比如我要配置阿里云Access的ID:</p><p>application.properties里面：aliyun.oss.accessKeyId&#x3D;xxxxxxxx</p><p>然后再在AliOSSutils类里面将定义的accessKeyId的值去掉，并在上面加上@Value(“${aliyun.oss.accessKeyId}”)</p><p><strong>方式二：</strong></p><p>使用yml进行配置，在resources文件夹下application.yml文件，yml配置时需要缩进，比如我要配置服务器端口号：</p><p>server:<br>port: 9000</p><p><strong>@ConfigurationProperties注解</strong></p><p>就是不用一个一个写@Value注解了，但是没多大用除非变量很多。方法就是在对应类的包下创建一个类，里面再定义private变量并加上@Date,@Component,@ConfigurationProperties(prefix &#x3D; “aliyun.oss”)这里的prefix里面写配置文件里面的最后一个逗号(或yml里面的冒号)的前面的，比如我这里配置的是AliOSSUtils里面的bucketName，然后再在AliOSSUtils里面去掉原来的 bucketName并加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private AliOSSProperties aliOSSProperties;</span><br></pre></td></tr></table></figure><p>然后再在方法里定义String bucketName&#x3D;aliOSSProperties.getBucketName();</p><h2 id="—-登录系统—"><a href="#—-登录系统—" class="headerlink" title="—-登录系统—-"></a>—-<strong>登录系统</strong>—-</h2><p>在Controller层创建一个 LoginController类专门用来登录，里面加上基本的@RestController等注解，然后登录请求方式为POST，需要传递Emp的参数，就Emp e&#x3D;empService.login(emp);最后返回值为:(然后跟以前一样依样画葫芦)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return e!=null?Result.success():Result.error(&quot;用户名或密码错误&quot;);</span><br></pre></td></tr></table></figure><p>EmpMapper里面的Select语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select *from emp where username=#&#123;username&#125; and password=#&#123;password&#125;&quot;)</span><br></pre></td></tr></table></figure><h2 id="—登录校验—"><a href="#—登录校验—" class="headerlink" title="—登录校验—"></a>—<strong>登录校验</strong>—</h2><p>防止登录后再次登录不用输密码，就需要登录校验。使用统一拦截技术可以不用在每个接口都写 if语句，</p><p><strong>会话技术</strong>：用户打开浏览器访问服务器，会话建立，直到一方断开连接，会话结束，在一次会话中可以包含多次请求和响应。</p><p><strong>会话跟踪</strong>：维护浏览器状态的方法，服务器需要识别多次请求是否来自于同一浏览器，以便同一次会话的多次请求间共享数据。</p><p>会话跟踪技术防止白雪，直接不学原始的Cookie和Session方式，直接学<strong>JWT令牌技术</strong>。</p><hr><p>Maven接口下载:<a href="https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt/0.9.1">Maven Repository: io.jsonwebtoken » jjwt » 0.9.1 (mvnrepository.com)</a></p><p>JWT官网：<a href="https://jwt.io/">JSON Web Tokens – jwt.io</a></p><p>先来看代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testJWT()&#123;</span><br><span class="line">Map&lt;String, Object&gt; cliams=new HashMap&lt;&gt;();</span><br><span class="line">cliams.put(&quot;id&quot;,1);</span><br><span class="line">cliams.put(&quot;name&quot;,&quot;何平安&quot;);</span><br><span class="line">String jwt=Jwts.builder()</span><br><span class="line">.signWith(SignatureAlgorithm.HS256,&quot;hepingan&quot;)//签名算法</span><br><span class="line">.setClaims(cliams)//自定义内容</span><br><span class="line">.setExpiration(new Date(System.currentTimeMillis()+3600*100))//设置令牌有效期为1h</span><br><span class="line">.compact();</span><br><span class="line">System.out.println(jwt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个参数，第一个signWith参数直接输HS256回车自动生成,这是JWT官网提供的算法生成，也有其他类型的算法看官网了，后面那个是<strong>密钥</strong>。</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/U3616IJQLXH1VYYW.png" alt="img"></p><p>setClaims里面输入自定义内容，可以是Map集合，然后算法会自动将他转换成字符，setExpiration设置令牌有效期，最后加上.compact();输出后结果复制到JWT官网就可以解码了：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/AQGNZO73OI7DCBLI67Y-1024x344.png" alt="img"></p><p>在Java代码里面解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testParseJWT()&#123;</span><br><span class="line">Claims claims= Jwts.parser()</span><br><span class="line">.setSigningKey(&quot;hepingan&quot;)//密钥</span><br><span class="line">.parseClaimsJws(&quot;eyJhbGciOiJIUzI1NiJ9.eyJuYW1lIjoi5L2V5bmz5a6JIiwiaWQiOjEsImV4cCI6MTY5Mjk3MjYxOH0.gJmcR4cuPNWU9hmuLXm8ucpAJFqZNTe_oqstc0Cb-9k&quot;)</span><br><span class="line">.getBody();</span><br><span class="line">System.out.println(claims);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用JWT自带的Claims类来输出数据， 第一个是密钥，然后是码，getBody是获取整个码（getHeader是获取算法方法）。</p><p><strong>应用到项目中</strong></p><p>在utils软件包下粘贴下面的代码：（就是刚刚写的东西）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import io.jsonwebtoken.Claims;</span><br><span class="line">import io.jsonwebtoken.Jwts;</span><br><span class="line">import io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Map;</span><br><span class="line">public class JwtUtils &#123;</span><br><span class="line"></span><br><span class="line">private static String signKey = &quot;itheima&quot;;</span><br><span class="line">private static Long expire = 43200000L;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 生成JWT令牌</span><br><span class="line"> * @param claims JWT第二部分负载 payload 中存储的内容</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line"> public static String generateJwt(Map&lt;String, Object&gt; claims)&#123;</span><br><span class="line">String jwt = Jwts.builder()</span><br><span class="line">.addClaims(claims)</span><br><span class="line">.signWith(SignatureAlgorithm.HS256, signKey)</span><br><span class="line">.setExpiration(new Date(System.currentTimeMillis() + expire))</span><br><span class="line">.compact();</span><br><span class="line">return jwt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 解析JWT令牌</span><br><span class="line"> * @param jwt JWT令牌</span><br><span class="line"> * @return JWT第二部分负载 payload 中存储的内容</span><br><span class="line"> */</span><br><span class="line"> public static Claims parseJWT(String jwt)&#123;</span><br><span class="line">Claims claims = Jwts.parser()</span><br><span class="line">.setSigningKey(signKey)</span><br><span class="line">.parseClaimsJws(jwt)</span><br><span class="line">.getBody();</span><br><span class="line">return claims;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再在之前的login 接口改成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public Result login(@RequestBody Emp emp)&#123;</span><br><span class="line">log.info(&quot;员工登录：&#123;&#125;&quot;,emp);</span><br><span class="line">Emp e=empService.login(emp);</span><br><span class="line"></span><br><span class="line">if(e!=null)&#123;</span><br><span class="line">Map&lt;String, Object&gt; claims=new HashMap&lt;&gt;();</span><br><span class="line">claims.put(&quot;id&quot;,emp.getId());</span><br><span class="line">claims.put(&quot;name&quot;,emp.getName());</span><br><span class="line"></span><br><span class="line">String jwt=JwtUtils.generateJwt(claims);</span><br><span class="line">return Result.success(jwt);</span><br><span class="line">&#125;</span><br><span class="line">return Result.error(&quot;用户名或密码错误&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在以后每一次请求时都会先看 JWT令牌，按F12–&gt;网络–&gt;请求–&gt;dept里找到Token就可以看到令牌了。</p><h2 id="—Filter—"><a href="#—Filter—" class="headerlink" title="—Filter—"></a><strong>—Filter—</strong></h2><p>过滤器，可以把请求拦截下来，只有经过过滤器才能请求。（就是网络安全类的）</p><p>先定义一个 Filter类，然后加上@WebFilter注解，配置拦截资源路径，引导类（启动类）加上@ServletComponentScan注解开启Servlet组件支持。</p><p>Filter 类单独创建个包在top.hepingan下吧,implements的Filter记住要选 servlet,(import jakarta.servlet.*;)然后直接实现三个方法。</p><p>@WebFilter(urlPatterns &#x3D; “&#x2F;*”)是指拦截全部请求。然后限制运行再去请求直接全部拦截了。</p><p>所以就需要添加放行操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filterChain.doFilter(servletRequest,servletResponse);//放行</span><br></pre></td></tr></table></figure><p>一个WEB程序可以有多个filter，执行循序根据类型顺序（A,B,C…排下去）。</p><p><strong>应用到案例当中去：</strong></p><p>先看源码（类在filter软件包下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@WebFilter(urlPatterns = &quot;/*&quot;)</span><br><span class="line">public class LoginCheckFilter implements Filter &#123;</span><br><span class="line">@Override</span><br><span class="line">public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">HttpServletRequest request=(HttpServletRequest) servletRequest;</span><br><span class="line">HttpServletResponse response=(HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">//获取请求url</span><br><span class="line"> String url= request.getRequestURL().toString();</span><br><span class="line">log.info(&quot;请求的url:&quot;+url);</span><br><span class="line"></span><br><span class="line">//判断url是否存在login，如果有放行</span><br><span class="line"> if (url.contains(&quot;login&quot;))&#123;</span><br><span class="line">log.info(&quot;登录操作，放行...&quot;);</span><br><span class="line">filterChain.doFilter(request,response);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//判断令牌是否存在</span><br><span class="line"> String jwt=request.getHeader(&quot;token&quot;);</span><br><span class="line">if(!StringUtils.hasLength(jwt))&#123;</span><br><span class="line">log.info(&quot;请求头token为空，返回未登录的信息&quot;);</span><br><span class="line">Result error=Result.error(&quot;NOT_LOGIN&quot;);</span><br><span class="line">String notLogin=JSONObject.toJSONString(error);</span><br><span class="line">response.getWriter().write(notLogin);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//解析 token</span><br><span class="line"> try &#123;</span><br><span class="line">JwtUtils.parseJWT(jwt);</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">log.info(&quot;解析令牌失败，返回未登录错误信息&quot;);</span><br><span class="line">Result error=Result.error(&quot;NOT_LOGIN&quot;);</span><br><span class="line">String notLogin=JSONObject.toJSONString(error);</span><br><span class="line">response.getWriter().write(notLogin);</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.info(&quot;令牌合法，放行&quot;);</span><br><span class="line">filterChain.doFilter(request,response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先获取请求的url，就是请求方法的https地址，然后解析里面有没有login，因为登录操作不用解析令牌就直接放行，然后解析令牌头是否存在，如果存在就解析整个令牌，如果令牌合法就放行。错误则给前端返回”NOT_LOGIN”.</p><h2 id="—Interceptor–"><a href="#—Interceptor–" class="headerlink" title="—Interceptor–"></a><strong>—Interceptor–</strong></h2><p>拦截器，跟过滤器差不多的，用来动态拦截控制器的执行。</p><p><strong>快速入门</strong></p><p>先定义拦截器：创建类：Interceptor.LoginCheckInterceptor，接口：HandlerInterceptor，然后按crtrl+O重写全部方法，第一个是<em>目标资源方法运行前放行</em>，第二个是<em>标资源方法运行后运行</em>，第三个是<em>视图渲染完毕后运行，最后运行</em>。然后再在top.hepingan下创建类：config.WebConfig，里面接口：WebMvcConfiguer，然后实现方法：addInterceptors，然后注册一个拦截器:private LoginCheckInterceptor loginCheckInterceptor;然后再在实现方法里面改为：registry.addInterceptor(loginCheckInterceptor).addPathPatterns(“&#x2F;**”);</p><p>注意在Interceptor里面调用全部请求为&#x2F;**，Filter里面为&#x2F;*，然后将之前的 Filter的@WebFilter注释掉防止冲突，最后启动项目，就之前Filter那个 login请求发送就ok。</p><p><em><strong>拦截路径</strong></em>：‘&#x2F;*’为一级路径，只能拦截&#x2F;dept,&#x2F;emp的请求，&#x2F;dept&#x2F;1就不能拦截。’&#x2F;**’为全部拦截，啥都能匹配。&#x2F;depts&#x2F;**则是&#x2F;depts下的全部路径，&#x2F;depts&#x2F;*则是depts下的一级路径。</p><p>Filter与Interceptor的关系：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/1233962503__91f4fbebd7ae560a910ff5dcacbb50c3_304711970_58124816930802402_0_wifi_0-1024x576.jpg" alt="img"></p><p><strong>实操到项目</strong></p><p>只修改Interceptor的第一个实现方法：跟Filter的差不多，先复制过来然后去掉定义的Http的变量，然后放行就把return值设为true，不放行设置为false。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Override//目标资源方法运行前放行</span><br><span class="line">public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">System.out.println(&quot;preHandle...&quot;);</span><br><span class="line">//获取请求url</span><br><span class="line"> String url= request.getRequestURL().toString();</span><br><span class="line">log.info(&quot;请求的url:&quot;+url);</span><br><span class="line"></span><br><span class="line">//判断url是否存在login，如果有放行</span><br><span class="line"> if (url.contains(&quot;login&quot;))&#123;</span><br><span class="line">log.info(&quot;登录操作，放行...&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//判断令牌是否存在</span><br><span class="line"> String jwt=request.getHeader(&quot;token&quot;);</span><br><span class="line">if(!StringUtils.hasLength(jwt))&#123;</span><br><span class="line">log.info(&quot;请求头token为空，返回未登录的信息&quot;);</span><br><span class="line">Result error=Result.error(&quot;NOT_LOGIN&quot;);</span><br><span class="line">String notLogin= JSONObject.toJSONString(error);</span><br><span class="line">response.getWriter().write(notLogin);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//解析 token</span><br><span class="line"> try &#123;</span><br><span class="line">JwtUtils.parseJWT(jwt);</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">log.info(&quot;解析令牌失败，返回未登录错误信息&quot;);</span><br><span class="line">Result error=Result.error(&quot;NOT_LOGIN&quot;);</span><br><span class="line">String notLogin=JSONObject.toJSONString(error);</span><br><span class="line">response.getWriter().write(notLogin);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.info(&quot;令牌合法，放行&quot;);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候再去访问网址就直接返回到登录界面了。</p><h2 id="—异常处理—"><a href="#—异常处理—" class="headerlink" title="—异常处理—"></a><strong>—异常处理—</strong></h2><p>目前存在的异常：往新增部门新增相同的名字的部门，会发现浏览器没反应（原因就是SQL语句创建name的时候已设置为unique，不能重复）。</p><p>这时就往top.hepingan包下创建类Exception.GlobalException，然后里面编写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@RestControllerAdvice</span><br><span class="line">public class GlobalException &#123;</span><br><span class="line">@ExceptionHandler(Exception.class)</span><br><span class="line">public Result ex(Exception exception)&#123;</span><br><span class="line">exception.printStackTrace();</span><br><span class="line">return Result.error(&quot;操作失败，请联系何平安~&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Exception.class是指捕获全部异常，也可以改成其他的什么IOEx啥的。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb学习笔记【项目实战】（三）</title>
      <link href="/2023/07/22/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%91%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/07/22/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%90%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E3%80%91%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><p>科普一下htpps各种错误代码：<a href="https://zhuanlan.zhihu.com/p/31674574">常见HTTP错误代码大全 – 知乎 (zhihu.com)</a></p><p><strong>环境搭建&#x2F;基础准备</strong></p><p>创建如下的文件</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/651JE8D9C1GZSO.png" alt="img"></p><p>配置MySQL数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-- 部门管理</span><br><span class="line">create table dept(</span><br><span class="line">    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name varchar(10) not null unique comment &#x27;部门名称&#x27;,</span><br><span class="line">    create_time datetime not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;部门表&#x27;;</span><br><span class="line">insert into dept (id, name, create_time, update_time) values(1,&#x27;学工部&#x27;,now(),now()),(2,&#x27;教研部&#x27;,now(),now()),(3,&#x27;咨询部&#x27;,now(),now()), (4,&#x27;就业部&#x27;,now(),now()),(5,&#x27;人事部&#x27;,now(),now());</span><br><span class="line">-- 员工管理(带约束)</span><br><span class="line">create table emp (</span><br><span class="line">  id int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">  username varchar(20) not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">  password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">  name varchar(10) not null comment &#x27;姓名&#x27;,</span><br><span class="line">  gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">  image varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">  job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,</span><br><span class="line">  entrydate date comment &#x27;入职时间&#x27;,</span><br><span class="line">  dept_id int unsigned comment &#x27;部门ID&#x27;,</span><br><span class="line">  create_time datetime not null comment &#x27;创建时间&#x27;,</span><br><span class="line">  update_time datetime not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br><span class="line">INSERT INTO emp</span><br><span class="line">(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES</span><br><span class="line">(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),</span><br><span class="line">(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),</span><br><span class="line">(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),</span><br><span class="line">(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),</span><br><span class="line">(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),</span><br><span class="line">(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),</span><br><span class="line">(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),</span><br><span class="line">(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),</span><br><span class="line">(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),</span><br><span class="line">(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),</span><br><span class="line">(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),</span><br><span class="line">(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),</span><br><span class="line">(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());</span><br></pre></td></tr></table></figure><p>可以看到SQL语句里面的dept和emp的变量，就分别在pojo里的Dept and Emp里定理对应的私有型变量，命名规则为驼峰型，并添加上lombok注解省略简单方法。</p><p>配置application.properties文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#驱动类名称</span><br><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">#数据库连接的url</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/tlias</span><br><span class="line">#连接数据库的用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">#连接数据库的密码</span><br><span class="line">spring.datasource.password=1234</span><br><span class="line">#配置mybatis的日志, 指定输出到控制台</span><br><span class="line">mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br><span class="line">#开启mybatis的驼峰命名自动映射开关 a_column ------&gt; aCloumn</span><br><span class="line">mybatis.configuration.map-underscore-to-camel-case=true</span><br></pre></td></tr></table></figure><p><strong>使用Restful开发规范</strong>，<strong>前端请求方式：</strong></p><p><a href="https://localhost:8080/users/1">https://localhost:8080/users/1</a> (GET:查询id为1的用户；DELECT：删除id为1的用户)</p><p><a href="https://localhost:8080/users">https://localhost:8080/users</a> （POST:新增&#x2F;修改用户）</p><p>Result类：用作于统一的数据操作响应的返回类型，看代码就懂了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public class Result &#123;</span><br><span class="line">private Integer code;//响应码，1 代表成功; 0 代表失败</span><br><span class="line">private String msg; //响应信息 描述字符串</span><br><span class="line">private Object data; //返回的数据</span><br><span class="line"></span><br><span class="line">//增删改 成功响应</span><br><span class="line">public static Result success()&#123;</span><br><span class="line">return new Result(1,&quot;success&quot;,null);</span><br><span class="line">&#125;</span><br><span class="line">//查询 成功响应</span><br><span class="line">public static Result success(Object data)&#123;</span><br><span class="line">return new Result(1,&quot;success&quot;,data);</span><br><span class="line">&#125;</span><br><span class="line">//失败响应</span><br><span class="line">public static Result error(String msg)&#123;</span><br><span class="line">return new Result(0,msg,null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加查询系统</strong></p><p>原始记录日志方式：private static Logger <em>log</em>&#x3D; LoggerFactory.<em>getLogger</em>(DeptController.class);有了lombok可以直接在Controller类上使用Slf4j注解来自动创建log日志；</p><p>原始指定值和请求方法：@RequestMapping(value &#x3D; “&#x2F;dept”,method &#x3D; RequestMethod.GET) &#x2F;&#x2F;指定请求方式为GET；直接新的注解：**@GetMapping**(“&#x2F;dept”) &#x2F;&#x2F;直接使用Get&#x2F;Post&#x2F;…Mapping就可以省略method后面的。Java像是面向注解编程…</p><p>DeptController类：通过前端请求GET型的depts指令，调用Result类型的 list方法，创建一个DeptServicelmpl类的list()方法的集合用于输出，并将结果返回给前端。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private DeptServicelmpl deptService;</span><br><span class="line"></span><br><span class="line">@GetMapping(&quot;/depts&quot;)   /**直接使用Get/Post/...Mapping就可以省略method后面的*/</span><br><span class="line">    public Result list()&#123;</span><br><span class="line">        log.info(&quot;查询全部部门数据&quot;);</span><br><span class="line"></span><br><span class="line">        List&lt;Dept&gt; deptList=deptService.list();</span><br><span class="line">        return Result.success(deptList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>DeptService接口里面：定义了一个Dept类的集合的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Dept&gt; list();</span><br></pre></td></tr></table></figure><p>DeptServicelmpl接口类：重新list()方法，里面返回DepMapper类的list()方法的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class DeptServicelmpl implements DeptService &#123;</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">private DeptMapper deptMapper;</span><br><span class="line">@Override</span><br><span class="line">public List&lt;Dept&gt; list() &#123;</span><br><span class="line">return deptMapper.list();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptMapper接口：list()方法为调用SQL的select查询语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mapper</span><br><span class="line">public interface DeptMapper &#123;</span><br><span class="line">@Select(&quot;select *from dept&quot;)</span><br><span class="line">List&lt;Dept&gt; list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说就是要熟悉三层架构，层层套娃，Controller类调用Service类，Service类再调用Mapper类的方法，然后该方法又返回给Service，再返回给Controller，最后返回给前端。用postman可以输入<a href="https://localhost:8080/depts%E6%B5%8B%E8%AF%95%E4%B8%8B%E5%93%8D%E5%BA%94%E3%80%82">https://localhost:8080/depts测试下响应。</a></p><p><strong>前后端联调</strong></p><p>首先下载该项目的前端文件：<a href="https://pan.baidu.com/s/1w0b-MJ33WhzNEwXNgB9EKw?pwd=1234%EF%BC%8C%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9A1234">https://pan.baidu.com/s/1w0b-MJ33WhzNEwXNgB9EKw?pwd=1234，提取码：1234</a></p><p>将zip解压到一个全英文路径的文件夹，并打开里面的exe文件，打开任务管理器如果有这个程序在后台说明就运行成功了，该程序会自动占用一个90端口。打开浏览器输入localhost:90，点击部门管理，如果有结果说明就成功了！可以打开F12查看网络，是通过Tomcat将90端口转换为8080端口的。</p><p><strong>删除部门系统</strong></p><p>删除方法就需要前端请求时附上一个id了，且返回给前端的数据不需要日志（date），所有就用Result返回类中的success无参方法了。</p><p>一样的，Controller层：这里的**@PathVariable**注解是用于传递上面的{id}的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@DeleteMapping(&quot;/depts/&#123;id&#125;&quot;)</span><br><span class="line">public Result delete(@PathVariable Integer id)&#123;</span><br><span class="line">log.info(&quot;根据id删除部门:&#123;&#125;&quot;,id);</span><br><span class="line">deptService.delect(id);</span><br><span class="line">return Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptService接口：定义一个有参的方法（id）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void delect(Integer id);</span><br></pre></td></tr></table></figure><p>DeptServicelmpl类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void delect(Integer id)&#123;</span><br><span class="line">deptMapper.delectById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DeptMapper类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Delete(&quot;delete from dept where id=#&#123;id&#125;&quot;)</span><br><span class="line">void delectById(Integer id);</span><br></pre></td></tr></table></figure><p>总之就是套娃…..会了一个其他的几乎也就全会。<strong>请求方式是DELECT了注意哦~</strong></p><p><strong>新增部门</strong></p><p>请求参数就一个部门名字，因为id是自动生成，create_time和update_time也是根据创建时间生成。请求类型为POST。</p><p>Controller:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(&quot;/depts&quot;)</span><br><span class="line">public Result add(@RequestBody Dept dept)&#123;</span><br><span class="line">log.info(&quot;添加部门:&#123;&#125;&quot;,dept);</span><br><span class="line">deptService.add(dept);</span><br><span class="line">return Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service:(接口省了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void add(Dept dept) &#123;</span><br><span class="line">dept.setCreateTime(LocalDateTime.now());</span><br><span class="line">dept.setUpdateTime(LocalDateTime.now());</span><br><span class="line">deptMapper.insert(dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Insert(&quot;INSERT INTO dept (name, create_time, update_time) value (#&#123;name&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br><span class="line">void insert(Dept dept);</span><br></pre></td></tr></table></figure><p>postman我这样编辑：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/W0PM@33WI70VTXL_6.png" alt="img"></p><p><strong>分页查询功能</strong></p><p>由于起始索引有变化(（页码-1）*每页展示记录数 )，所以需要前端传递一个页码数，另外前端还需要传递‘每页展示记录数’的参数。</p><p>先在pojo里创建个PageBean类用于定义参数，就跟之前的Dept一样，需要添加上@Date等注解。定义的变量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private Long total;//总记录数</span><br><span class="line">private List rows;//数据列表</span><br></pre></td></tr></table></figure><p>先在Controller类定义@GetMapping的方法，因为要传递参数所以就要用有参的嘛，参数就这么定义：@RequestParam注解替代了原始的if语句，直接添加默认值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@RequestParam(defaultValue = &quot;1&quot;) Integer page,@RequestParam(defaultValue = &quot;10&quot;) Integer pageSize</span><br></pre></td></tr></table></figure><p>EmpController类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(&quot;/emps&quot;)</span><br><span class="line">public Result page(@RequestParam(defaultValue = &quot;1&quot;) Integer page,</span><br><span class="line">                   @RequestParam(defaultValue = &quot;10&quot;) Integer pageSize)&#123;</span><br><span class="line">log.info(&quot;分页查询,参数：&#123;&#125;,&#123;&#125;&quot;,page,pageSize);</span><br><span class="line">PageBean pageBean=empService.page(page,pageSize);</span><br><span class="line">return Result.success(pageBean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpServiceImpl接口类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public PageBean page(Integer page, Integer pageSize) &#123;</span><br><span class="line">Long count=empMapper.count();</span><br><span class="line">Integer start=(page-1)*pageSize;</span><br><span class="line">List&lt;Emp&gt; empList=empMapper.page(start,pageSize);</span><br><span class="line">//封装PageBean对象</span><br><span class="line">PageBean pageBean=new PageBean(count,empList);</span><br><span class="line">return pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmpMapper接口：一个是查询页码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;Select count(*) from emp&quot;)</span><br><span class="line">public Long count();</span><br></pre></td></tr></table></figure><p>一个是查询当前页的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;SELECT *from emp limit #&#123;start&#125;,#&#123;pagesize&#125;&quot;)</span><br><span class="line">public List&lt;Emp&gt; page(Integer start,Integer pagesize);</span><br></pre></td></tr></table></figure><p><strong>PageHelper分页插件：</strong></p><p>目的就是简化Mapper接口和Service层的代码。下载：<a href="https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter/1.4.6">Maven Repository: com.github.pagehelper » pagehelper-spring-boot-starter » 1.4.6 (mvnrepository.com)</a></p><p>Mapper就只写：不用什么limit还要写两个查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;SELECT *from emp&quot;)</span><br><span class="line">public List&lt;Emp&gt; list();</span><br></pre></td></tr></table></figure><p>EmpServiceImpl接口类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public PageBean page(Integer page, Integer pageSize) &#123;</span><br><span class="line">PageHelper.startPage(page,pageSize);</span><br><span class="line">List&lt;Emp&gt; empList=empMapper.list();</span><br><span class="line">Page&lt;Emp&gt; p=(Page&lt;Emp&gt;)empList;</span><br><span class="line">//封装PageBean对象</span><br><span class="line">PageBean pageBean=new PageBean(p.getTotal(),p.getResult());</span><br><span class="line">return pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的类都一样。</p><p><strong>条件分页查询</strong></p><p>查询条件：模糊查询的名字，精确查询的性别，between中间查询的入职日期：eg.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from emp</span><br><span class="line">where name like concat(&#x27;%&#x27;, &#x27;张&#x27;, &#x27;%&#x27;)</span><br><span class="line">and gender = 1</span><br><span class="line">and entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;</span><br><span class="line">order by update_time desc</span><br></pre></td></tr></table></figure><p>EmpController类里面查询方法再添加4个变量：String name,Short gender,@DateTimeFormat(pattern &#x3D; “yyyy-MM-dd”) LocalDate begin,@DateTimeFormat(pattern &#x3D; “yyyy-MM-dd”) LocalDate end，其他地方的看IDEA提示修改就行。Service里也要添加这四个变量。</p><p>EmpServiceImpl接口类里面要注意的是list()里面只需要这新增的四个变量，因为MySQL查询语句里面用不到page和pageSize这两个变量。Mapper接口：public List<Emp> list(String name, Short gender, LocalDate begin, LocalDate end);可以看出是使用了XML映射文件才没写@Selcet，XML文件里面的SQL查询语句（位置就在resources里面的top&#x2F;hepingan&#x2F;mapper）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;mapper namespace=&quot;top.hepingan.mapper.EmpMapper&quot;&gt;</span><br><span class="line">&lt;select id=&quot;list&quot; resultType=&quot;top.hepingan.pojo.Emp&quot;&gt;</span><br><span class="line">select *</span><br><span class="line">from emp</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;name!=null&quot;&gt;</span><br><span class="line">name like concat(&#x27;%&#x27;, #&#123;name&#125;, &#x27;%&#x27;)</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;gender!=null&quot;&gt;</span><br><span class="line">and gender = #&#123;gender&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;begin!=null and end!=null&quot;&gt;</span><br><span class="line">and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">order by update_time desc </span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>查询语句：<a href="http://localhost:8080/emps?page=1&pagesize=10&name=%E5%BC%A0&gender=1&begin=2000-01-01&end=2010-01-01">http://localhost:8080/emps?page=1&amp;pagesize=10&amp;name=张&amp;gender=1&amp;begin=2000-01-01&amp;end=2010-01-01</a></p><p><strong>删除操作</strong></p><p>前端请求参数：&#x2F;emp&#x2F;{ids}，请求方式：DELECT</p><p>创建@DeleteMapping(“emps&#x2F;{ids}”)注解的方法delete(@PathVariable List<Integer> ids)。然后直接调用empService的delete(ids)方法，点击报错的直接在Service里生成代码，接口类里面的重写就一行empMapper.delete(ids);然后再点报错的直接在Mapper里创建好代码，最后再在XML文件编写删除的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;delete id=&quot;delete&quot;&gt;</span><br><span class="line">delete</span><br><span class="line">from emp</span><br><span class="line">where id in</span><br><span class="line">&lt;foreach collection=&quot;ids&quot; item=&quot;id&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot;&gt;</span><br><span class="line">#&#123;id&#125;</span><br><span class="line">&lt;/foreach&gt;</span><br><span class="line">&lt;/delete&gt;</span><br></pre></td></tr></table></figure><p>嗯学会了一种方法其他的都简单。</p><p><strong>新增员工操作</strong></p><p>前端请求方式post,json格式输入，要求有image,username,name,gender,job,entrydate,deptId。</p><p>数据比较多，之前创建的Emp就派上用场了，由于是json格式，所以就需要添加@RequestBody注解，调用Service的方法，创建Service方法，接口类定义基础的create_time and update_time，调用Mapper的方法，这里的Mapper里的添加方法就不用XML映射了，直接:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Insert(&quot;INSERT INTO emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time)&quot; +</span><br><span class="line">&quot;value (#&#123;username&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;image&#125;,#&#123;job&#125;,#&#123;entrydate&#125;,#&#123;deptId&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br><span class="line">void insert(Emp emp);</span><br></pre></td></tr></table></figure><p><strong>上传文件</strong></p><p><strong>上传到本地存储</strong></p><p>在resources&#x2F;static里面创建upload.html文件，里面编写：前端文件不用管。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;上传文件&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">姓名: &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;br&gt;</span><br><span class="line">年龄: &lt;input type=&quot;text&quot; name=&quot;age&quot;&gt;&lt;br&gt;</span><br><span class="line">头像: &lt;input type=&quot;file&quot; name=&quot;image&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>再在Controller里面创建一个UploadController类，里面编写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@RestController</span><br><span class="line">public class UploadController &#123;</span><br><span class="line">@PostMapping(&quot;/upload&quot;)</span><br><span class="line">public Result upload(String name, Integer age, MultipartFile image)&#123;</span><br><span class="line">log.info(&quot;上传文件：&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;,name,age,image);</span><br><span class="line">return Result.success();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MultipartFile 函数就上传文件的格式。这里定义的变量名要和前端给的名字一样。</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的故事（大一下）</title>
      <link href="/2023/07/15/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%B8%80%E4%B8%8B%EF%BC%89/"/>
      <url>/2023/07/15/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%B8%80%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>大一下学期我便化生成IT程序设计大王，这才是码农生活的开始！<br>刚刚开学时开始在搞我的Blender，但后来刷到了unity游戏开发这个新世界大门，对了寒假的时候我还玩过虚幻5，但是我的电脑真的太炸了，带不动，直接删了。操作跟我的Blender还是有很多相似的，但是就是需要敲代码了，痛苦开始，一开始是拿c++来写的，毕竟上学期学的c语言，这学期的java皮都没摸到。但是这个c++是高难度的啊，而且我c++也只学了基础函数和语法，写这些还是需要高级函数和unity自带的函数库要学习，我就抄了抄网上的代码，但是还是很难，毕竟文件位置和绑定关系也是绕脑子的，简简单单做了个FPS游戏就再也没动过了…..<br>真正有成就的事情来了，那就是web前端开发！迄今为止自学学得最好的一个技能，这个网站就是这么来的。其实web前端也没学多少，把html学完了，css学了一些多，JavaScript没动，最懊恼的就是服务器网站搭建了，整个过程花了我一个月时间，去看看我之前写的网站搭建流程分享就知道有多麻烦了。但最后都成功了，这条路我走下来了….<br>之后摆烂了，到5月份底时我了解了数据库，学习了个基础，后来我们要求做期末java课程设计，很多人都想到了什么管理系统，可是制作这种管理系统需要用到数据库，嘿嘿嘿，我这就不多了个学习MYSQL数据库的理由了吗，我就又学了个一周，也没学多少，把那些必要的语句背下来了。然后就亲手敲了300多行的代码，也是敲了2天的样子，毕竟是第一次手敲MYSQL与java的连接代码，答辩上我还现场手敲代码给老师看，证明是我自己会的，还问我数据库是怎么会的，我说自学的，果然就给我了个高分，班上第一哦～，还让我有个室友白嫖了这个高分。但是我这个期末设计有个缺点就是没有界面设计，我打算在暑假把这个给学了。<br>至于这个暑假干什么，我打算接点小单子来耍耍，然后搞个公众号和软件，弄个“自动挖矿机”，然后在自媒体平台上宣传宣传，争取下学期不用管它就可以听到微信收款到账的声音。</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb学习笔记（二）</title>
      <link href="/2023/07/15/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/07/15/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><p><strong>—Mybatis—</strong></p><p>一款持久层框架，简化JDBC。</p><p><strong>认识使用Mybatis查询mysql数据库中的表的信息</strong>：</p><p>创建MyBatis工程：IDEA创建sping工程，在SQL中选择Mybatis Framwork和Mysql Driver。连接数据库，再在main软件包下新建一个类，我的类名叫User,里面编写查询的表的所有数据的变量名，例如我要查询hh数据库中的student表，内容有：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/4AWGHBI_8DHB7CRATDH.png" alt="img"></p><p>我就需要定义如下的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private String name;</span><br><span class="line">private Integer schoolid;</span><br><span class="line">private String password;</span><br><span class="line">private Integer score;</span><br><span class="line">private String sex;</span><br><span class="line">private Integer id;</span><br></pre></td></tr></table></figure><p>当然还要创建getter,setter,toString和构造函数。然后在Mybatis自动创建的main下的resoures下的application.properties里编写下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</span><br><span class="line">spring.datasource.url=jdbc:mysql://localhost:3306/hh#这里记得换自己的数据库名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=1234#这里也要换</span><br></pre></td></tr></table></figure><p>这样就不用写JDBC里面那一大堆连接代码了。然后再在main里面创建一个<strong>接口</strong>：mapper.UserMapper（会自动创建一个包名），这就相当于三层类里面的Dao类，当做一个容器代理实现类对象，里面编写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Mapper//运行时自动生成该接口的实现类对象（代理对象）。并且将该对象交给IOC容器管理</span><br><span class="line">public interface UserMapper &#123;</span><br><span class="line">@Select(&quot;select *from student&quot;)</span><br><span class="line">public List&lt;User&gt; list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个技巧可以选中mysql语句右键显示上下文再选择添加&#x2F;编辑注入语言，然后选择Mysql，就可以提示编写MySQL的语法了。里面然后打开test包里自动创建的那个类，里面编写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest//springboot整合单元测试的注解</span><br><span class="line">class MybatisStudyApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line">    @Test</span><br><span class="line">    public void testListUser() &#123;</span><br><span class="line">        List&lt;User&gt; userList=userMapper.list();</span><br><span class="line">        userList.stream().forEach(user -&gt;&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行此类就可以看到student表的数据以集合形式展示啦~</p><p><strong>数据库连接池</strong>：</p><p>跟线程池差不多的东西，因为有很多用户访问数据库，所以就直接创建一个池来提高性能，而且还可以让长时间不访问数据库的用户的连接断开，腾出空间来。</p><p>spring默认的数据库连接池：hikari</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/P8RJX55OXLYHH@NBEB0-1024x82.png" alt="img"></p><p>或者切换阿里巴巴的Druid数据库连接池：先下载jar然后添加到项目中<a href="https://mvnrepository.com/artifact/com.alibaba/druid/1.2.8">Maven Repository: com.alibaba » druid » 1.2.8 (mvnrepository.com)</a>，然后在pom.xml中添加下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>lombok工具包：不用写什么setter,getter,toString,equle,hashCode啥的，直接一个@Data注解搞定,另外无参有参分别为：@NoArgsConstructor,@AllArgsConstructor</p><p>下载jar：<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok/1.18.24">Maven Repository: org.projectlombok » lombok » 1.18.24 (mvnrepository.com)</a>，然后导入项目并在pom.xml输入（不用写 version，springboot 会自动管理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>—Mybatis基础操作—</strong></p><p>使用Mybatis对数据库进行增删改操作：eg:在main下自动生成的包下创建Mapper.EmpMapper（这只是我的名字）的接口类，此接口添加@Mapper注解，创建一个方法用作于增&#x2F;删&#x2F;改，并且添加上注解，增删改的注解分别为@Insert,@Delect,@Update，在注解旁边的括号输入要运行的Mysql语句，建议使用预编译SQL，需要把参数的值改为#{XXX}（另一种时${xxx}，这种就是直接拼接在MySQL语句上了，而非前面的#是引入参数）的样子，相当于以前写JDBC的”?”，然后再在方法里定义对应类型的参数。再在test测试类里面定义一个私有的EmpMapper引用数据类型的变量，并添加上@Autowired的注解，然后创建一个方法再调用EmpMapper里面的增删改方法：empmapper.delect(之前定义的参数)。</p><p>如果预编译里面的参数过多，比如增加，可以创建一个Emp（也是我自己取的）类用于定义里面的变量，然后再在增加方法的参数直接创建这个类的变量。注意创建的变量名要和#{XXX}里的一样。查询的话就直接搞个集合来输出吧，因为有可能有多个结果。</p><p>Emp类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class Emp &#123;</span><br><span class="line">private String name;</span><br><span class="line">private Short gender;</span><br><span class="line">private LocalDate enterday;</span><br><span class="line">private String image;</span><br><span class="line">private LocalDateTime createTime;</span><br><span class="line">private LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper接口类里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Insert(&quot;INSERT INTO mybatis.emp(name, gender, enterday, image, create_time, update_time) &quot; +</span><br><span class="line">&quot;VALUES (#&#123;name&#125;,#&#123;gender&#125;,#&#123;enterday&#125;,#&#123;image&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;)&quot;)</span><br><span class="line">public void insert(Emp emp);</span><br></pre></td></tr></table></figure><p>test类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testInsert()&#123;</span><br><span class="line">Emp emp=new Emp();</span><br><span class="line">emp.setName(&quot;hepingan&quot;);</span><br><span class="line">emp.setGender((short) 1);</span><br><span class="line">emp.setEnterday(LocalDate.of(2023,8,2));</span><br><span class="line">emp.setImage(&quot;1.jpg&quot;);</span><br><span class="line">emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">emp.setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">empmapper.insert(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>XML映射文件</strong></p><p>XML映射文件名称要与Mapper接口名一样，并且将XML文件和Mapper接口放置在相同包下（同包同名），在resources下创建三个文件夹就行了，创建目录直接输入com&#x2F;example&#x2F;mapper就行了。新建的XML文件输入：（可以在mybatis中文网查看：<a href="https://mybatis.net.cn/getting-started.html">入门_MyBatis中文网</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper&gt;&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>namespace与Mapper接口全限定名（文件路径）一致，我的是top.hepingan.mapper.EmpMapper；</p><p>例如我要执行select查询语句我就需要在<mapper>里编写：（科普下MySQL的语法：条件like concat(‘%’,’xxx’,’%’)就是指和xxx长得像的东西，比如我查询条件为’何’，那么结果就可以显出’何平安’）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;list&quot; resultMap=&quot;com.example.pojo.Emp&quot;&gt;</span><br><span class="line">select *from hh.emp where emp.work like concat(&#x27;%&#x27;,#&#123;work&#125;,&#x27;%&#x27;)</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>id与Mapper接口中的方法名一致，并保持返回类型一致，resultMap就是单条记录锁封装的类型，比如我Empmapper里面有个方法为public List<Emp> list(String work);那么resultMap就是Emp。</p><p>—<strong>动态SQL</strong>—</p><p>如果搜索时只输入了一个条件，但是SQL语句本身有多个查询条件，其他的查询条件就会为空，就会出错，这时就要用到if标签。</p><p>结构：&lt;if test&#x3D;”name !&#x3D;null”&gt;name like concat(‘%’,’#{name},’%’) </if>，意思就是如果name输入的参数值为空就没有标签里面的语句。</p><p>eg：用name,gender,enterday三个参数查询emp中的数据。这里的where也要用标签是为了防止三条数据都为null或第一条数据为null导致where，and多余。而where标签就可以自动除掉该隐患。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;select&quot;&gt;</span><br><span class="line">select * from emp</span><br><span class="line">&lt;where&gt;</span><br><span class="line">&lt;if test=&quot;name !=null&quot;&gt;</span><br><span class="line">name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;gender !=null&quot;&gt;</span><br><span class="line">and gender =#&#123;gender&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test=&quot;begin !=null and end !=null&quot;&gt;</span><br><span class="line">and enterday between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;/where&gt;</span><br><span class="line">order by update_time</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><strong><foreach>标签</strong>：有点像遍历，比如批量删除操作。各个参数：</p><p>collection:遍历的集合或数组<br>item:遍历出来的每个元素（名字随便）<br>separator:分隔符<br>open:起始符<br>close:结束符</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb学习笔记（一）</title>
      <link href="/2023/07/02/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/07/02/IT%E7%AC%94%E8%AE%B0/java/Javaweb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p> <strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><p><em>web前端的学习推荐地方：</em><a href="https://www.w3school.com.cn/">w3school 在线教程</a></p><p>分享个记笔记的好工具加破解：Typora：<a href="https://www.cnblogs.com/hackettt/p/16335288.html">typora下载和破解（仅供学习） – hackettt – 博客园 (cnblogs.com)</a></p><h2 id="—-JavaScript—"><a href="#—-JavaScript—" class="headerlink" title="—-JavaScript—-"></a><strong>—-JavaScript—-</strong></h2><p>最基础的输出语句：alert(“xxx”);</p><p>控制台输出：console.log(xxx);</p><p>定义变量：var a&#x3D;xxx; –<strong>数据类型</strong>：number:数字，string,boolean不多说，null:对象为空，undefined:声明的变量未初始化时。获取数据类型可以用xxx.typeOf的方法-JS有点像python不用定义数据类型。</p><p>定义一个函数（相当于Java中的方法）：function xxx(a,b){}&#x2F;&#x2F;变量不用定义数据类型</p><p>调用函数：var result&#x3D;xxx(x,y);并输出：alert(xxx);</p><p>另一种方法定义函数：var 方法名&#x3D;function(参数…){}</p><p><strong>JS基础对象：</strong></p><p>数组：Array（数组的元素可以为空）。获取数组长度：.length。一些方法：forEach()：遍历数组中的每个<strong>有值的元素</strong>（普通for循环空的也要遍历），并调用一次传入的函数。push()：将新元素添加到数组末尾，并返回新的长度。splice()：从数组中删除元素。</p><p>ES6箭头函数（相当于Java中的Lambda）：</p><p>arr2.forEach(e &#x3D;&gt; {</p><p>​    console.log(e);</p><p>  });</p><p>字符串对象：String。创建方法：var xxx&#x3D;new String(“…”)或直接var xxx&#x3D;”…”。获取长度：.length。一些方法：charAt：str.charAt(2);获取str下标为2的字符;;;获取指定字符在字符串中的位置:str.indexof(“xxx”);;;去掉字符串中的左右的空格:trim</p><h2 id="—Maven—"><a href="#—Maven—" class="headerlink" title="—Maven—"></a><strong>—Maven—</strong></h2><p>maven官网：<a href="https://maven.apache.org/">Maven – Welcome to Apache Maven</a></p><p>阿里云maven配置下载：JDK11的建议用3.6.1:<a href="https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/">Index of &#x2F;dist&#x2F;maven&#x2F;maven-3&#x2F;3.6.1&#x2F;binaries (apache.org)</a>，选择<a href="https://archive.apache.org/dist/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.zip">apache-maven-3.6.1-bin.zip</a>。JDK17的建议用3.8.1：<a href="https://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/">Index of &#x2F;dist&#x2F;maven&#x2F;maven-3&#x2F;3.8.1&#x2F;binaries (apache.org)</a>，也是选择<a href="https://archive.apache.org/dist/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.zip">apache-maven-3.8.1-bin.zip</a></p><p>安装与配置方法（参考文章：<a href="https://blog.csdn.net/m0_53692627/article/details/128822560">MAVEN的安装与配置教程（超详细版）_maven安装及配置教程_Coder_19zfl的博客-CSDN博客</a>）：</p><p>解压成文件夹打开conf文件夹，用IDEA等运行setting.xml文件，再在55行代码处添加下面的代码：<localRepository>Path</localRepository>。其中path为你存放maven的respone(响应)的文件夹，建议就在apache-maven文件夹里面新建个文件夹。</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/BAAI2IEK4QPCUVRQAM.png" alt="img"></p><p>然后配置阿里云私服地址，详细方法：<a href="https://blog.csdn.net/weixin_44296929/article/details/103564657">Maven仓库配置阿里云私服地址_nexus-aliyun地址_你好像很好吃a的博客-CSDN博客</a></p><p>（Maven3.6.1的需要添加，3.8.1的需要修改）：打开setting.xml，找到<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签<br>在标签中增加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt; alimaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>最后在添加一个环境变量，方法就是先新建一个MAVEN_HOME（maven文件地址）的系统变量，地址就是apache-maven-3.6.1解压maven的文件夹路径，然后再在Path系统变量中新建名叫%MAVEN_HOME%\bin就行了。</p><p>打开windows终端输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v    // 查看maven版本号</span><br></pre></td></tr></table></figure><p>导入Maven工程：文件–&gt;项目结构–&gt;模块–&gt;”+“号–&gt;新建模块。</p><p>Maven的三个坐标：groupId(组织ID)，artifactId(工程ID)，version(版本)</p><p><strong>Maven依赖管理：</strong></p><p><strong>配置</strong>：在pom.xml中编写<denpendencies>标签，再编写<denpendency>回车就自动生成了。输入Maven的三坐标就可以依赖Maven库了，Maven仓库大全：<a href="https://mvnrepository.com/">Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)</a></p><p><strong>传递</strong>：Maven-project2依赖了Maven-project1的资源，Maven-project1又依赖了MavenStudy的资源</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/F6DE4OE@09GGOD588KP.png" alt="img"></p><p><strong>范围</strong>(scope)：<scope>xxx</scope></p><table><thead><tr><th>scope值</th><th>主程序main</th><th>测试程序test</th><th>打包package</th><th>范例</th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>–</td><td>Y</td><td>–</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>–</td><td>servlet-api</td></tr><tr><td>runtime</td><td>–</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><p><strong>生命周期：</strong>一般包括clean清除运行的target文件–&gt;compile恢复生成target文件–&gt;test测试–&gt;package打包–&gt;install安装</p><h2 id="—Web后端开发入门—"><a href="#—Web后端开发入门—" class="headerlink" title="—Web后端开发入门—"></a><strong>—Web后端开发入门—</strong></h2><p><strong>—SpringBoot基础—</strong></p><p>spring官网：<a href="https://spring.io/">Spring | Home</a> Spring含金量：现在的每个JAVA项目99%都有！！！</p><p>在IDEA创建一个SPring Initializr项目，URL先用原始的start.spring.io，JDK建议用17，类型选Maven（版本我用的3.6.1），组织啥的有就写你的，点下一步选择 Web中的Spring web，SpringBoot版本3.0.0以上的JDK11用不了。创建成功！</p><p>在浏览器中调用RequestMapping名输出Hello World!：在src&#x2F;main&#x2F;java&#x2F;组织名包&#x2F;创建一个软件包再创建一个Java类：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/08/F@@2_UUBSVBZTAFL.png" alt="img"></p><p>再在里面编写下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line">@RestController</span><br><span class="line">public class c1 &#123;</span><br><span class="line">@RequestMapping(&quot;/hello&quot;)</span><br><span class="line">public String hello()&#123;</span><br><span class="line">System.out.println(&quot;Hello!&quot;);</span><br><span class="line">return &quot;Hello~&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再运行自动生成的SpringBootStudynewApplication类，在浏览器输入地址：localhost:8080&#x2F;hello。大功告成！</p><p>SpringBoot内嵌Tomcat服务器哦~</p><p>DispatcherServlet：前端控制器</p><p><strong>postman</strong>下载加汉化教程：<a href="https://blog.csdn.net/qq_37368607/article/details/129832802">postman下载与汉化(附直接下载链接)_postman汉化包下载_小雪雪7777的博客-CSDN博客</a></p><p>postman的使用：新建一个工作区，再在URL输入你的localhost地址，再send就可以直接返回值。</p><h3 id="—请求参数—"><a href="#—请求参数—" class="headerlink" title="—请求参数—"></a><strong>—请求参数—</strong></h3><p><strong>简单参数：</strong></p><p>创建一个JAVA类编写下面代码（创建位置就不多说了）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class RequestController &#123;</span><br><span class="line">@RequestMapping(&quot;/simpleParam&quot;)</span><br><span class="line">public String simpleParm(HttpServletRequest request)&#123;</span><br><span class="line">String name= request.getParameter(&quot;name&quot;);</span><br><span class="line">String ageStr= request.getParameter(&quot;age&quot;);</span><br><span class="line">int age=Integer.parseInt(ageStr);</span><br><span class="line">System.out.println(name+&quot;:&quot;+age);</span><br><span class="line">return &quot;OK&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在postman的URL中输入<a href="https://localhost:8080/simpleParam?name=hepingan&age=19%E3%80%82%E5%8F%91%E9%80%81%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%9C%A8IDEA%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%9C%8B%E5%88%B0hepingan:19%EF%BC%8C%E8%BF%99%E6%98%AF%E8%BF%9C%E5%8F%A4%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%B8%8B%E9%9D%A2%E6%97%B6SpringBoot%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A">https://localhost:8080/simpleParam?name=hepingan&amp;age=19。发送就可以在IDEA控制台看到hepingan:19，这是远古方式，下面时SpringBoot的方式：</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;simpleParam2&quot;)</span><br><span class="line">public String simpleParam2(String name,Integer age)&#123;</span><br><span class="line">System.out.println(name+&quot;:&quot;+age);</span><br><span class="line">return &quot;OK&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实体参数"><a href="#实体参数" class="headerlink" title="实体参数"></a>实体参数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//实体参数</span><br><span class="line">*@RequestMapping(&quot;Pojo&quot;) public String Pojo(User user)&#123; System.*out*.println(user); return &quot;Ok&quot;; &#125;</span><br></pre></td></tr></table></figure><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123; <span class="keyword">return</span> address; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123; <span class="built_in">this</span>.address = address; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, address=&quot;</span> + address + <span class="string">&#x27;&#125;&#x27;</span>; &#125; &#125;</span><br></pre></td></tr></table></figure><p>Address类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;` `<span class="keyword">private</span> String province;` `<span class="keyword">private</span> String city;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getProvince</span><span class="params">()</span> &#123;` `<span class="keyword">return</span> province;` `&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProvince</span><span class="params">(String province)</span> &#123;` `<span class="built_in">this</span>.province = province;` `&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;` `<span class="keyword">return</span> city;` `&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;` `<span class="built_in">this</span>.city = city;` `&#125;</span><br><span class="line"><span class="meta">@Override</span>` `<span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;` `<span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +` `<span class="string">&quot;province=&#x27;&quot;</span> + province + <span class="string">&#x27;\&#x27;&#x27;</span> +` `<span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +` `<span class="string">&#x27;&#125;&#x27;</span>;` `&#125;` `&#125;</span><br></pre></td></tr></table></figure><h5 id="数组集合参数"><a href="#数组集合参数" class="headerlink" title="数组集合参数"></a>数组集合参数</h5><p>就是用数组或集合的形式来存储嘛~</p><p>eg：<a href="http://localhost:8080/arrayParam?hobby=sing&hobby=dance&hobby=java%EF%BC%9Bhttp://localhost:8080/listParam?hobby=sing&hobby=dance&hobby=java%EF%BC%9B">http://localhost:8080/arrayParam?hobby=sing&amp;hobby=dance&amp;hobby=java；http://localhost:8080/listParam?hobby=sing&amp;hobby=dance&amp;hobby=java；</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//数组参数</span><br><span class="line">@RequestMapping(&quot;arrayParam&quot;)</span><br><span class="line">public String arraylistParam(String[] hobby)&#123;</span><br><span class="line">System.out.println(Arrays.toString(hobby));</span><br><span class="line">return &quot;Ok&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//集合参数</span><br><span class="line">@RequestMapping(&quot;listParam&quot;)</span><br><span class="line">public String listParam(@RequestParam List&lt;String&gt; hobby)&#123;</span><br><span class="line">System.out.println(hobby);</span><br><span class="line">return &quot;Ok&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>日期参数和JSON参数</strong></p><p>日期要按格式写（yyyy-MM-dd HH:mm:ss），不然postman会报400；json参数就是输入的数据需要按照对应的数据格式填写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//date日期参数</span><br><span class="line">@RequestMapping(&quot;dataParam&quot;)</span><br><span class="line">public String dataParam(@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;) LocalDateTime updateTime)&#123;</span><br><span class="line">System.out.println(updateTime);</span><br><span class="line">return &quot;Ok&quot;;</span><br><span class="line">&#125;</span><br><span class="line">//json参数</span><br><span class="line">@RequestMapping(&quot;jsonParam&quot;)</span><br><span class="line">public String jsonParam(@RequestBody User user)&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line">return &quot;Ok&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>路径参数</strong></p><p>使用@PathVariable注解，方式如下，URL_eg：<a href="http://localhost:8080/path/10/hepingan">http://localhost:8080/path/10/hepingan</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span><br><span class="line">public String pathParam2(@PathVariable Integer id,@PathVariable String name)&#123;</span><br><span class="line">System.out.println(id+&quot;,&quot;+name);</span><br><span class="line">return &quot;OK&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="—分层解藕—"><a href="#—分层解藕—" class="headerlink" title="—分层解藕—"></a><strong>—分层解藕</strong>—</h2><p><strong>三层架构</strong></p><p>前端请求–&gt;Controller层接收请求，响应数据–&gt;Service层逻辑处理–&gt;Dao层数据访问。</p><p>添加IDC的注解：在类外面：@Component，在类里面： @Autowired，作用就是为了不重复修改对象啥的，暂时没啥大用后面再学…</p><p><strong>IDC&#x2F;DI入门</strong></p><p>IOC(inversion of control)，对象的创建控制权由程序自身移到外部（容器），这种思想成为控制反转；DI(dependency injection)，容器为应用程序提供运行时，所依赖的资源，称为依赖注入；Bean对象：IOC容器中创建和管理的对象。</p><p>先在Service层和Dao层上输入@Component注解，表示将当前类交给IOC容器，成为IOC容器中的bean；为Controller和Service注入运行时依赖的对象，需要在对象上添加 @AutoWired注解；</p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通Java学习之路（四）</title>
      <link href="/2023/06/28/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2023/06/28/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><h2 id="—并发包—"><a href="#—并发包—" class="headerlink" title="—并发包—"></a><strong>—并发包—</strong></h2><p>大型企业开发才用，我Java学得差不多以后再来学，主要是有点难，没学泛型与集合…</p><p>练手的ConcurrentHashMap:</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import java.util.HashMap;import java.util.Hashtable;import java.util.concurrent.ConcurrentHashMap;public class bingfa &#123;public static HashMap&lt;String,String&gt; *maps*=new HashMap&lt;&gt;();// public static Map&lt;String,String&gt; maps=new Hashtable&lt;&gt;();public static void main(String[] args) &#123;Runnable r1=new MyRunnable();Thread t1=new Thread(r1,&quot;线程1&quot;);Thread t2=new Thread(r1,&quot;线程2&quot;);t1.start();t2.start();try &#123;t1.join();//让t1跑完,主线程不能竞争t1的CPUt2.join();//让t2跑完,主线程不能竞争t2的CPU&#125; catch (InterruptedException e) &#123;throw new RuntimeException(e);&#125;System.*out*.println(&quot;元素个数:&quot;+*maps*.size());&#125;static class MyRunnable implements Runnable&#123;@Overridepublic void run() &#123;for(int i=1;i&lt;=500000;i++)&#123;bingfa.*maps*.put(Thread.*currentThread*().getName()+i,Thread.*currentThread*().getName()+i);&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></blockquote><h2 id="—Map集合—"><a href="#—Map集合—" class="headerlink" title="—Map集合—"></a><strong>—Map集合—</strong></h2><p>Map集合特点：无序性，不重复性（后面重复的键对应的元素会覆盖前面的整个元素），无索引的，对值无要求都可以为null。一个元素的组成为键和值，一个键对应一个值，就像地图上一个地方对应一个地点名字，所以叫Map集合。</p><p>HashMap：无序，不重复，无索引，值不做要求。经典的用得最多。</p><p>LinkedHashMap：有序，不重复，无索引，值不做要求。</p><p>TreeMap：浮点型的大小比较按照自己的排序，不重复，无索引，值不做要求。</p><p>Map的创建：Map&lt;引用数据类型,引用数据类型&gt; map&#x3D;new HashMap&#x2F;LinkedHashMap&#x2F;TreeMap&lt;&gt;();ps:引用数据类型可以是其他类名的哦~</p><p>添加数据:map.put(xx,xx);</p><p>删除特定元素：map.remove(键);删除全部元素就直接map.clear();</p><p>判断是否包含某个键：map.containsKey(键);</p><p>判断是否包含某个值：map.containsValue(值);</p><p>将maps2的所有元素全部仍到maps中：map.putAll(maps2);</p><p>获取对应键的值：map.get(键);</p><p>Set<String> keys&#x3D;map.keySet();&#x2F;&#x2F;获取全部键的集合,Set无序不重复<br>for (String key: keys){<br>System.<em>out</em>.println(key);<br>}<br>Collection<Integer> values&#x3D;map.values();&#x2F;&#x2F;因为值可能有重复，所以用Collection集合<br>for (Integer value: values){<br>System.<em>out</em>.println(value+”,”+map.size());<br>}</p><p><strong>遍历方法：</strong></p><p>遍历方式1：键找值(key的值为String,value的类型为Integer)：for(String key:maps.keySet()){Integer value &#x3D;maps.get(key);System.out.println(key+”&#x3D;”+value)};</p><p>遍历方式2：键值对方式获取：相较于键找值更加面向对象，但代码复杂，它是把键值对当成一个整体遍历，也就是直接使用foreac遍历：for(被遍历集合的元素类型 变量 ：集合名称){…};有点像python的字典，创建方法：Set&lt;Map.Entry&lt;String,Integer&gt;&gt; xxx&#x3D;maps.entrySet();</p><p>遍历方式3（最简单的）：k,v只是个随便定义的变量，名字乱取都行</p><p>maps.forEach((k,v) -&gt;{<br>System.<em>out</em>.println(k+”–&gt;”+v);<br>});</p><h2 id="—-网络通信—"><a href="#—-网络通信—" class="headerlink" title="—-网络通信—-"></a><strong>—-网络通信—-</strong></h2><p>C&#x2F;S结构的软件开发：客户需要下载客户端，一更新客户端也要更新。<br>B&#x2F;S结构软件开发：类似于网上开发，客服不用下客服端。<br>网络通信三要素：协议，IP地址，端口号。<br>协议就是计算机网络客户端与服务端通信必须事先约定和彼此遵守的通信规则，一般有HTTP,FTP,TCP,UDP,SSH,SMTP.<br>IP地址：Internet Protocol Address互联网协议地址。有IPv4和IPv6.</p><p>IPv4:4个字节，32位组成<br>端口：如果说IP相当于一个酒店，端口就相当于酒店的房间号。端口取值范围：0~65535.比如浏览器的端口号就是80。<br>查看自己的ip：在cmd命令板输入ipconfig，尝试连接:ping ip地址或网站域名。<br>获取本地地址对象：(如果是公网IP就会优先输出公网IP，没有就是本地IP)<br>Inet4Address ip &#x3D; (Inet4Address) Inet4Address.getLocalHost();<br>    System.out.println(ip.getHostName());<br>    System.out.println(ip.getHostAddress());<br>获取网站的ip地址：InetAddress ip2&#x3D;InetAddress.getByName(“<a href="http://www.hepingan.top”/">www.hepingan.top”</a>);<br>    System.out.println(ip2.getHostName());<br>    System.out.println(ip2.getHostAddress());<br>测试连接：InetAddress ip3&#x3D;InetAddress.getByName(“<a href="http://www.baidu.com”/">www.baidu.com”</a>);<br>    System.out.println(ip3.isReachable(5000));&#x2F;&#x2F;ping<br>相当于ping xxx，在规定时间内连接，成功输出true，失败false</p><p><strong>UDP通信：</strong></p><p>与服务端传输信息不需要进行交手，所以不怎么安全，但可以用作开发实时通讯等。<br>创建集装箱的参数：DatagramPacket packet &#x3D;new DatagramPacket(数据包，数据包的长度，【IP地址】，【端口号】)；发送的客户端要写【】内的，接受的服务端不用写。<br>创建接收和发送数据的码头：DataSocket socket &#x3D;new DataSocket();<br>(客户端)发送数据：socket.send(packet);<br>(服务端)接收数据：socket.receive(packet);<br>关闭码头：socket.close();</p><p><strong>TCP通信</strong>(重点):</p><p>一般web网站都是用的TCP&#x2F;IP协议。<br>TCP&#x2F;IP协议 &#x3D;&#x3D;&gt; Transfer Control Protocol &#x3D;&#x3D;&gt; 传输控制协议<br>TCP&#x2F;IP协议的特点<br>* 面向连接的协议<br>* 只能由客户端主动发送数据给服务器端，服务器端接收到数据之后，可以给客户端响应数据。<br>* 通过三次握手建立连接，连接成功形成数据传输通道。<br>* 通过四次挥手断开连接<br>* 基于IO流进行数据传输<br>* 传输数据大小没有限制<br>* 因为面向连接的协议，速度慢，但是是可靠的协议。</p><p>客户端的开发流程：<br>1.客户端要请求于服务端的socket管道连接。<br>2.从socket通信管道中得到一个字节输出流<br>3.通过字节输出流给服务端写出数据。<br>服务端的开发流程：<br>1.注册端口。<br>2.接收客户端的Socket管道连接。<br>3.从socket通信管道中得到一个字节输入流。<br>4.从字节输入流中读取客户端发来的数据。<br>小结：<br>1.客户端用Socket连接服务端。Socket socket&#x3D;new Socket(ip,port)<br>2.服务端用ServerSocket注册端口，接收客户端的Socket连接。ServerSocket ss&#x3D;new ServerSocket(port);<br>3.通信是很严格的，对方怎么发，你就应该怎么收，对方发多少你就只能收多少。<br>4.实现的面向连接的socket端到端的通信管道，一方如果出现对象，另一方会出现异常！</p><p><strong>2023最新IO传输方法：</strong>使用DataI&#x2F;OStream数据输入输出流进行传输，对DataStream对象使用writeUTF和readUTF进行就收发送和读写。就不用用byte了</p><p><strong>总的方法</strong>就是客户端先创建Socket管道用于数据的传输管道，需要输入传输的IP地址和端口，再创建OutputStream对象从Socket管道中得到一个字节输出流，然后用DataOutputStream包装成高级的数据输出流，最后用writeUTF(msg)就可以发送消息了。服务端先注册一个端口号：ServerSocket ss&#x3D;new ServerSocket(端口号)，然后<strong>等待</strong>连接管道Socket socket &#x3D;ss.accept()，再创建InputStream并使用DataInputStream打包成数据输入流，最后创建个String类型变量使用readUTF()读写数据就行了。</p><p><strong>volatile</strong>类型变量<em>用于解决多个线程访问共享变量是会出现一个线程修改变量值后其他线程看不到最新的线程值。</em></p><p><strong>TCP通信实现多个客服端和服务端发消息</strong>（未使用线程池的）：学完网络通信能写出下面的就可以毕业了~</p><p><strong>客户端：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package new_TCPstudy;</span><br><span class="line"></span><br><span class="line">import java.io.DataOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.Socket;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">System.out.println(&quot;客服端启动&quot;);</span><br><span class="line">Socket socket=new Socket(InetAddress.getLocalHost(),9999);</span><br><span class="line">//从socket管道中得到一个字节输出流</span><br><span class="line">OutputStream OutputStream=socket.getOutputStream();</span><br><span class="line">//包装成高级的数据输出流</span><br><span class="line">DataOutputStream dataOutputStream=new DataOutputStream(OutputStream);</span><br><span class="line">Scanner scanner=new Scanner(System.in);</span><br><span class="line">while (true)&#123;</span><br><span class="line">System.out.println(&quot;请说：&quot;);</span><br><span class="line">String msg=scanner.nextLine();</span><br><span class="line">//输入exit退出客户端</span><br><span class="line">if(&quot;exit&quot;.equals(msg))&#123;</span><br><span class="line">System.out.println(&quot;退出客服端...&quot;);</span><br><span class="line">dataOutputStream.close();</span><br><span class="line">socket.close();</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">dataOutputStream.writeUTF(msg);</span><br><span class="line">dataOutputStream.flush();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>服务端：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package new_TCPstudy;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.net.ServerSocket;</span><br><span class="line">import java.net.Socket;</span><br><span class="line"></span><br><span class="line">public class Server &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">System.out.println(&quot;服务端，启动！&quot;);</span><br><span class="line">//为服务端注册端口</span><br><span class="line">ServerSocket ss=new ServerSocket(9999);</span><br><span class="line">//创建管道等待接收连接</span><br><span class="line">while (true)&#123;</span><br><span class="line">Socket socket=ss.accept();</span><br><span class="line">System.out.println(socket.getInputStream()+&quot;上线了~&quot;);</span><br><span class="line">new ServerThread(socket).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public static class ServerThread extends Thread&#123;</span><br><span class="line">private Socket socket;</span><br><span class="line">public ServerThread(Socket socket)&#123;</span><br><span class="line">this.socket=socket;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">InputStream inputStream=socket.getInputStream();</span><br><span class="line">//包装成高级的数据输入流</span><br><span class="line">DataInputStream dataInputStream=new DataInputStream(inputStream);</span><br><span class="line">while (true)&#123;</span><br><span class="line">String msg=dataInputStream.readUTF();</span><br><span class="line">System.out.println(&quot;收到来自&quot;+socket.getRemoteSocketAddress()+&quot;的消息：&quot;+msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">System.out.println(socket.getRemoteSocketAddress()+&quot;下线了&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Map集合学习时的代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.util.*;</span><br><span class="line">public class MapDemo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String ,Integer&gt; maps=new HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String,Integer&gt; maps2=new LinkedHashMap&lt;&gt;();</span><br><span class="line">Map&lt;String,Integer&gt; maps3=new TreeMap&lt;&gt;();</span><br><span class="line">System.out.println(maps2.isEmpty());//判断是否为空集合，是则返回true,反之</span><br><span class="line">maps.put(&quot;food&quot;,5);</span><br><span class="line">maps.clear();//清空</span><br><span class="line">maps2.put(&quot;long&quot;,15);</span><br><span class="line">maps.put(&quot;doll&quot;,1);</span><br><span class="line">maps.put(&quot;Huawei&quot;,2);</span><br><span class="line">maps.put(&quot;doll&quot;,10);//后面的把前面的覆盖了</span><br><span class="line">maps.put(&quot;iphone&quot;,2);</span><br><span class="line">maps.put(null,null);</span><br><span class="line">maps.put(&quot;people&quot;,8);</span><br><span class="line">maps.putAll(maps2);//将maps2的所有元素全部仍到maps中</span><br><span class="line">maps.remove(&quot;people&quot;);//删除特定元素</span><br><span class="line">Integer value1 =maps.get(null);//获取null的值</span><br><span class="line"></span><br><span class="line">System.out.println(maps);</span><br><span class="line">System.out.println(maps.get(&quot;iphone&quot;)+&quot;,&quot;+value1);//输出iphone的值和 null的值</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; keys=maps.keySet();//获取全部键的集合,Set无序不重复</span><br><span class="line">for (String key: keys)&#123;</span><br><span class="line">Integer value=maps.get(key);//获取对应键的值</span><br><span class="line">System.out.println(key+&quot;=&quot;+value);</span><br><span class="line">&#125;</span><br><span class="line">Collection&lt;Integer&gt; values=maps.values();//因为值可能有重复，所以用Collection集合</span><br><span class="line">for (Integer value: values)&#123;</span><br><span class="line">for(String key:maps.keySet())&#123;</span><br><span class="line">if(value==maps.get(key))&#123;</span><br><span class="line">System.out.println(value+&quot;值的有&quot;+key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(maps.size());// maps的大小</span><br><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entries=maps.entrySet();//键值对方式</span><br><span class="line">System.out.println(entries);</span><br><span class="line">for (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;</span><br><span class="line">String key=entry.getKey();</span><br><span class="line">Integer value=entry.getValue();</span><br><span class="line">System.out.println(key+&quot;--&gt;&quot;+value);</span><br><span class="line">&#125;</span><br><span class="line">//最简单的遍历方法</span><br><span class="line">maps.forEach((k,v) -&gt;&#123;</span><br><span class="line">System.out.println(k+&quot;--&gt;&quot;+v);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>啤酒问题（递归思路）</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 啤酒问题：Beer: 2/bottle,4 hats can change a beer,2 empty bottle can change a beer,question:how many bottle can 10 rmb drink?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">bbb</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> totalNumber;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> lastBottles;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> lastHats;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;你带了多少钱：&quot;</span>);</span><br><span class="line">buy(sc.nextInt());</span><br><span class="line">System.out.println(<span class="string">&quot;你能喝&quot;</span>+totalNumber+<span class="string">&quot;瓶&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;剩余瓶子数：&quot;</span>+lastBottles);</span><br><span class="line">System.out.println(<span class="string">&quot;剩余盖子数：&quot;</span>+lastHats);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">(<span class="type">int</span> money)</span>&#123;</span><br><span class="line">totalNumber+=money/<span class="number">2</span>;</span><br><span class="line">lastBottles+=money/<span class="number">2</span>;</span><br><span class="line">lastHats+=money/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> newNumber=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(lastBottles&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">newNumber+=lastBottles/<span class="number">2</span>;</span><br><span class="line">lastBottles=lastBottles%<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(lastHats&gt;=<span class="number">4</span>)&#123;</span><br><span class="line">newNumber+=lastHats/<span class="number">4</span>;</span><br><span class="line">lastHats=lastHats%<span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (newNumber&gt;<span class="number">0</span>)&#123;</span><br><span class="line">buy(newNumber*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java swing和FX界面UI</title>
      <link href="/2023/06/23/IT%E7%AC%94%E8%AE%B0/java/swing%E7%95%8C%E9%9D%A2UI/"/>
      <url>/2023/06/23/IT%E7%AC%94%E8%AE%B0/java/swing%E7%95%8C%E9%9D%A2UI/</url>
      
        <content type="html"><![CDATA[<p>JAVAFX 与JAVA Swing的区别与推荐：<a href="https://blog.csdn.net/apy29/article/details/126965053">学习Java界面编程是选择Swing还是JavaFX？_javafx swing_莱迪娜的歌声的博客-CSDN博客</a></p><p><strong>swing中一些基础函数介绍：</strong></p><table><thead><tr><th>JButton</th><th>按钮，按钮可以带一些图片或文字</th></tr></thead><tbody><tr><td>JCheckBox</td><td>复选框</td></tr><tr><td>JComBox</td><td>下拉列表框，可以在下拉显示区域显示多个选项</td></tr><tr><td>JFrame</td><td>框架类</td></tr><tr><td>JDialog</td><td>对话框</td></tr><tr><td>JLabel</td><td>标签组件</td></tr><tr><td>JRadioButton</td><td>单选按钮</td></tr><tr><td>JList</td><td>能够在用户界面中显示一系列条目的组件</td></tr><tr><td>JTextField</td><td>文本框</td></tr><tr><td>JPasswordField</td><td>密码框</td></tr><tr><td>JTextArea</td><td>文本区域</td></tr><tr><td>JOptionPane</td><td>一些面板</td></tr></tbody></table><p><strong>下面重点来学习JAVAFX！！！</strong>为什么选择JAVAFX不是Swing，因为我会css HTML5前端代码的编写，JAVAFX是可以支持前端代码的，而且标准的JAVA库中就包含JAVAFX的函数库，但是不会web前端代码的建议还是去学习 Swing，因为Swing单在IDEA中的表现是非常强大的，运行也比JAVAFX快。swing大佬对javafx与swing的对比和写的swing成品展示：<a href="https://www.zhihu.com/question/37236236">Java写GUI用swing还是JavaFX呢？ – 知乎 (zhihu.com)</a></p><p>配置JavaFX环境教程：<a href="https://blog.csdn.net/ooblack/article/details/116797407">IDEA安装JavaFx_idea javafx安装_Sout xza的博客-CSDN博客</a></p><p>出现下面这种情况：</p><p>​—图片暂时找不到了~—</p><p>在运行中选择编辑配置，点击修改选项找到添加VM选项，在VM选项这栏输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--module-path=&quot;C:\Users\PC\Desktop\老程序员了\javafx-sdk-20.0.1\lib&quot; --add-modules=javafx.controls,javafx.fxml</span><br></pre></td></tr></table></figure><p>将上面C:\Users\PC\Desktop\老程序员了\javafx-sdk-20.0.1\lib替换成你自己的解压路径就行。</p><p>不过如果你没有这个sample.fxml文件，也就是你不是创建的JavaFx项目，你创建的是一个普通的JavaSE项目，你用这个项目来写JavaFX，就应该加入的参数是<code>--module-path=&quot;C:\Users\PC\Desktop\老程序员了\javafx-sdk-20.0.1\lib&quot; --add-modules=javafx.controls</code></p><p>参数加入完毕之后点击apply，然后就可以正常运行了</p><hr><p>JavaFX运行时打开窗口的一个标准格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javafx.application.Application;<span class="keyword">import</span> javafx.fxml.FXMLLoader;<span class="keyword">import</span> javafx.scene.Parent;<span class="keyword">import</span> javafx.scene.Scene;<span class="keyword">import</span> javafx.stage.Stage;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Stage primaryStage)</span> <span class="keyword">throws</span> Exception&#123;primaryStage.setTitle(<span class="string">&quot;JAVAFX测试&quot;</span>);primaryStage.show();&#125;<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;launch(args);&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库学习（一）</title>
      <link href="/2023/05/12/IT%E7%AC%94%E8%AE%B0/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/05/12/IT%E7%AC%94%E8%AE%B0/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>以分号结尾加回车为一个命令</p><p>show databases;&#x2F;&#x2F;展示所有数据库</p><p>create database xxx;&#x2F;&#x2F;创建新的数据库</p><p>create database if not exists xxx;&#x2F;&#x2F;检查是否创建XXX数据库，没有则创建，有则不创建</p><p>create database default charset (字节大小);&#x2F;&#x2F;创建指定字节大小的数据库</p><p>drop database xxx;&#x2F;&#x2F;删除数据库</p><p>use xxx;&#x2F;&#x2F;使用xxx数据库</p><p>select database();&#x2F;&#x2F;查询当前数据库</p><p>show tables;&#x2F;&#x2F;查询当前数据库所有表</p><p>desc xxx;&#x2F;&#x2F;查询当前所有表内的表名</p><p>show create table xxx&#x2F;&#x2F;查询指定表的建表语句</p><p>create table xxx (</p><p>xxx 数据类型(int,varchar,double….) [comment ‘注释’],&#x2F;&#x2F;最后一个数据不加逗号！</p><p>)[comment ‘注释’];</p><p>&#x2F;&#x2F;在当前数据库创建xxx名字的表,在MYSQL中String&#x3D;varchar(字符串长度）</p><p>eg:create table hepingan(</p><p>id int comment ‘编号’,</p><p>name varchar(50) comment ‘姓名’&#x2F;&#x2F;最后一个数据不加逗号</p><p>)comment ‘何平安的表’;</p><p>drop table [if exists]xxx;&#x2F;&#x2F;删除表[如果存在则删,不存在也不报错]</p><p>truncate table xxx;&#x2F;&#x2F;删除表并重新创建</p><hr><p>MYSQL中数据</p><p>Eg:grade double(4,1) unsigned&#x2F;&#x2F;创建最大长度为4，小数位数为1的无负数的名叫grade的数据类型（4位:100.0,999.9）</p><p>name char(10);name2 varchar(10);&#x2F;&#x2F;定长char,变长varchar,区别：定长无论输多少都是10个字节性能好，变长输多少就是多少字节性能较差，超过括号内的字节就报错</p><p>time date comment ‘日期’</p><p>tips:数据库–&gt;表名–&gt;字段名</p><hr><p>alter table [表名] add [字段名] <a href="%E9%95%BF%E5%BA%A6">类型</a> (comment ‘ ‘);&#x2F;&#x2F;向[表名]中添加字段</p><p>alter table [表名] modify [字段名] [新数据类型](comment ‘ ‘);&#x2F;&#x2F;修改字段名数据类型</p><p>alter table [表名] change [原来的字段名] [新的字段名] <a href="%E9%95%BF%E5%BA%A6">类型</a> (comment ‘ ‘);&#x2F;&#x2F;修改指定字段名</p><p>alter table [表名] drop [字段名];&#x2F;&#x2F;删除字段名</p><p>alter table [表名] rename to [新的表名];&#x2F;&#x2F;修改表名</p><p>insert into [表名] (字段名1，字段名2…) values(值1，值2…);&#x2F;&#x2F;给指定字段添加数据</p><p>select *from [表名];&#x2F;&#x2F;查询表格数据</p><p>select [字段名1],[字段名2] from [表名] where [字段名2] between [值1] and [值2];&#x2F;&#x2F;查询字段名2的值在值1和值2之间的字段名1</p><p>Eg:select name money from employee where money between 1000 and 2000;&#x2F;&#x2F;查询money在1000到2000的雇员的名字</p><p><strong>参考原文：</strong><a href="https://blog.csdn.net/qq_52050769/article/details/118095034">Java连接mysql数据库方法及代码（jdbc）_jdbc连接数据库_先养只猫的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/pan_junbiao/article/details/86626741">JDBC数据库驱动的下载、安装与连接_jdbc驱动下载_pan_junbiao的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Mouer__/article/details/120647217">IDEA使用JDBC连接MySQL数据库详细教程_伊木子曦的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/Royalic/article/details/119604763">超详细的Idea与MySQL的连接（从入门到精通）_idea 怎么加入mysql_原来如此呀的博客-CSDN博客</a></p><hr><p>IDEA连接数据库方法：先下载mysql官方的connection连接包（地址：<a href="https://dev.mysql.com/downloads/connector/j/?os=26">MySQL :: Download Connector&#x2F;J</a>），选择Platform Independent下载，版本不一样驱动数据库的方式也不一样，但也只有两种代码。下载解压后选择jar文件，打开IDEA，选择文件–&gt;新建–&gt;数据库–&gt;mysql.</p><p>输入用户（root）和密码后点击测试连接</p><p>点击驱动程序选择Mysql,点击“+”选择刚刚下载好的jar文件，然后确定，就可以在项目栏看到外部库里多了mysql-connecter的文件，说明“硬件”上的就搞定了。</p><p>接下来就是代码时间，也是研究了好久，直接上成品：</p><h4 id="源代码："><a href="#源代码：" class="headerlink" title="源代码："></a><strong>源代码：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;`</span><br><span class="line">`<span class="keyword">import</span> java.sql.DriverManager;`</span><br><span class="line">`<span class="keyword">import</span> java.sql.SQLException;``<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ceshi3</span> &#123; <span class="comment">// 创建类`</span></span><br><span class="line">`Connection con; <span class="comment">// 声明Connection对象`</span></span><br><span class="line">`<span class="keyword">public</span> <span class="keyword">static</span> String user;`</span><br><span class="line">`<span class="keyword">public</span> <span class="keyword">static</span> String password;`</span><br><span class="line">`<span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123; <span class="comment">// 建立返回值为Connection的方法`</span></span><br><span class="line">`<span class="keyword">try</span> &#123; <span class="comment">// 加载数据库驱动类`</span></span><br><span class="line">`Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);`</span><br><span class="line">`System.out.println(<span class="string">&quot;数据库驱动加载成功&quot;</span>);`</span><br><span class="line">`&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;`</span><br><span class="line">`e.printStackTrace();`</span><br><span class="line">`&#125;`</span><br><span class="line">`user = <span class="string">&quot;root&quot;</span>;**<span class="comment">//数据库登录名**`</span></span><br><span class="line">`password = <span class="string">&quot;123456&quot;</span>;**<span class="comment">//密码**`</span></span><br><span class="line">`<span class="keyword">try</span> &#123; <span class="comment">// 通过访问数据库的URL获取数据库连接对象`</span></span><br><span class="line">`con = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/hh?useSSL=true&quot;</span>, user, password);**<span class="comment">//这里非常强调！！！hh只是我的数据库名，要写自己的table！！！**</span></span><br><span class="line">System.out.println(<span class="string">&quot;数据库连接成功&quot;</span>);`</span><br><span class="line">`&#125; <span class="keyword">catch</span> (SQLException e) &#123;`</span><br><span class="line">`e.printStackTrace();`</span><br><span class="line">`&#125;`</span><br><span class="line">`<span class="keyword">return</span> con; <span class="comment">// 按方法要求返回一个Connection对象`</span></span><br><span class="line">`&#125;`</span><br><span class="line">`<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; <span class="comment">// 主方法，测试连接`</span></span><br><span class="line">`<span class="type">ceshi3</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ceshi3</span>(); <span class="comment">// 创建本类对象`</span></span><br><span class="line">`c.getConnection(); <span class="comment">// 调用连接数据库的方法`</span></span><br><span class="line">`&#125;`</span><br><span class="line">`&#125;`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>精通Java学习之路（三）</title>
      <link href="/2023/05/12/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2023/05/12/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><p>JDK 17 API中文文档：<a href="https://doc.qzxdp.cn/jdk/17/zh/api/index.html">Java17中文文档 – API参考文档 – 全栈行动派 (qzxdp.cn)</a></p><p>说说自己的话：Java的基础和一些进阶我已经学完了，把java学完只是相当于在英语中学会读24个字母，还有许多模块需要学习。现在我在想是继续学java开发框架还是python大数据，毕竟我的专业是数据科学与大数据技术，学了java框架搭建再学下JavaWeb我就可以直接去面试上班了，而且JavaWeb中的Mysql，JDBC,HTML,CSS我已经学完了，阿巴阿巴阿巴…..但是python学了不仅可以搞大数据还可以搞ai,但是ai就业就比较难了。之前还准备学C++去搞游戏开发，算了，那又是个新的大领域….不过不慌我还是大二，暑假先把下学习要学的python给学了，然后去玩玩ai或者数据挖掘，争取自己搞个“挖矿机”，这可是我自己放假时的承若！</p><hr><p><strong>–异常处理–</strong></p><p>异常检测基本结构：try{要检查的代码}catch(Exception e){出错时抛出的代码}<br>一个例子讲述异常，输入的int类型变量age错误时抛出异常：<br><code>import java.util.Scanner;</code></p><p><code>public class xiancheng &#123;  public static void main(String[] args) &#123;    while (true) &#123;      try &#123;        Scanner sc = new Scanner(System.in);        System.out.println(&quot;请输入你的年龄:&quot;);        int age = sc.nextInt();        System.out.println(&quot;你的年龄是：&quot; + age);        break;      &#125; catch (Exception e) &#123;        System.err.println(&quot;你TM再乱输试试???&quot;);//err表示错误输出，输出时会红色字体显示      &#125;    &#125;  &#125;&#125;</code><br>运行结果：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/07/JJP1RWDQFVW5CVCQYCS.png" alt="img"></p><p><strong>–线程</strong>—</p><p>多线程（并发编程）<br>并发性：如果CPU是单核的，其实一个时刻只有一个进程在被执行，CPU会分时切换每个进程，因为切换的速度非常快，所以以为同时在进行。n核就是可以同时执行n个进程。一个进程可以包含多个线程，这就是多线程。</p><p>创建线程的三种方法：<br>1，定义一个类继承Thread线程类，重写run()方法,创建线程对象调用线程对象的start()方法启动线程。<br>2，定义一个线程任务类实现Runnable接口，重写run()方法，创建线程任务对象，把线程任务对象包装成线程对象，调用线程对象的start()方法启动线程<br>3，实现Callable接口（扩展）</p><p><strong>Thread类：</strong></p><p>多线程简单案例：main方法和run方法抢单核的cpu：<br><code>public class xiancheng &#123;  public static void main(String[] args) &#123;    xiancheng2 THREAD =new xiancheng2();    THREAD.start();    for(int i=0;i&lt;100;i++)&#123;      System.out.println(&quot;main线程输出&quot;+i);    &#125;  &#125;  static class xiancheng2 extends Thread&#123;    @Override    public void run()&#123;      for(int i=0;i&lt;100;i++)&#123;        System.out.println(&quot;子线程输出&quot;+i);      &#125;    &#125;  &#125;</code></p><p><code>&#125;</code><br>运行结果：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/07/QR5VZD9E7KTWDZF99PU0.png" alt="img"></p><p>可以看到跑的无规则，就是因为<strong>两个线程在抢一个CPU</strong></p><p>Runnable接口就是Thread的高级版，Callable&lt;&gt;又是Runnable的高级版,Runnable的主要作用是空出父类来，Callable&lt;&gt;的主要作用是增加返回值的(return),线程的内容建议直接看代码，里面有亲手写的注释，好理解些</p><p>—<strong>线程安全问题模拟项目训练</strong>—</p><p>如果两个线程同时取钱（即两个线程同时共享一个资源）：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/07/LAZM86BMSNTNO6LALP5ZF.png" alt="img"></p><p>就会产生如下情况：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/07/0E6XR6YN1_GPDQ01FMS1.png" alt="img"></p><p>这就需要一个一个排队来取，即把共享资源进行上锁，让每次只能有一个线程运行，这时就需要调用synchronized(锁对象){&#x2F;&#x2F;访问共享资源的代码}来实现，这里的锁对象可以是任意的，即：<img src="http://www.hepingan.top/wp-content/uploads/2023/07/CCM785XKI6F0LGSP5F.png" alt="img"></p><p><strong>—线程池—</strong></p><p>为防止线程的过多（因为一个人对象就要创建一个线程），就诞生了线程池，无需创建线程销毁线程，降低资源消耗，在线程池中放一些固定的线程，同一个线程可以创建多个任务。</p><p>创建线程池：ExecutorService pools &#x3D;Executors.<em>newFixedThreadPool</em>(线程池数量);</p><p>创建线程：Thread&#x2F;Runnable xxx &#x3D;new MyThread&#x2F;MyRunnable();&#x2F;&#x2F;这里的My是自己的线程类名</p><p>调用线程池：pools.submit(xxx);</p><p>Callable接口的线程的线程池调用：<br>Future&lt;数据类型&gt; 对象名称 &#x3D;线程池.submit(new Callable接口类(变量n));<br>Callable类：static class MyCallable implements Callable{有参构造变量n…}</p><p>volatile关键字：<br>问题：多个线程访问共享变量是会出现一个线程修改变量值后其他线程看不到最新的线程值。<br>例子：<br>@Override<br>  public void run(){<br>    try {<br>      Thread.sleep(1000);<br>    } catch (InterruptedException e) {<br>      throw new RuntimeException(e);<br>    }<br>    flag&#x3D;true;<br>    System.out.println(“flag is become TRUE”);<br>  }<br>VolatileDemo v1&#x3D;new VolatileDemo();<br>    &#x2F;&#x2F;子线程修改flag的值<br>    v1.start();<br>    &#x2F;&#x2F;主线程<br>    while (true){<br>      if(v1.isFlag()){<br>        System.out.println(“Going..”);<br>      }<br>    }<br>这时控制台不会输出Going…因为主线程直接拿的是一开始的false,并不是经过子线程修改过后的true</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/07/1CB@EFAKIE1H0PV0@K-1024x461.jpg" alt="img"></p><p>解决办法：1，加锁sysnchronized(xxx.class){}，因为加锁会清空工作内容，读取最新的内存出来。2，直接给变量加上volatile修饰，volatile修饰后，一旦这个变量改变，所有线程都可以读取最新值。volatile变量的流程图：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/07/6FEDEWL0AMJ8UCHYUFP-1024x461.jpg" alt="img"></p><p>一个方式是清空再读取，一个直接修改</p><p><strong>—原子性与原子类—</strong></p><p>原子性（就是线程安全问题）<br>问题：假如转账给别人，如果转账失败报错，但是对方钱这个变量已经变了。</p><p>可以用下面这些代码来测试，有时候就不会加到10000</p><p>@Override<br>public void run() {<br>for(int i&#x3D;1;i&lt;&#x3D;100;i++){<br>count++;<br>System.*out*.println(“count&#x3D;&#x3D;&gt;”+count);<br>}<br>}</p><p>Runnable r1&#x3D;new MyRunnable();<br>for(int i&#x3D;1;i&lt;&#x3D;100;i++){<br>&#x2F;&#x2F;启动100个线程，执行100次任务<br>new Thread(r1).start();<br>}</p><p>volatile只能保证可见性，不能保证原子性，直接用synchonized加锁，锁住任务结束后再进行下一个任务，而不是两个任务同时执行。<br>由于加锁机制性能差（因为是一个一个进行，会堵塞线程），所以就诞生了<strong>原子类</strong>。创建原子；类对象：AtomicInteger xxx&#x3D;new AtomicInteger();<br>输出原子类结果：xxx.incrementAndGet()。原理是先进行任务再取结果</p><p>原子类的CAS机制介绍：就是多个线程会先同时进行任务，然后一个线程的结果会优先返回最新值到原来开始拿的值，其他线程会再次检测原来开始拿的值，如果发现其值与最开始取的值不一样则会报废刚刚执行的值再拿新的值进行任务。</p><p><strong>线程学习时的代码</strong></p><p>import java.util.concurrent.Callable;<br>import java.util.concurrent.Future;<br>import java.util.concurrent.FutureTask;</p><p>public class xiancheng {<br>static class MyThread extends Thread{<br>public MyThread(String name){<br>&#x2F;&#x2F;public Thread(String name):父类的有参构造器<br>super(name);<br>}<br>public MyThread(){}</p><p>@Override<br>public void run(){<br>for(int i&#x3D;0;i&lt;10;i++){<br>System.<em>out</em>.println(Thread.<em>currentThread</em>().getName()+”输出”+i);<br>&#x2F;&#x2F;currrentThread为获取当前执行的线程<br>}<br>}<br>}</p><p>static class MyRunnable implements Runnable{<br><em>&#x2F;</em>*<br>*** Runnable<strong>接口优点：拥有</strong>Runnable<strong>的所有优点，线程任务类</strong>(MyRunnable)<strong>只是实现</strong>Runnable<strong>接口，还可以继承其他类</strong>(Thread<strong>类是继承的得嘛</strong>)<br>**** *同一个线程任务对象可以被包装成多个线程对象（意思就是可以分类）<br>**** *适合多个相同程序代码的线程去共享同一个资源<br>**** *线程池可以放入实现<strong>Runnable</strong>或<strong>Callable</strong>线程任务对象<br>***&#x2F;<br>*@Override<br>public void run() {<br>for (int i&#x3D;0;i&lt;5;i++){<br>System.<em>out</em>.println(Thread.<em>currentThread</em>().getName()+”输出”+i);&#x2F;&#x2F;currentThread方法为获取当前线程<br>}<br>}<br>}</p><p>static class MyCallable implements Callable<String>{<br>&#x2F;&#x2F;这个Callable接口也需要重写，不过不是run方法咯<br>@Override<br>public String call() throws Exception {<br>int sum&#x3D;0;<br>for(int i&#x3D;0;i&lt;10;i++){<br>System.<em>out</em>.println(Thread.<em>currentThread</em>().getName()+”输出”+i);<br>sum+&#x3D;i;<br>}<br>System.<em>out</em>.println(Thread.<em>currentThread</em>().getName()+”执行结果为”+sum);<br>return null;<br>}<br>}</p><p>public static void main(String[] args) throws InterruptedException {</p><p>Thread THREAD &#x3D;new MyThread();&#x2F;&#x2F;无参构造的线程<br>THREAD.start();<br>THREAD.setName(“一号线程”);&#x2F;&#x2F;设置线程名字,默认为Thread-0<br>System.<em>out</em>.println(THREAD.getName());&#x2F;&#x2F;获取线程名字</p><p>Thread THREAD2 &#x3D; new MyThread(“二号线程”);&#x2F;&#x2F;有参构造的线程<br>THREAD2.start();</p><p>Runnable TARGET&#x3D;new MyRunnable();&#x2F;&#x2F;多态的写法，前面写接口，后面写接口类名，这几个线程都是这么写<br>Thread THREAD3&#x3D; new Thread(TARGET,”三号线程”);<br><em>&#x2F;</em>*<br>*** Thread<strong>类中存在</strong>public Thread(Runnable target)<strong>和</strong>public Thread(Runnable target,String name)<em>*的构造方法<br>**** *所以要先创建**Runnable</em><em>的对象</em>*,**把线程任务对象包装成线程对象，且可以指定线程名称<br>***&#x2F;<br>*THREAD3.start();</p><p>new Thread(new Runnable() {<br>@Override<br>public void run() {<br>for(int i&#x3D;0;i&lt;5;i++){<br>System.<em>out</em>.println(Thread.<em>currentThread</em>().getName()+”输出”+i);<br>}<br>System.<em>out</em>.println(Thread.<em>currentThread</em>().getName()+”输出完毕”);<br>}<br>}).start();&#x2F;&#x2F;匿名内部类写法</p><p>Callable<String> CALL &#x3D;new MyCallable();&#x2F;&#x2F;创建Callable任务对象<br>FutureTask<String> TASK &#x3D;new FutureTask<String>(CALL);<br>*&#x2F;*<em><strong>把</strong>Callable</em><em>任务对象包装成一个未来任务对象<br>*** –public FutureTask(Callable</em><em><v></em> *callable)<br>**** *未来对象就是个<strong>Runnable</strong>线程对象，这样就可以被包装成线程对象<br>**** *未来任务对象可以再线程执行完毕后去得到线程执行结果<br>***&#x2F;<br>*Thread THREAD4 &#x3D;new Thread(TASK,”四号线程”);&#x2F;&#x2F;创建Thread线程对象<br>THREAD4.start();<br>&#x2F;&#x2F;下面的try是取线程执行的结果，如果没有跑完，就会让出CPU等线程执行结束再取结果<br>try {<br>String rs&#x3D; TASK.get();<br>System.<em>out</em>.println(rs);<br>}catch (Exception e){<br>e.printStackTrace();<br>}</p><p>Thread m &#x3D;Thread.<em>currentThread</em>();&#x2F;&#x2F;currentThread获取当前线程，这个代码在哪个线程就是那个线程，这里是main线程<br><em>&#x2F;</em>*<br>**** <em>因为在<strong>Thread</strong>类中，<strong>currentThread</strong>的方法为<strong>static</strong>类型，所以可以直接用对象或类名调用<br>**** <em>原</em></em>:public static Thread currentThread(){…}<br>***&#x2F;<br>*m.setName(“最强线程”);&#x2F;&#x2F;默认为main<br>System.<em>out</em>.println(m.getName());<br>for(int i&#x3D;0;i&lt;10;i++){<br>System.<em>out</em>.println(“main线程输出”+i);<br>}</p><p>&#x2F;&#x2F;sleep间隔方法<br>for (int i&#x3D;0;i&lt;5;i++){<br>System.<em>out</em>.println(i);<br>try {<br>Thread.<em>sleep</em>(1000);&#x2F;&#x2F;隔1000ms再输出数据,加上for就是每隔1s输出一个数据<br>} catch (InterruptedException e) {<br>e.printStackTrace();<br>}<br>}<br>}</p><p>}</p><p><strong>线程安全问题实战代码</strong></p><p><em><strong>账户信息类</strong>+<strong>实现主类：</strong></em></p><p>package xianchenganquan;</p><p>public class zhanghu {<br>private String card;<br>private double money;</p><p>public zhanghu() {</p><p>}<br>public zhanghu(String card, double money) {<br>this.card &#x3D; card;<br>this.money &#x3D; money;<br>}<br>public void drawMoney(double money) {<br>String name &#x3D; Thread.<em>currentThread</em>().getName();<br>synchronized (“随便”) {<br>if (this.money &gt;&#x3D; money) {&#x2F;&#x2F;左边的money是账户的，右边的是取的钱<br>System.<em>out</em>.println(“余额足够，尊敬的” + name + “已为你取出” + money);<br>this.money -&#x3D; money;<br>System.<em>out</em>.println(name + “取完钱后，” + card + “卡还剩” + this.money);<br>} else {<br>System.<em>out</em>.println(name + “来取钱，余额不足”);<br>}<br>}<br>}<br>public String getCard() {<br>return card;<br>}</p><p>public void setCard(String card) {<br>this.card &#x3D; card;<br>}</p><p>public double getMoney() {<br>return money;<br>}</p><p>public void setMoney(double money) {<br>this.money &#x3D; money;<br>}</p><p>public static void main(String[] args) {<br>&#x2F;&#x2F;创建一个共享取钱账户<br>zhanghu people1 &#x3D;new zhanghu(“ICBC”,10000);<br>&#x2F;&#x2F;创建两个Thread对象模拟线程取钱<br>Thread HEPNGAN &#x3D; new xianchenganquan.DrawThread(“何平安”,people1);<br>HEPNGAN.start();<br>Thread HEHAO &#x3D;new xianchenganquan.DrawThread(“何浩”,people1);<br>HEHAO.start();<br>}<br>}</p><p><em><strong>DrawThread类</strong>：</em></p><p>package xianchenganquan;</p><p>public class DrawThread extends Thread{<br>private zhanghu zh;<br>public DrawThread(){}<br>public DrawThread(String name,zhanghu zh){<br>super(name);&#x2F;&#x2F;调用Thread父类中的name<br>this.zh&#x3D;zh;<br>}</p><p>@Override<br>public void run(){<br>zh.drawMoney(10000);<br>}<br>}</p><p><strong>线程池学习代码</strong></p><p>import java.util.concurrent.*;</p><p>public class ThreadPools {<br>public static Object <em>ziyuan1</em>&#x3D;new Object();&#x2F;&#x2F;创建资源<br>public static Object <em>ziyuan2</em>&#x3D;new Object();</p><p>public static void main(String[] args) {</p><p>new Thread(new Runnable() {<br>@Override<br>public void run() {<br>synchronized (<em>ziyuan1</em>){&#x2F;&#x2F;死锁代码形式上通常要进行锁的嵌套访问<br>System.<em>out</em>.println(“线程1占用资源1，请求资源2”);<br>try {<br>Thread.<em>sleep</em>(1000);<br>} catch (InterruptedException e) {<br>throw new RuntimeException(e);<br>}<br>synchronized (<em>ziyuan2</em>){<br>System.<em>out</em>.println(“线程1成功占用资源2”);<br>}<br>}<br>}<br>}).start();</p><p>new Thread(new Runnable() {<br>@Override<br>public void run() {<br>synchronized (<em>ziyuan2</em>){<br>System.<em>out</em>.println(“线程2占用资源2，请求资源1”);<br>try {<br>Thread.<em>sleep</em>(1000);&#x2F;&#x2F;先睡1s<br>} catch (InterruptedException e) {<br>throw new RuntimeException(e);<br>}<br>synchronized (<em>ziyuan1</em>){<br>System.<em>out</em>.println(“线程2成功占用资源1”);<br>}<br>}<br>}<br>}).start();<br>&#x2F;&#x2F;创建一个线程池，固定数量为3<br>ExecutorService pools &#x3D;Executors.<em>newFixedThreadPool</em>(3);<br>Runnable target&#x3D; new MyRunnable();<br>pools.submit(target);<br>pools.submit(target);<br>pools.submit(target);<br>pools.submit(target);</p><p>pools.shutdown();&#x2F;&#x2F;等运行结束后关闭线程池<br>&#x2F;&#x2F;Callable的线程池<br>ExecutorService pools2 &#x3D;Executors.<em>newFixedThreadPool</em>(3);<br>Future<String> t1 &#x3D;pools2.submit(new MyCallable(100));<br>Future<String> t2 &#x3D;pools2.submit(new MyCallable(200));<br>Future<String> t3 &#x3D;pools2.submit(new MyCallable(300));<br>Future<String> t4 &#x3D;pools2.submit(new MyCallable(400));</p><p>try {<br>String rs1&#x3D;t1.get();<br>String rs2&#x3D;t2.get();<br>String rs3&#x3D;t3.get();<br>String rs4&#x3D;t4.get();<br>System.<em>out</em>.println(rs1);<br>System.<em>out</em>.println(rs2);<br>System.<em>out</em>.println(rs3);<br>System.<em>out</em>.println(rs4);<br>}catch (Exception e){<br>e.printStackTrace();<br>}</p><p>}<br>private static class MyRunnable implements Runnable{<br>@Override<br>public void run() {<br>for (int i &#x3D; 1; i &lt; 3; i++) {<br>System.*out*.println(Thread.*currentThread*().getName() + “–&gt;” + i);<br>}<br>}<br>}<br>static class MyCallable implements Callable{<br>private int n;<br>public MyCallable(int n){<br>this.n&#x3D;n;<br>}</p><p>@Override<br>public Object call() throws Exception {<br>int sum&#x3D;0;<br>for (int i&#x3D;1;i&lt;n;i++){<br>sum&#x3D;sum+i;<br>}<br>return Thread.<em>currentThread</em>().getName()+”结果为”+sum;<br>}<br>}<br>}</p><p><strong>volatile和原子类学习代码</strong></p><p><code>import java.util.concurrent.atomic.AtomicInteger;</code></p><p><code>//问题：多个线程访问共享变量是会出现一个线程修改变量值后其他线程看不到最新的线程值。</code><br><code>public class VolatileDemo extends Thread&#123;</code><br><code>private volatile boolean flag=false;</code></p><p><code>public boolean isFlag()/*布尔变量的get方法为is*/ &#123;</code><br><code>return flag;</code><br><code>&#125;</code></p><p><code>public void setFlag(boolean flag) &#123;</code><br><code>this.flag = flag;</code><br><code>&#125;</code><br><code>@Override</code><br><code>public void run()&#123;</code><br><code>try &#123;</code><br><code>Thread.*sleep*(1000);</code><br><code>&#125; catch (InterruptedException e) &#123;</code><br><code>throw new RuntimeException(e);</code><br><code>&#125;</code><br><code>flag=true;</code><br><code>System.*out*.println(“flag is become TRUE”);</code><br><code>&#125;</code></p><p><code>public static void main(String[] args) &#123;</code><br><code>VolatileDemo v1=new VolatileDemo();</code><br><code>//子线程修改flag的值</code><br><code>v1.start();</code><br><code>//主线程</code><br><code>synchronized (VolatileDemo.class)&#123;</code><br><code>if(v1.isFlag())&#123;</code><br><code>System.*out*.println(“Going..”);</code><br><code>&#125;</code><br><code>&#125;</code><br><code>Runnable r1=new MyRunnable();</code><br><code>for(int i=1;i&lt;=100;i++)&#123;</code><br><code>//启动100个线程，执行100次任务</code><br><code>new Thread(r1).start();</code><br><code>&#125;</code></p><p><code>//原子类的方法</code><br><code>Runnable r2=new MyRunnable2();</code><br><code>for(int i=1;i&lt;=100;i++)&#123;</code><br><code>new Thread(r2).start();</code><br><code>&#125;</code><br><code>&#125;</code><br><code>static class MyRunnable implements Runnable&#123;</code><br><code>private volatile int count;</code><br><code>@Override</code><br><code>public void run() &#123;</code><br><code>for(int i=1;i&lt;=100;i++)&#123;</code><br><code>count++;</code><br><code>System.*out*.println(“count==&gt;”+count);</code><br><code>&#125;</code><br><code>&#125;</code></p><p><code>&#125;</code><br><code>static class MyRunnable2 implements Runnable&#123;</code><br><code>private AtomicInteger atomicInteger=new AtomicInteger();</code><br><code>@Override</code><br><code>public void run() &#123;</code><br><code>try &#123;</code><br><code>Thread.*sleep*(2000);</code><br><code>&#125; catch (InterruptedException e) &#123;</code><br><code>throw new RuntimeException(e);</code><br><code>&#125;</code><br><code>for (int i = 1; i &lt;= 100; i++) &#123;</code><br><code>System.*out*.println(“count===&gt;” + atomicInteger.incrementAndGet());</code><br><code>&#125;</code><br><code>&#125;</code><br><code>&#125;</code><br><code>&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通Java学习之路（二）</title>
      <link href="/2023/04/24/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2023/04/24/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><p>—<strong>抽象类与接口—</strong></p><p>-&gt;抽象类的抽象概念：父类知道子类一定要干嘛，但是每个子类完成的都不一样，子类以后也只会用重写的功能，那么父类的该功能就可以定义为抽象方法，子类重写调用子类自己</p><p>-&gt;父类中的所有抽象方法在子类中必须被全部重写，或者把这个子类也写成抽象类。<br>抽象类存在的意义就是当母猪生孩子，就是拿来被继承的</p><p>-&gt;接口interface,是更加彻底的抽象，用于规范思想，子类必须实现接口的全部抽象方法</p><p>-&gt;实现接口的类称为实现类<br>接口中所有的抽象方法也是全部要重写</p><p>-&gt;接口也可以继承接口<br>接口中没有构造器，不能创建对象</p><p>类有5大成分：成员变量，方法，构造器，代码块，内部类<br>静态代码块优先会与类执行一次，可用于初始化操作，实例代码块用于执行实例对象，可用于初始化实例资源。</p><p>–<strong>final-</strong></p><p>**<br>**final（最终）：修饰类，表示该类不能被继承了，实际开发中没怎么用<br>final修饰方法，该方法不能被重写<br>final修饰变量，变量有且只能赋值一次<br>final静态变量也可以用 静态代码块赋值：</p><p><img src="http://www.hepingan.top/wp-content/uploads/2023/07/A8NUL7VN0RQ1_IWWA3O.png" alt="img"></p><p>单例设计模式：一个类永远只存在一个对象，就像虚拟机，任务管理器，有些只能开一个窗口的游戏。<br>饿汉单例设计模式：通过类获取单例对象的时候，对象就已经提前做好了</p><p>—<strong>xml文件</strong>—</p><p>xml（可扩展标记语言）文件用于数据交换，数据传输；配置文件；数据存储；<br>xml文件元素: 声明（抬头）：<?xml version=”1.0″ encoding=”UTF-8″ ?><br>元素（标签）（一个XML文件只能有一个根标签，就是最大的那个），属性，注释，实体字符，CDATA字符数据区，处理指令。元素（标签）（一个XML文件只能有一个根标签，就是最大的那个），属性(id&#x3D;?,desc&#x3D;?)，注释()，实体字符(转义字符)，CDATA字符数据区，处理指令（就是css）。</p><p>xml中的转义字符：<br>&lt;为&lt;&gt;为&gt; “为&quot;’为&apos;&amp;为&amp;</p><p>html是用来显示数据的；xml是用来描述数据、存放数据的，xml不是HTML的替代品，xml和html是两种不同用途的语言。 XML 不是要替换 HTML；实际上XML 可以视作对 HTML 的补充。XML 和HTML 的目标不同HTML 的设计目标是显示数据并集中于数据外观，而XML的设计目标是描述数据并集中于数据的内容,XML是一种跨平台的，与软、硬件无关的，处理与传输信息的工具。</p><p><em>这边建议直接上代码，里面有注释好了解看些，复制到自己的IDE去看吧</em></p><p><strong>抽象类学习代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class chouxiang &#123;static abstract class Animal&#123;public abstract void run();//抽象方法public abstract void eat();&#125;//父类定义为抽象的static abstract class Dog extends Animal&#123;@Overridepublic void run()&#123;System.*out*.println(&quot;狗跑步&quot;);&#125;&#125;static class Cat extends Animal&#123;@Override//必须重写抽象类的全部方法，不然这个类也要被写成抽象类public void run()&#123;System.*out*.println(&quot;猫跑步&quot;);&#125;@Overridepublic void eat()&#123;System.*out*.println(&quot;猫吃饭&quot;);&#125;&#125;public static void main(String[] args) &#123;Cat cat =new Cat();cat.eat();cat.run();//抽象类不能创建对象，但是一定有构造器*/**</span><br><span class="line">反证法证明:如果能创建:Animal an =new Animal();</span><br><span class="line">an.run();这时这个方法就跑不了，因为没有定义</span><br><span class="line">或者直接说：抽象类本来就是抽象，抽象就不能具体化；</span><br><span class="line">\*/</span><br><span class="line">*//抽象类优点可以得到拥有抽象方法的能力&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>接口学习代码：</strong></p><p>接口类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface jiekou &#123;public abstract void run();//标灰是因为接口中的抽象方法默认就是public abstract，所以可以省略不写前面的void eat();public static final String *name* = &quot;sb&quot;;//常量,运行过程中不许更改//接口中常量可以省去public static finalclass cl1&#123;public void hit()&#123;System.*out*.println(&quot;父类打&quot;);&#125;&#125;interface inter&#123;default void hit()&#123;System.*out*.println(&quot;接口打&quot;);&#125;&#125;class cl2 extends cl1 implements inter&#123;//继承在前接口在后，继承为亲爹，接口为干爹public static void main(String[] args) &#123;cl2 cc =new cl2();cc.hit();//运行出来是父类的方法&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">jiekou2</span>&#123;<span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>;&#125;<span class="keyword">interface</span> <span class="title class_">jiekou3</span> <span class="keyword">extends</span> <span class="title class_">jiekou4</span>,jiekou5&#123;</span><br><span class="line">    <span class="comment">//接口继承接口，目的也是省空间</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span>;&#125;<span class="keyword">interface</span> <span class="title class_">jiekou4</span>&#123;<span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>;&#125;<span class="keyword">interface</span> <span class="title class_">jiekou5</span>&#123;<span class="keyword">void</span> <span class="title function_">abab</span><span class="params">()</span>;&#125;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shixianlei</span> <span class="keyword">implements</span> <span class="title class_">jiekou</span>,jiekou2,jiekou3&#123;<span class="keyword">private</span> String name;<span class="keyword">private</span> <span class="type">int</span> age;<span class="keyword">public</span> <span class="title function_">shixianlei</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;<span class="built_in">this</span>.name=name;<span class="built_in">this</span>.age=age;&#125;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;System.*out*.println(name+<span class="string">&quot;跑&quot;</span>);&#125;</span><br><span class="line">                                                                                                                            <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;&#125;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span> &#123;&#125;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">()</span> &#123;&#125;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;&#125;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">abab</span><span class="params">()</span> &#123;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>xml学习的代码:</strong></p><?xml version="1.0" encoding="UTF-8" ?><!--声明（抬头）--><?xml-stylesheet type="text/css" href="./xml.css" ?><!--导入CSS样式--><!--元素（标签）--><person><name>何平安</name><age>19</age><sex>boy</sex><box><start></start></box><Sql>select *from student where id &lt; 123 &amp;&amp; age &gt; 18</Sql></person><p><strong>代码块学习时候的代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">daimakuai</span> &#123;<span class="keyword">private</span> <span class="keyword">final</span> String name;<span class="keyword">static</span> &#123;System.*out*.println(<span class="string">&quot;静态代码块,先执行一次&quot;</span>);&#125;&#123;System.*out*.println(<span class="string">&quot;实例代码块执行一次&quot;</span>);name=<span class="string">&quot;何平安&quot;</span>;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;System.*out*.println(<span class="string">&quot;主方法执行一次&quot;</span>);daimakuai d1=<span class="keyword">new</span> <span class="title class_">daimakuai</span>();<span class="comment">//执行实例代码块System.*out*.println(d1.name);*buy*(12);&#125;final double r=3.14;public static final double *s*;static &#123;*s*=123;&#125;//静态代码块赋值//r=23;//final变量被第二次赋值，报错public static void buy(final double w)&#123;//w=15;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>精通Java学习之路（一）</title>
      <link href="/2023/04/02/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/04/02/IT%E7%AC%94%E8%AE%B0/java/%E7%B2%BE%E9%80%9AJava%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><strong>本文章的图片由于是天香园1.0的但是过期了图片就查看不了，就当我自己的一个纪念了吧~</strong></p><p><strong>命运的齿轮开始转动~</strong></p><p><img src="https://img-hh.oss-cn-hangzhou.aliyuncs.com/undefined0eb18691092e66fd4d69f0ad8d944188.jpg" alt="img"></p><p>Java三大特征：封装，继承和多态<br>成员变量：静态成员变量(static)和实例成员变</p><p><img src="https://picture-hepingan.oss-cn-hangzhou.aliyuncs.com/web_photos/4N%24V%601%28_K9Y1J_3NA%5DWFS3M.png" alt="img"></p><p>访问方法：类名.静态成员变量；对象.实例成员变量；对象.静态成员变量；（第三个不推荐）</p><p><img src="https://picture-hepingan.oss-cn-hangzhou.aliyuncs.com/web_photos/CKUS0%5D9%609DVER%25GNU6P0~7V.png" alt="img"></p><p>套话：静态的都可以访问，实例的只能实例的访问</p><p>继承中子类不能继承父类的构造方法,eg:父类：public People(int age){this.age&#x3D;age},子类就不能继承这个<br>@Override注释的用法</p><p><img src="https://picture-hepingan.oss-cn-hangzhou.aliyuncs.com/web_photos/Z%40ASH_5XZ%29%29%280%40LWSR6Z%7DM7.png" alt="img"><img src="https://picture-hepingan.oss-cn-hangzhou.aliyuncs.com/web_photos/D%40W%7DZHRM11TD%29%29CS%28%28%25ZB_A.png" alt="img"></p><p>子类重写方法的修饰符要比父类的更大或一样，EG：父类：protected,子类：public;<br>子类重写方法的返回值类型要比父类小或一样，RG:父类：public object run(){},子类:public Integer run(){};<br>继承后的全部（有参和无参）构造器一定会先访问父类的无参构造器，再执行子类自己的构造器；<br>子类的构造器第一行都有一个super();调用父类的无参数构造</p><p>何平安 18:44:36</p><p>引用类型作为方法的参数和方法的返回值：<br>先通过类进行创建对象</p><p><img src="https://picture-hepingan.oss-cn-hangzhou.aliyuncs.com/web_photos/QIXE%25X%5DY%7B%24K_FVMYDKBLT4H.png" alt="img"></p><p>引用类型作为方法的参数：</p><p><img src="https://images.cnblogs.com/cnblogs_com/blogs/773443/galleries/2338409/t_230823191130_AD(JA%7DKOE%5B6_A38XG_WEGH5.png" alt="img"></p><p>引用类型作为数据类型(返回值)创建方法：</p><p><img src="https://images.cnblogs.com/cnblogs_com/blogs/773443/galleries/2338409/t_230823191129_C" alt="img">~16XZP%60_PPPJ0VD(<a href="mailto:&#x54;&#95;&#x4a;&#64;&#86;&#46;&#x70;&#x6e;&#103;">&#x54;&#95;&#x4a;&#64;&#86;&#46;&#x70;&#x6e;&#103;</a>)</p><p>，因为需要return 返回值，所以需要添加一个新的对象，如int等基本数据类型</p><p>三种方法设置引用类型的成员变量:</p><p><img src="https://images.cnblogs.com/cnblogs_com/blogs/773443/galleries/2338409/t_230823191130_9S" alt="img">7YN~PROH73V5ROF0K3WH.png)</p><p>c3类需要添加有参的构造方法（特别的引用类型添加方式：Address address）,还要有getter and setter设置这三个变量(两个基本类型变量和一个成员类型变量)<br>Address类：</p><p><img src="https://img2023.cnblogs.com/blog/3018339/202308/3018339-20230824031449085-805741147.png" alt="img"></p><p>，当然了也要添加三个变量的getter和setter方法</p><p><strong>成员变量和方法学习时候的代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class class1 &#123;</span><br><span class="line">private String name;</span><br><span class="line">private int age;</span><br><span class="line">private boolean sex;//实例成员变量，属于类的对象，需要添加对象进行访问</span><br><span class="line">public static String schoolname=&quot;何平安la&quot;;//静态成员变量，属于类本身，可用类名直接访问</span><br><span class="line">public class1()&#123;</span><br><span class="line">&#125;</span><br><span class="line">public class1(String name, int age, boolean sex) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">public static void speakname()&#123;</span><br><span class="line">System.out.println(&quot;呜哈哈哈&quot;+schoolname);</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">public boolean isSex() &#123;</span><br><span class="line">return sex;</span><br><span class="line">&#125;</span><br><span class="line">public void setSex(boolean sex) &#123;</span><br><span class="line">this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">public void speak()&#123;</span><br><span class="line">System.out.println(&quot;name:&quot;+this.name+&quot;,age:&quot;+age+&quot;,sex:&quot;+this.sex);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">class1 zbj =new class1();</span><br><span class="line">zbj.setName(&quot;猪八戒&quot;);</span><br><span class="line">System.out.println(zbj.schoolname);</span><br><span class="line">class1.speakname();//类名.静态方法</span><br><span class="line">speakname();//同一个类中访问静态方法可以不写类名</span><br><span class="line">zbj.speak();//对象.实例方法</span><br><span class="line">zbj.speakname();//对象.静态方法（不推荐）</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承学习时候的代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class c2 &#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">c2 c =new c2();</span><br><span class="line">People p1= new People();</span><br><span class="line">Student s1=new Student();</span><br><span class="line">s1.study();</span><br><span class="line">&#125;</span><br><span class="line">static class People &#123;</span><br><span class="line">public People()&#123;</span><br><span class="line">System.out.println(&quot;人&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public String name;</span><br><span class="line">public static void swim()&#123;</span><br><span class="line">System.out.println(&quot;游泳&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void eat()&#123;</span><br><span class="line">System.out.println(&quot;吃饭&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void run()&#123;</span><br><span class="line">System.out.println(&quot;跑步&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">static class Student extends People&#123;</span><br><span class="line">public Student()&#123;</span><br><span class="line">// super(); 此处写不写都一样</span><br><span class="line">System.out.println(&quot;学生&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void study()&#123;</span><br><span class="line">System.out.println(&quot;学习&quot;);</span><br><span class="line">eat();//调用子类的eat</span><br><span class="line">super.eat();//调用父类的eat</span><br><span class="line">//super可以在实例方法中调用子类中被重写的方法</span><br><span class="line">&#125;</span><br><span class="line">@Override//加上注解后可以检查父类的方法是否写错，注释特点可读性好，安全，优雅~</span><br><span class="line">public void eat()&#123;</span><br><span class="line">System.out.println(&quot;学生吃的多&quot;);//方法重写</span><br><span class="line">&#125;</span><br><span class="line">// @Override</span><br><span class="line">//此处方法名与父类的不一样，报错提示</span><br><span class="line">public void run1()&#123;</span><br><span class="line">System.out.println(&quot;学生跑步&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public int id;</span><br><span class="line">// @Override</span><br><span class="line">public static void swim()&#123;</span><br><span class="line">&#125;//静态方法不能被重写,因为静态方法只能用于自己的类，不能重写,单独写一样的方法相当于写了个新的静态方法，而不是重写</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>引用成员变量的代码：</strong></p><p>主:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">public class c3 &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    private Address address;</span><br><span class="line"></span><br><span class="line">    public c3(String name, int age, Address address) &#123;</span><br><span class="line"></span><br><span class="line">this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    public c3()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line"></span><br><span class="line">this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Address getAddress() &#123;</span><br><span class="line">        return address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAddress(Address address) &#123;</span><br><span class="line">        this.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Dog jinmao =new Dog();</span><br><span class="line">        go(jinmao,1);</span><br><span class="line">        //三种方法创造对象</span><br><span class="line">        c3 hh = new c3();</span><br><span class="line">        hh.setName(“何平安”);</span><br><span class="line">        hh.setAge(18);</span><br><span class="line">        hh.setAddress(new Address(“天香园”,22,33));//设置Address</span><br><span class="line"></span><br><span class="line">        c3 hly= new c3(“何六一”,12,new Address(“嘉华园”,12,34));//有参构造函数</span><br><span class="line"></span><br><span class="line">        c3 ch = new c3();</span><br><span class="line">        ch.setName(“陈寒”);</span><br><span class="line">        ch.setAge(19);</span><br><span class="line">        Address addr =new Address(“嘉华园”,12,23);//可以新建一个创建Address</span><br><span class="line">        ch.setAddress(addr);</span><br><span class="line">        Address add1=ch.getAddress();</span><br><span class="line">        System.out.println(ch.getName()+”住在”+add1.getName()+”,今年”+ch.getAge()+”岁了，地址坐标：”+add1.getX()+”,”+add1.getY());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public static void go(Dog a,int op)&#123;//引用类型作为方法的参数</span><br><span class="line">        System.out.println(“开始”);</span><br><span class="line">        a.run();</span><br><span class="line">        System.out.println(“结束”);</span><br><span class="line">    &#125;</span><br><span class="line">    public void eat(int age,String name)&#123;</span><br><span class="line">        this.age=age;</span><br><span class="line"></span><br><span class="line">this.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Dog createDog()&#123;</span><br><span class="line">        Dog taidi = new Dog();//创建一个新的对象，如下面的int和boolean类型，因为需要返回值</span><br><span class="line">        return taidi;</span><br><span class="line">    &#125;</span><br><span class="line">    //引用类型作为返回值</span><br><span class="line">    public static int madeDog()&#123;</span><br><span class="line">        int abc=1;</span><br><span class="line">        return abc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static boolean sexDog()&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    //通过引用类型创建方法</span><br><span class="line">    static class Dog&#123;</span><br><span class="line">        public void run()&#123;</span><br><span class="line">            System.out.println(“狗跑步”);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //创建类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Address类:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class Address &#123;</span><br><span class="line">private String name;</span><br><span class="line">private double x;</span><br><span class="line">private double y;</span><br><span class="line">public Address(String name, double x, double y) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.x = x;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public double getX() &#123;</span><br><span class="line">return x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setX(double x) &#123;</span><br><span class="line">this.x = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public double getY() &#123;</span><br><span class="line">return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setY(double y) &#123;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> IT笔记 </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的故事（大一上）</title>
      <link href="/2023/02/03/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%B8%80%E4%B8%8A%EF%BC%89/"/>
      <url>/2023/02/03/%E6%88%91%E7%9A%84%E7%B2%BE%E5%8D%8E/%E6%88%91%E7%9A%84%E6%95%85%E4%BA%8B%EF%BC%88%E5%A4%A7%E4%B8%80%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>你愿意听我的故事吗？愿意的话我可以陪你摆一桌茶水瓜子细谈….</p><p>我的影视动画后期和IT程序设计的故事…<br>高考完后我感觉我的心就彻底被敞开，以前学习只能学习固定的科目学科，都是我提不起兴趣的玩意儿，现在我可以选择我喜欢的东西了。但是方向太多，一开始被偶然刷到的视频剪辑广告推销，看它又是免费的，就报了名听了两节课，但是第三天它就需要收钱了，果然都是资本家，我就去自学了PR和AE，大概也就学了一周，掌握了些基本操作，完全达不到接单的要求。<br>之后我就一直摆烂，暑假我沉迷于一款名为原神的游戏，觉得在这个虚拟世界里非常自由(当然角色长得也挺好看的)，我就喜欢在b站刷一些二创视频，感觉都好厉害非常令我震惊，天马行空的震撼大作的，我就开始对这些好奇，了解一下后大致可以通过三维和二维两种方法呈现给观众，我就去自学了Blender这个3D全能软件，发现它功能真的很强大，现在好多都摸不清，最开始是学习软件的操作，然后开始学习简单建模，发现建模这玩意儿真的拗口，后来知道渲染这个东西和网上有免费的模型提供下载，就放弃建模开始学习后期动作和画面渲染，我发现还挺好玩，就学习了好久，模型就是原神里的人物，动作也是套用的，就渲染是自己搞的，虽然搞出来和大佬们的差距很大，但是别提我当时有多开心了。<br>后来我又捡起之前的影视剪辑，下载了必备的PS软件，学习了一些基础操作后就迎来了大学开学…<br>开学发生了很多事就不谈了，这篇文章主要来讲讲我卷王的故事。开学后我是先继续玩我的Blender,室友都还挺新奇我这个新奇玩意儿的，我也有种他人不知只我知的沾沾自喜。后来可以制作出一些简单的mmd动画，但是我的电脑真的很烂，打CF都有点卡的那种，我大三打算买个新的台式电脑，渲染个动画要半天(真半天)，也有可能是我做得很nb，发到b站，一看播放量500都没有，打击了我很多，没事我知道有限流限制的，大佬都是要慢慢来的。<br>11月份，疫情封校封寝，我又捡起我的AE和Pr，尝试开始二维动画的创作，学习了将一张图片变成动态图片的操作，这个是我影视动画设计里面学得算比较头疼的一个内容，不过还是成功了，制作了原神散步的动图，最后取得了完美的胜利，获得2.5w播放量，<br>3200的点赞量和好多的收藏投币，也因此有人来找我合作，我的第一个真正意义上的单子，虽然只有简简单单的15元，但别说微信支付到账的那一刻我差点蹦起来了，我把它给我的爸妈看，我自然也收到了不少正反馈。之后我就放开了创作，一天三张动图，但是好景不长，热度都是短周期的，之后就再也没结果单了…<br>放假了，我的大一上学期结束了….<br>寒假放得比较早，在放假之前我就在网上买了一块100多的数位板，准备在寒假学完数位板绘画然后进行原画创作，因为之前的动图创作都是偷的别人的图，偷多了总是不好的。我兴致勃勃的学了两三天，结果因为没有及时的正反馈又终止了，就开始每天打游戏了，但是还是有每天在学。后来疫情全面爆发，呆在家里也会被阳，全员阳了个阳，家人都遭了，别提那几天痛苦的日子了，整天就像死猪皮子放在火堆里烤，白天晚上都在睡，呼吸不到外面的空气。病好之后我也没有心思学习了，就想放肆的把我这几天没玩够的游戏给打了，之后的寒假我就再也没学习过了…..整天只做两件事:守店，打游戏。<br>就这样混到了开学，我的影视动画后期也就搞一段落了……<br>大一下学期来了……</p>]]></content>
      
      
      <categories>
          
          <category> 我的精华 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 我的故事 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
